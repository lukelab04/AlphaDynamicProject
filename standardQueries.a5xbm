'TIP: You can encrypt this file when it is saved, or password protect it, by adding a special comment to the first line of the file (with no leading spaces).
'To encrypt the file, set the comment on the first line to: 'ENCRYPTED
'To password protect the file (which will also encrypt it), set the comment on the first line to: 'PASSWORD:your_password_phrase
'To create a compiled AEX library (when this project is published), add the comment 'COMPILEAEX at the START of a line in the code.

' Input: [e.filters] like {"columnName": name, columnVal: val, connector: 'OR' | 'AND', op: '=', '!=', etc}
' Input: e.configName
' Input: e.pageOptions like {pageSize: n, getPage: n} or nothing
' Input: e.sortOptions

function querySqlWithFilters as DynamicLists::Result (e as p, returnResultSet as l = .f.)
	dim configInterface as p
	dim config as DynamicLists::Result
	dim configJson as extension::Json
	configInterface = require("listConfigInterface")
	config = configInterface.requestConfig(e)

	if .not. config.isSuccessful() then 
		querySqlWithFilters = config
		end 
	end if

	configJson = config.getInner()

	if configJson.hasProperty("dataSource") = .f. then 
		querySqlWithFilters = DynamicLists::Result.fail("Configuration does not have a datasource.")
		end
	end if 

	dim sortOptions as extension::json
	if e.data("sortOptions") <> "" then 
		sortOptions.setJson(e.sortOptions)
	else 
		sortOptions.setJson("[]")
	end if

	dim qhResult as DynamicLists::Result = DynamicLists::QueryHandler.create(configJson.getProperty("dataSource"))
	if qhResult.isSuccess = .f. then 
		querySqlWithFilters = qhResult
		end
	end if
	dim qh as DynamicLists::QueryHandler = qhResult.data

	dim filters as extension::json
	filters.setJson(e.filters)

	dim queryResult as DynamicLists::Result = qh.select(e, filters, sortOptions)
	if queryResult.isSuccess = .f. then 
		querySqlWithFilters = queryResult
		end
	end if 

	if returnResultSet then 
		querySqlWithFilters = DynamicLists::Result.success(queryResult.data.result)
		end
	end if

	dim rs as sql::ResultSet = queryResult.data.result
	dim count as n = queryResult.data.count

	dim jsonStr as c
	if e.data("pageOptions") <> "" then 
		dim pageOps as p = json_parse(e.pageOptions)
		dim rowStart as n = 1 + (pageOps.pageSize * (pageOps.getPage - 1))
		dim getRows as n = pageOps.pageSize
		jsonStr = rs.toJSON(getRows, rowStart)
	else 
		jsonStr = rs.toJSON()
	end if

	dim json as extension::json 
	dim results as extension::json 
	results.setJson(jsonStr)
	json.setJson("{}")
	json.setProperty("result", results)
	json.setProperty("count", count)

	querySqlWithFilters = DynamicLists::Result.success(json)
end function

' Input: e.toDelete
' Input: e.toUpdate
' Input: e.toInsert
function updateData as DynamicLists::Result (e as p)
	dim configInterface as p
	dim config as DynamicLists::Result
	dim configJson as extension::Json
	configInterface = require("listConfigInterface")
	config = configInterface.requestConfig(e)
	
	if .not. config.isSuccessful() then 
		updateData = config
		end 
	end if

	configJson = config.getInner()

	if configJson.hasProperty("dataSource") = .f. then 
		sqlInsert = DynamicLists::Result.fail("Configuration does not have a datasource.")
	end if 

	dim qhResult as DynamicLists::Result = DynamicLists::QueryHandler.create(configJson.getProperty("dataSource"))
	if qhResult.isSuccess = .f. then 
		sqlInsert = qhResult
	end if
	dim qh as DynamicLists::QueryHandler = qhResult.data

	dim toDelete as extension::json
	if e.data("toDelete") = "" then 
		sqlInsert = DynamicLists::Result.fail("toDelete was not supplied.")
	end if 
	toDelete.setJson(e.toDelete)

	dim toInsert as extension::json
	if e.data("toInsert") = "" then 
		sqlInsert = DynamicLists::Result.fail("toInsert was not supplied.")
	end if 
	toInsert.setJson(e.toInsert)

	dim toUpdate as extension::json
	if e.data("toUpdate") = "" then 
		sqlInsert = DynamicLists::Result.fail("toUpdate was not supplied.")
	end if 
	toUpdate.setJson(e.data("toUpdate"))

	dim res as DynamicLists::Result = qh.insert(e, toInsert)
	res.andThen(qh.delete(e, toDelete))
	res.andThen(qh.update(e, toUpdate))

	updateData = res
end function


function querySqlWithFiltersOld as DynamicLists::Result (e as p, returnResultSet as l = .f.)
	dim configInterface as p
	dim config as DynamicLists::Result
	dim configJson as extension::Json
	configInterface = require("listConfigInterface")
	config = configInterface.requestConfig(e)
	
	if .not. config.isSuccessful() then 
		querySqlWithFiltersOld = config
		end 
	end if
	
	dim pageOptions as a
	dim filters as extension::Json
	
	if e.data("pageOptions") <> "" then 
		pageOptions = json_parse(e.pageOptions)
	else 
		pageOptions = null_value()
	end if 
	
	filters.setJson(e.filters)
	configJson = config.getInner()
	
	if configJson.getProperty("dataSource").hasProperty("filters") then
		dim existingFilters as extension::json 
		existingFilters = configJson.getProperty("dataSource").getProperty("filters")
		for i = 0 to existingFilters.getLength() - 1
			filters.push(existingFilters.getIndexed(i))
		next
	end if
	
	dim ds as p
	dim cnString as c
	ds = configJson.getProperty("dataSource")
	if ds.hasProperty("connectionString") then 
		cnString = ds.getProperty("connectionString")
	else 
		cnString = "conn"
	end if
	
	dim sortOptions as a 
	sortOptions = null_value()
	
	if configJson.getProperty("dataSource").hasProperty("serverSort") then 
		if configJson.getProperty("dataSource").getProperty("serverSort").getLength() > 0 then
			sortOptions = configJson.getProperty("dataSource").getProperty("serverSort")
		end if
	end if
	
	if e.data("sortOptions") <> "" then
		if sortOptions == null_value() then
			sortOptions = new extension::JSON()
			sortOptions.setJson("[]")
		end if
		dim sortOptionsArr as extension::json 
		sortOptionsArr.setJson(e.sortOptions)
		for i = 0 to sortOptionsArr.getLength() - 1
			sortOptions.push(sortOptionsArr.getIndexed(i))
		next
	end if 
	
	' If the config's datasource has the 'table' property, then 
	' we construct the SQL query given information from mappings & filters.
	if configJson.getProperty("dataSource").hasProperty("table") then
		dim columns[0] as a
		for i = 0 to configJson.getProperty("mappings").getLength() - 1
			dim mapping as extension::json 
			mapping = configJson.getProperty("mappings").getIndexed(i)
			
			if mapping.getProperty("tag") = "data" then 
				dim colName as c
				colName = mapping.getProperty("flattenedName")
				dim index as n
				index = columns.append(1)
				columns[index] = colName
			end if
		next
		querySqlWithFiltersOld = getTableData(configJson.getProperty("dataSource").getProperty("table"), columns, pageOptions, sortOptions, filters, e, cnString, ds, returnResultSet)
	else
		dim sql as c 
		sql = configJson.getProperty("dataSource").getProperty("sql")
		querySqlWithFiltersOld = getTableDataFromSql(sql, pageOptions, sortOptions, filters, e, cnString, ds, returnResultSet)
	end if
	
end function

function getTableDataFromSql as DynamicLists::Result (sql as c, pageOptions as a, sortOptions as a, filters as extension::json, e as p, connName as c, dataSource as extension::json, returnResultSet as l = .f.)
	'DIM an Xbasic AlphaDAO connection object
	dim cn as sql::connection
	dim flag as l
	dim args as sql::arguments
	''open the connection object to connect to the Database
	flag = cn_open(cn,"::Name::" + connName)
	
	dim filterStr as c
	dim filterStrRes as DynamicLists::Result
	filterStrRes = buildConstraint(filters, args, cn, e, dataSource)
	
	if .not. filterStrRes.isSuccessful() then 
		getTableDataFromSql = filterStrRes 
		end
	else 
		filterStr = filterStrRes.getInner()
	end if
	
	if len(filterStr) <> 0 then 
		sql = sql + " WHERE " + filterStr
	end if
	
	dim result as DynamicLists::Result
	result = runSqlFetch(cn, sql, args, pageOptions, sortOptions, returnResultSet)
	
	if .not. result.isSuccessful() then 
		getTableDataFromSql = result 
	else 
		if returnResultSet then 
			getTableDataFromSql = DynamicLists::Result.success(result.getInner())
		else
			dim count as n
			count = customSqlCount(sql, args, cn)
			dim data as extension::json 
			data.setJson("{}")
			data.setProperty("result", result.getInner())
			data.setProperty("count", count)
			getTableDataFromSql = DynamicLists::Result.success(data)
		end if
	end if
	
	cn.close()
end function

function getTableData as DynamicLists::Result (tableName as c, columns as p, pageOptions as a, sortOptions as a, filters as extension::json, e as p, connName as c, dataSource as extension::json, returnResultSet as l = .f.)
	dim qhResult as DynamicLists::Result = DynamicLists::QueryHandler.create(dataSource)
	qhResult.data.select(e, filters)

	'DIM an Xbasic AlphaDAO connection object
	dim cn as sql::connection
	dim flag as l
	''open the connection object to connect to the Database
	flag = cn_open(cn,"::Name::" + connName)
	
	if columns.size == 0 then
		dim data as extension::json 
		data.setJson("[]")
		getTableData = DynamicLists::Result.success(data)
		end 
	end if
	
	dim args as sql::arguments
	dim filterStrRes as DynamicLists::Result
	dim filterStr as c
	filterStrRes = buildConstraint(filters, args, cn, e, dataSource)
	if .not. filterStrRes.isSuccessful() then 
		getTableData = filterStrRes 
		end 
	else 
		filterStr = filterStrRes.getInner()
	end if

	dim sql as c
	dim selectPart as c 
	dim fromPart as c
	dim wherePart as c
	dim rowStart as n
	dim getRows as n
	
	selectPart = ""
'	for each col in columns
'		selectPart = selectPart + "[" + col.value + "],"
'	next
	
	if selectPart == "" then 
		selectPart = " * "
	end if
	
	if right(selectPart, 1) == "," then 
		selectPart = substr(selectPart, 1, len(selectPart) - 1)
	end if
	
	fromPart = " [" + tableName + "]"
	
	if len(filterStr) <> 0 then 
		wherePart = " " + filterStr
	else 
		wherePart = " 1 = 1 "
	end if
	
	sql = "SELECT " + selectPart + " FROM " + fromPart + " WHERE " + wherePart
	
	dim data as DynamicLists::Result
	data = runSqlFetch(cn, sql, args, pageOptions, sortOptions, returnResultSet)
	
	if .not. data.isSuccessful() then 
		getTableData = data
		end
	end if 
	
	if returnResultSet then 
		getTableData = DynamicLists::Result.success(data.getInner())
	else
		dim count as n
		count = sql_count(cn, tableName, "*", wherePart, args);
		dim dataObj as extension::json 
		dataObj.setJson("{}")
		dataObj.setProperty("count", count)
		dataObj.setProperty("result", data.getInner())
		getTableData = DynamicLists::Result.success(dataObj)
	end if
	
	cn.close()
	
end function

' pageOptions (or null)
' 	pageSize: int
' 	getPage: int
'
' sortOptions
'	columnName: string
' 	order: "asc" | "desc"
function runSqlFetch as DynamicLists::Result (cn as sql::connection, sql as c, args as sql::Arguments, pageOptions as a, sortOptions as a, returnResultSet as l)

	dim result as DynamicLists::Result
	
	if pageOptions == null_value() then 
		rowStart = 1
		getRows = -1
	else
		rowStart = 1 + (pageOptions.pageSize * (pageOptions.getPage - 1))
		getRows = pageOptions.pageSize
	end if
	
	if sortOptions <> null_value() then
		sql = sql + " ORDER BY "
		for i = 1 to sortOptions.getLength()
			sql = sql + " [" + cn.GenerateNativeColumnName(sortOptions.getIndexed(i - 1).getProperty("columnName")) + "] " + sortOptions.getIndexed(i - 1).getProperty("order") + ","
		next
		sql = substr(sql, 1, len(sql) - 1)
	end if
		
	
	'turn portable SQL on. (for more information on portable sql search in help (https://www.alphasoftware.com/documentation)
	cn.PortableSQLEnabled = .t.
	'execute the SQL - pass in the sql::arguments object
	flag = cn.execute(sql,args)
	if flag = .f. then 
		'an error occurred - get the error message from cn.callresult.text 
		'report the error, close the database and then end the script
		result = DynamicLists::Result.fail(cn.callresult.text)
		runSqlFetch = result
		cn.close()
		end
	end if
	'DIM a SQL::Resultset object
	dim rs as sql::resultset
	rs = cn.resultset
	dim cr as sql::CallResult 
	cr = cn.CallResult
	
	if returnResultSet then 
		runSqlFetch = DynamicLists::Result.success(rs)
	else
		'get the JSON from the query
		dim jsonStr as c 
		jsonStr = rs.toJSON(getRows, rowStart)
		dim json as extension::json
		json.setJson(jsonStr)
		result = DynamicLists::Result.success(json)
		runSqlFetch = result
	end if
end function

function buildConstraint as DynamicLists::Result (filters as extension::json, args as sql::arguments, connection as sql::connection, e as p, dataSource as extension::json)
	dim args as sql::arguments
	dim filterStr as c
	dim argCounter as n
	argCounter = 0
	filterStr = ""
	if filters.getLength() == 0 then 
		filterStr = ""
	else
		dim filter as p
		for i = 0 to filters.getLength() - 1
			filter = filters.getIndexed(i)
			if .not. (filter.hasProperty("op")) .or. (.not. isSafeOp(filter.getProperty("op"))) then
				filter.setProperty("op", "=")
			end if
			
			' Frontend allows using operators ..x, x.., or ..x..
			' This doesn't work with SQL, so we'll want to transform those to LIKE
			' But we want to know what the value *was* so we can add % as necessary
			dim textContainedOp as c
			textContainedOp = ""
			
			if filter.getProperty("op") == "..x" then 
				textContainedOp = "..x"
				filter.setProperty("op", "LIKE")
			else if filter.getProperty("op") == "x.." then 
				textContainedOp = "x.."
				filter.setProperty("op", "LIKE")
			else if filter.getProperty("op") == "..x.." then 
				textContainedOp = "..x.."
				filter.setProperty("op", "LIKE")
			end if
			
			dim connector as c
			connector = ""
			
			if i < filters.getLength() - 1 then
				dim nextFilter as p
				nextFilter = filters.getIndexed(i + 1)
				
				if .not. (nextFilter.hasProperty("connector")) .or. (.not. isSafeConnector(nextFilter.getProperty("connector"))) then 
					connector = "AND"
				else 
					connector = nextFilter.getProperty("connector")
				end if
			end if
			
			if .not. (filter.hasProperty("type")) then
				filter.setProperty("type", "c")
			end if
			filterStr = filterStr + " [" + filter.getProperty("columnName") + "] " + filter.getProperty("op")
			filterStr = filterStr + " :argNum" + argCounter + " " + connector + " "
			
			' User can choose either argument or regular value 
			if filter.getProperty("columnVal").getProperty("tag") == "value" then
				dim argVal as c
				argVal = convert_type(filter.getProperty("columnVal").getProperty("value"), filter.getProperty("type"))
				args.add("argNum" + argCounter, modifyConstraintValue(argVal, textContainedOp))
			else
				dim argName as c = filter.getProperty("columnVal").getProperty("value")
				if e.arguments.argumentNumber(argName) == -1 then 
					buildConstraint = DynamicLists::Result.fail("Argument " + argName + " does not exist")
					end 
				end if 
				dim argVal as c
				argVal = e.arguments.find(argName).data
				argVal = convert_type(argVal, filter.getProperty("type"))
				args.add("argNum" + argCounter, modifyConstraintValue(argVal, textContainedOp))
			end if
			argCounter = argCounter + 1
		next
	end if

	
	if dataSource.hasProperty("forcedValues") then 
		dim forcedValues as extension::json 
		forcedValues = dataSource.getProperty("forcedValues")
		
		for i = 0 to forcedValues.getLength() - 1
			argCounter = argCounter + 1
			if filterStr <> "" then 
				filterStr = "(" + filterStr + ") AND "
			end if 
			
			dim forcedValue as extension::json 
			forcedValue = forcedValues.getIndexed(i)
			
			filterStr = filterStr + "[" + forcedValue.getProperty("column") + "] = "
			
			if forcedValue.getProperty("value").getProperty("tag") = "value" then 
				filterStr = filterStr + ":argNum" + argCounter 
				args.add("argNum" + argCounter, forcedValue.getProperty("value").getProperty("value"))
			else 
				dim argName as c = forcedValue.getProperty("value").getProperty("value")
				if e.arguments.argumentNumber(argName) == -1 then 
					buildConstraint = DynamicLists::Result.fail("Argument " + argName + " does not exist")
					end 
				end if 
				dim argVal as c
				argVal = e.arguments.find(argName).data
				filterStr = filterStr + ":argNum" + argCounter 
				args.add("argNum" + argCounter, argVal)
			end if
		next
	end if
	
	buildConstraint = DynamicLists::Result.success(filterStr)
end function

function modifyConstraintValue as c (value as c, textContainedOp as c)
	if textContainedOp == "..x" then 
		modifyConstraintValue = "%" + value
	else if textContainedOp == "x.." then 
		modifyConstraintValue = value + "%"
	else if textContainedOp == "..x.." then 
		modifyConstraintValue = "%" + value + "%"
	else
		modifyConstraintValue = value
	end if
end function

function isSafeConnector as l (conn as c) 
	isSafeConnector = (conn == "AND" .or. conn == "OR")
end function

function isSafeOp as l (op as c)
	isSafeOp = (op == "=") .or. (op == "<>") .or. (op == "<") .or. (op == "<=") .or. (op == ">") .or. (op == ">=") .or. (op == "LIKE") .or. (op == "..x") .or. (op == "x..") .or. (op == "..x..")
end function 

function getMappingFromMappings as DynamicLists::Result (mappings as extension::json, column as c)
	for i = 0 to mappings.getLength() - 1
		dim m as extension::json 
		m = mappings.getIndexed(i)
		
		if m.getProperty("tag") = "data" then 
			dim colName as c
			colName = m.getProperty("flattenedName")
			
			if colName == column then 
				getMappingFromMappings = DynamicLists::Result.success(m)
				end 
			end if
		end if
	next
	getMappingFromMappings = DynamicLists::Result.fail("Mapping " + column + " was not specified.")
end function

' Input: e.configName
' Input: e.dirty (from 'harvestList') should be a string
' Input: resultsOut output parameter list of results
function updateTableData as v (e as p, resultsOut as p, connName as c)
	dim configInterface as p
	dim config as DynamicLists::Result
	dim configJson as extension::Json
	dim dataSource as extension::json
	configInterface = require("listConfigInterface")
	config = configInterface.requestConfig(e)
	if .not. config.isSuccessful() then 
		resultsOut[] = config 
		end
	else 
		configJson = config.getInner()
		dataSource = configJson.getProperty("dataSource")
	end if
	
	if configJson.getProperty("dataSource").getProperty("type") <> "sql" then 
		resultsOut[] = DynamicLists::Result.fail("Cannot update table data for non-SQL list")
		end 
	end if 
	
	dim isCustomSql as l
	isCustomSql = configJson.getProperty("dataSource").hasProperty("sql")
	
	if isCustomSql then 
		resultsOut[] = DynamicLists::Result.fail("Custom SQL Lists are Read Only")
		end 
	end if
	
	dim schemaInfo as p
	dim info as c
	dim schema as p
	
	dim queryInfo as p 
	
	if .not. isCustomSql then
		queryInfo.tableName = configJson.getProperty("dataSource").getProperty("table")
		
		schemaInfo = require("schemaInfo")
		dim schemaRes as DynamicLists::Result
		schemaRes = schemaInfo.getConnectionSchemaJSON(connName, queryInfo.tableName)
		if schemaRes.isSuccess then 
			info = schemaRes.getInner()
		else 
			end 
		end if
		schema = json_parse(info)
	else 
		queryInfo.sql = configJson.getProperty("dataSource").getProperty("sql")
	end if
	
	dim dirty as p
	dirty = json_parse(e.dirty)

	dim tmpJson as extension::json
	tmpJson.setJson(e.dirty)
	dim qh as DynamicLists::QueryHandler = DynamicLists::QueryHandler.create(dataSource)
	qh.data.insert(e, tmpJson)
	updateTableData = DynamicLists::Result.fail("")
	end
	
	
	'DIM an Xbasic AlphaDAO connection object
	dim cn as sql::connection
	dim flag as l
	''open the connection object to connect to the Database
	flag = cn_open(cn,"::Name::" + connName)
	
	dim mappings as extension::json 
	mappings = configJson.getProperty("mappings")
	
	for each item in dirty
		dim shouldDelete as l
		dim shouldUpdate as l
		dim shouldInsert as l
		
		dim itemJsonStr as c = json_generate(item.value)
		dim itemJson as extension::json 
		itemJson.setJson(itemJsonStr)
		
		if dataSource.hasProperty("forcedValues") then 
			for i = 0 to dataSource.getProperty("forcedValues").getLength() - 1
				dim forcedVal as extension::json = dataSource.getProperty("forcedValues").getIndexed(i)
				dim colName as c = forcedVal.getProperty("column")
				
				if forcedVal.getProperty("value").getProperty("tag") = "value" then 
					itemJson.setProperty(colName, forcedVal.getProperty("value").getProperty("value"))
				else 
					dim argName as c = forcedVal.getProperty("value").getProperty("value")
					if e.arguments.argumentNumber(argName) == -1 then 
						updateTableData = DynamicLists::Result.fail("Argument " + argName + " does not exist")
						end 
					end if 
					dim argVal as c
					argVal = e.arguments.find(argName).data
					itemJson.setProperty(colName, argVal)
				end if
			next
		end if
		
		if itemJson.hasProperty("_isDeleted") then 
			shouldDelete = item.value._isDeleted
		else if itemJson.hasProperty("_isNewRow") then 
			shouldInsert = item.value._isNewRow
		end if
		
		if shouldDelete == .f. .and. shouldInsert == .f. then 
			shouldUpdate = .t.
		end if
		
		if shouldDelete then
			if isCustomSql then
				resultsOut[] = runQueryWithCustomSql(queryInfo.sql, itemJson, cn, "delete", connName, mappings)
			else 
				resultsOut[] = runDeleteQuery(queryInfo, schema, itemJson, cn)
			end if
		else if shouldUpdate then 
			if isCustomSql then 
				resultsOut[] = runQueryWithCustomSql(queryInfo.sql, itemJson, cn, "update", connName, mappings)
			else 
				resultsOut[] = runUpdateQuery(queryInfo, schema, itemJson, cn, mappings)
			end if
		else if shouldInsert then
			if isCustomSql then
				resultsOut[] = runQueryWithCustomSql(queryInfo.sql, itemJson, cn, "insert", connName, mappings)
			else 
				resultsOut[] = runInsertQuery(queryInfo, schema, itemJson, cn)
			end if
		end if
	next item

end function

function runUpdateQuery as DynamicLists::Result (e as p, schema as p, item as extension::json, cn as sql::connection, mappings as extension::json)
	dim updateSql as c
	updateSql = "UPDATE [" + e.tableName + "] SET "
	dim args as sql::arguments
	
	' For each field, add an arg to the pile
	for each column in schema.jsonOutput.column
		if item.hasProperty(column.value.name) == .f. then 
			continue 
		end if
		
		' Skip over adding in the primary key field if it is autogenerated. 
		' If it is autogenerated, specifying it will result in a DB error.
		' We *do* want to add it to the argument list, so that the WHERE clause can be specified. 
		' But we should draw the value from _oldData, in case the user tried to change the primary key.
		if .not. needExplicitPrimaryKey(schema) .and. (column.value.name == schema.primaryKey) then 
			args.set(schema.primaryKey, convert_type(item.getProperty("_oldData").getProperty(schema.primaryKey), column.value.alphaType))
			continue
		else
			' As with the above, we may need read only fields to be specified, but we must set them to _oldData
			dim mappingInfo as DynamicLists::Result
			mappingInfo = getMappingFromMappings(mappings, column.value.name)
			if mappingInfo.isSuccessful() then 
				if mappingInfo.data.hasProperty("readOnly") .and. mappingInfo.data.getProperty("readOnly") == .t. then 
					args.set(column.value.name, convert_type(item.getProperty("_oldData").getProperty(column.value.name), column.value.alphaType))
					continue
				end if
			end if
		end if 
		
		args.set(column.value.name, convert_type(item.getProperty(column.value.name), column.value.alphaType))
		updateSql = updateSql + "[" + column.value.name + "] = :" + column.value.name + ","

	next field
	
	if right(updateSql, 1) == "," then  
		updateSql = substr(updateSql, 1, len(updateSql) - 1)
	end if
	
	' User forgot to put primary ID in their mappings
	if schema.primaryKey <> "" .and. typeof(args.find(schema.primaryKey)) == "V" then 
		runUpdateQuery = DynamicLists::Result.fail("Primary key must be specified in the mappings.")
		end
	end if
	
	updateSql = updateSql + " WHERE [" + schema.primaryKey + "] = :" + schema.primaryKey
	
	'turn portable SQL on.
	cn.PortableSQLEnabled = .t.
	'execute the SQL - pass in the sql::arguments object
	flag = cn.execute(updateSql,args)
	if flag = .f. then 
		'an error occurred - get the error message from cn.callresult.text 
		'report the error, close the database and then end the script
		runUpdateQuery = DynamicLists::Result.fail(cn.callresult.text)
		cn.close()
		end
	end if
	
	runUpdateQuery = DynamicLists::Result.success("")
end function

function runQueryWithCustomSql as DynamicLists::Result (sql as c, item as p, cn as sql::connection, queryType as c, cnString as c, mappings as extension::json)
	dim query as sql::query 
	query.parse(sql)
	dim output as DynamicLists::Result = Result.success("")
	
	dim dependencies as extension::json
	dependencies.setJson("{}")
	
	dim queryTableNames[0] as c
	for each queryTableName in query.selectTableReferences
		queryTableNames[] = queryTableName.value.name
	next field
	
	dim entireSchema as sql::Schema
	cn.GetSchema(entireSchema)
	
	dim orderedTableRefs as p
	orderedTableRefs = entireSchema.TableInDependencyOrder
	
	dim orderedFilteredRefs[0] as c
	for i = 1 to orderedTableRefs.count
		if queryTableNames.find(orderedTableRefs[i].tableName) > 0 then 
			orderedFilteredRefs[] = orderedTableRefs[i].tableName
		end if
	next
	
	if queryType == "delete" then
		reversearray(orderedFilteredRefs)
	end if
	
	cn.BeginTransaction()
	
	for each tableName in orderedFilteredRefs
		dim e as p
		e.tableName = tableName.value
		dim schemaInfo as p
		dim info as c
		dim schema as p
		dim schemaRes as DynamicLists::Result
		schemaInfo = require("schemaInfo")
		
		schemaRes = schemaInfo.getConnectionSchemaJSON(cnString, e.tableName)
		if schemaRes.isSuccessful() then 
			info = schemaRes.getInner()
		else 
			runQueryWithCustomSql = schemaRes
			end
		end if
		
		schema = json_parse(info)
		
		if queryType == "insert" then
			dim itemJson as extension::json
			itemJson.setJson(json_generate(item))
			updateItemCols(cn, tableName, itemJson, dependencies)
			property_from_json(item, itemJson.getJson())
			
			output = runInsertQuery(e, schema, item, cn)
			
			' The next step in this iteration may require data from this newly inserted data. 
			' So, we will add all column info to the map.
			addToDependencies (cn, tableName.value, item, dependencies)
		else if queryType == "update" then 
			output = runUpdateQuery(e, schema, item, cn, mappings)
		else if queryType == "delete" then
			' THis shouldn't be running, since I set complex SQL to be read only.
			' If it ever runs again, I need to pass in data source.
			output = runDeleteQuery(e, schema, item, cn)
		end if
		
		if .not. output.isSuccessful() then 
			' Failure 
			exit for
		end if 
	next
	
	if .not. output.isSuccessful() then 
		' Roll back transaction
		cn.RollBackTransaction()
	end if
	
	cn.CommitTransaction()
	
	runQueryWithCustomSql = output
	
end function

' Loop through all columns that may be dependent on another table. 
' If a dependent column *is* in dependencies and *isn't* already in item, then add it.
function updateItemCols as v (cn as sql::Connection, tableName as c, item as extension::json, dependencies as extension::json)
	dim tableInfo as sql::TableInfo
	cn.GetTableInfo(tableInfo, tableName)
	dim indexes as p
	indexes = tableInfo.index 
	
	for i = 1 to indexes.count
		dim index as p
		index = indexes[i]
		if .not. index.reference then 
			continue 
		end if 
		
		' Table that dependent columns are pointing at 
		dim refTableName as c 
		refTableName = index.referenceTable
		
		for j = 1 to index.column.count 
			dim column as p 
			column = index.column[j]
			
			' If this column was specified, skip
			if item.hasProperty(column.name) then 
				continue
			end if 
			
			' Dependencies structured as table name -> columns
			if dependencies.hasProperty(index.referenceTable) then 
				dim depTbl as extension::json
				depTbl = dependencies.getProperty(index.referenceTable)
				if depTbl.hasProperty(column.referenceName) then
					item.setProperty(column.name, depTbl.getProperty(column.referenceName))
				end if
			end if 
			
		next
		
	next
	
end function

function addToDependencies as v (cn as sql::Connection, tableName as c, arguments as p, dependencies as extension::json)
	dim result as p
	dim id as n
	dim tableInfo as sql::TableInfo
	id = cn.CallResult.lastInsertedIdentity
	cn.GetTableInfo(tableInfo, tableName)
	
	dim innerDeps as extension::json
	innerDeps.setJson("{}")
	
	for i = 1 to tableInfo.column.count
		dim col as p 
		col = tableInfo.column[i]
		dim primary as l 
		primary = tableInfo.ColumnIsInPrimaryKey(i)
		dim specified as l 
		specified = prop_valid(arguments, col.name)
		
		if primary .and. (.not. specified) then 
			innerDeps.setProperty(col.name, id)
		else if specified 
			innerDeps.setProperty(col.name, arguments.data(col.name))
		end if
	next
	
	dependencies.setProperty(tableName, innerDeps)
	
end function

function runInsertQuery as DynamicLists::Result (e as p, schema as p, item as extension::json, cn as sql::connection)
	dim insertSql as c
	insertSql = "INSERT INTO [" + e.tableName + "] ("
	dim args as sql::arguments
	dim valueSql as c
	valueSql = " VALUES ("

	for each column in schema.jsonOutput.column
		if item.hasProperty(column.value.name) == .f. then 
			continue 
		end if
		
		if .not. needExplicitPrimaryKey(schema) .and. (column.value.name == schema.primaryKey) then 
			continue
		end if 
		
		args.set(column.value.name, convert_type(item.getProperty(column.value.name), column.value.alphaType))
		insertSql = insertSql + "[" + column.value.name + "],"
		valueSql = valueSql + ":" + column.value.name + ","

	next field
	
	if right(insertSql, 1) == "," then  
		insertSql = substr(insertSql, 1, len(insertSql) - 1)
	end if
	
	if right(valueSql, 1) == "," then  
		valueSql = substr(valueSql, 1, len(valueSql) - 1)
	end if
	
	insertSql = insertSql + ")"
	valueSql = valueSql + ")"
	
	insertSql = insertSql + valueSql
	
	'turn portable SQL on. (for more information on portable sql search in help (https://www.alphasoftware.com/documentation)
	cn.PortableSQLEnabled = .t.
	'execute the SQL - pass in the sql::arguments object
	flag = cn.execute(insertSql,args)
	if flag = .f. then 
		'an error occurred - get the error message from cn.callresult.text 
		'report the error, close the database and then end the script
		runInsertQuery = DynamicLists::Result.fail(cn.CallResult.text)
		cn.close()
		end
	end if
	runInsertQuery = DynamicLists::Result.success("")
end function

' Return true if column is not autogenerated in any way
function needExplicitPrimaryKey as l (schema as p)
	dim pk as c 
	pk = schema.primaryKey 
	
	for each column in schema.jsonOutput.column
		if column.value.name == pk then
			' We need an explicit key if the column is *not* autogenerated at all
			needExplicitPrimaryKey = .not. (column.value.autoGenerate .or. column.value.autoIncrement)
			end
		end if
	next field
	needExplicitPrimaryKey = .f.
end function

function runDeleteQuery as DynamicLists::Result (e as p, schema as p, item as extension::json, cn as sql::connection)
	dim whereClause as c
	dim args as sql::arguments 
	args.add(schema.primaryKey, item.getProperty(schema.primaryKey))	

	dim deleteSql as c
	deleteSql = "DELETE FROM [" + e.tableName + "] WHERE [" + schema.primaryKey + "] = :" + schema.primaryKey
	
	'turn portable SQL on. (for more information on portable sql search in help (https://www.alphasoftware.com/documentation)
	cn.PortableSQLEnabled = .t.
	'execute the SQL - pass in the sql::arguments object
	flag = cn.execute(deleteSql,args)
	if flag = .f. then 
		'an error occurred - get the error message from cn.callresult.text 
		'report the error, close the database and then end the script
		runDeleteQuery = DynamicLists::Result.fail(cn.CallResult.text)
		cn.close()
		end
	end if
	runDeleteQuery = DynamicLists::Result.success("")
end function

' Given any sql select query with arguments, return number of rows matching the query
function customSqlCount as n (query as c, args as sql::Arguments, cn as sql::Connection)
	dim tmpQuery as sql::Query
	dim realQuery as sql::query
	tmpQuery.Parse("select count(*) from col")
	realQuery.parse(query)
	realQuery.Column.reset()
	realQuery.Column.add(tmpQuery.Column.item(1))

	dim flag as l
	flag = realQuery.Execute(cn, args)
	if .not. flag then 
		customSqlCount = 0
		end 
	else
		customSqlCount = realQuery.ResultSet.data(1)
		end
	end if
end function

' e.configName string
' e.endpoint string
function performFetch as DynamicLists::Result (e as p)
	dim configInterface as p
	dim config as p
	configInterface = require("listConfigInterface")
	config = configInterface.requestConfig(e)
	
	if .not. config.isSuccessful() then 
		performFetch = config 
		end
	end if
	config = config.getInner()

	dim endpoint as extension::json 
	dim endpoints as extension::json 
	
	if config.getProperty("dataSource").hasProperty("endpoints") = .f. then 
		performFetch = DynamicLists::Result.fail("Configuration does not have any endpoints")
		end
	end if 
	endpoints = config.getProperty("dataSource").getProperty("endpoints")
	
	if endpoints.hasProperty(e.endpoint) then 
		endpoint = endpoints.getProperty(e.endpoint)
	else 
		performFetch = DynamicLists::Result.fail("Configuration does not have an endpoint configured for " + e.endpoint)
		end 
	end if 
	
	dim fullUrl as c
	fullUrl = fillEndpointItem(e, endpoint.getProperty("endpoint"))
	
	dim headers as c
	headers = ""
	
	if endpoint.hasProperty("headers") then 
		dim headerObj as extension::JSON
		headerObj = endpoint.getProperty("headers")
		
		for i = 0 to headerObj.getLength() - 1 
			headers = headers + headerObj.nameIndexed(i) + ": "
			headers = headers + fillEndpointItem(e, headerObj.getIndexed(i))
			
			if i < headerObj.getLength() - 1 then 
				headers = headers + crlf()
			end if
		next
	end if 
	
	
	dim settings as p
	settings.method = endpoint.getProperty("method")
	settings.header = headers
	dim splitUrl as p
	splitUrl = a5_split_url(fullUrl)
	settings.host = splitUrl.server
	settings.port = splitUrl.port
	settings.page = splitUrl.path + splitUrl.page
	settings.query_string = splitUrl.query_string
	
	dim fetchRes as p
	fetchRes = http_fetch(settings)
	
	if fetchRes.error_code <> 0 then 
		performFetch = DynamicLists::Result.fail(fetchRes.error_text)
	else 
		dim jsonRes as extension::json 
		jsonRes.setJson(fetchRes.body)
		performFetch = DynamicLists::Result.success(jsonRes)
	end if
	
end function

function fillEndpointItem as c (e as p, item as extension::json)
	if item.getProperty("tag") = "template" then 
		fillEndpointItem = item.getProperty("value")
	else
		dim val as c 
		val = item.getProperty("value")
		fillEndpointItem = e.arguments.find("API_KEY").data
	end if
end function

function doFileUpload as v (fileList as p, configName as c, results as p)
	dim configInterface as p
	dim config as DynamicLists::Result
	dim configJson as extension::Json
	dim configRequestArgs as p
	configRequestArgs.configName = configName
	configInterface = require("listConfigInterface")
	config = configInterface.requestConfig(configRequestArgs)
	
	if .not. config.isSuccessful() then
		doFileUpload = config
		end 
	end if
	
	configJson = config.getInner()
	
	if configJson.getProperty("dataSource").getProperty("type") <> "sql" then 
		doFileUpload = DynamicLists::Result.fail("Cannot upload data to non-SQL List")
		end
	end if
	if configJson.getProperty("dataSource").hasProperty("table") = .f. then 
		downloadExcelTemplate = DynamicLists::Result.fail("Cannot upload data for custom SQL List")
		end
	end if
	
	dim connName as c
	if configJson.getProperty("dataSource").hasProperty("connectionString") then 
		connName = configJson.getProperty("dataSource").getProperty("connectionString")
	else 
		connName = "conn"
	end if
	
	for each file in fileList
		dim fileResult as DynamicLists::Result
		dim fileData as extension::JSON
		if file.file.contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" then 
			fileResult = getExcel2007Data(file)
		else if file.file.contentType = "text/csv" then 
			fileResult = getCSVData(file)
		end if

		if fileResult.isSuccessful() then 
			fileData = fileResult.getInner() 
		else 
			results[] = fileResult 
			continue 
		end if
	
		' setIndexed() doesn't work when trying to update an object element of an array, apparently
		' So we cannot modify in place
		dim newFileData as extension::json 
		newFileData.setJson("[]")
		for i = 0 to fileData.getLength() - 1
			dim row as p
			row = fileData.getIndexed(i)
			row.setProperty("_isNewRow", .t.)
			newFileData.push(row)
		next
		
		dim updateParams as p
		updateParams.configName = configName 
		updateParams.dirty = newFileData.getJson()
		
		updateTableData(updateParams, results, connName)
	next
end function

function getExcel2007Data as DynamicLists::Result (file as p)
	dim obj as Office::ExcelDocument
	dim flag as l
	flag = obj.load(file.tempFileUploadedData)
	
	if .not. flag then
		getExcel2007Data = DynamicLists::Result.fail("Could not load file " + file.fileName)
		end
	end if
	
	dim json as extension::JSON
	json.setJson(obj.toJson())
	
	if json.getLength() = 0 then 
		getExcel2007Data = DynamicLists::Result.fail("No sheets exist in file " + file.fileName)
		end 
	end if 
	
	getExcel2007Data = DynamicLists::Result.success(json.getIndexed(0))
end function

function getCSVData as DynamicLists::Result (file as p)
	dim text as c 
	text = get_from_file(file.tempFileUploadedData)

	dim json as extension::json 
	json.setJson(extension::json::JsonFromCSV(text))
	
	getCSVData = DynamicLists::Result.success(json)
end function

exports.updateData = updateData
exports.performFetch = performFetch
exports.querySqlWithFilters = querySqlWithFilters

