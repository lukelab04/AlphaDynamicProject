'TIP: You can encrypt this file when it is saved, or password protect it, by adding a special comment to the first line of the file (with no leading spaces).
'To encrypt the file, set the comment on the first line to: 'ENCRYPTED
'To password protect the file (which will also encrypt it), set the comment on the first line to: 'PASSWORD:your_password_phrase
'To create a compiled AEX library (when this project is published), add the comment 'COMPILEAEX at the START of a line in the code.

loadClass("Result")

' Input: [e.filters] like {"columnName": name, columnVal: val, connector: 'OR' | 'AND', op: '=', '!=', etc}
' Input: e.configName
' Input: e.pageOptions like {pageSize: n, getPage: n} or nothing
function querySqlWithFilters as {Result} (e as p)
	dim configInterface as p
	dim config as {Result}
	dim configJson as extension::Json
	configInterface = require("listConfigInterface")
	config = configInterface.requestConfig(e)
	
	if .not. config.isSuccessful() then 
		querySqlWithFilters = config
		end 
	end if
	
	dim pageOptions as a
	dim filters as extension::Json
	
	if e.data("pageOptions") <> "" then 
		pageOptions = json_parse(e.pageOptions)
	else 
		pageOptions = null_value()
	end if 
	
	filters.setJson(e.filters)
	
	configJson = config.getInner()
	' If the config's datasource has the 'table' property, then 
	' we construct the SQL query given information from mappings & filters.
	if configJson.getProperty("dataSource").hasProperty("table") then
		dim columns[0] as a
		for i = 0 to configJson.getProperty("mappings").getLength() - 1
			dim index as n
			index = columns.append(1)
			columns[index] = configJson.getProperty("mappings").getIndexed(i).getProperty("columnName")
		next
		querySqlWithFilters = getTableData(configJson.getProperty("dataSource").getProperty("table"), columns, pageOptions, filters, e)
	else
		dim sql as c 
		sql = configJson.getProperty("dataSource").getProperty("sql")
		' Todo make it so that total num of records is populated
		dim existingFilters as extension::json 
		existingFilters = configJson.getProperty("dataSource").getProperty("filters")
		for i = 0 to filters.getLength() - 1
			existingFilters.push(filters.getIndexed(i))
		next
		querySqlWithFilters = getTableDataFromSql(sql, pageOptions, existingFilters, e)
	end if
	
end function

function getTableDataFromSql as {Result} (sql as c, pageOptions as a, filters as extension::json, e as p)
	'DIM an Xbasic AlphaDAO connection object
	dim cn as sql::connection
	dim flag as l
	dim args as sql::arguments
	''open the connection object to connect to the Database
	flag = cn_open(cn,"::Name::conn")
	
	dim filterStr as c
	filterStr = buildConstraint(filters, args, cn, e)
	
	if len(filterStr) <> 0 then 
		sql = sql + " WHERE " + filterStr
	end if
	
	dim result as {Result}
	result = runSqlFetch(cn, sql, args, pageOptions)
	
	if .not. result.isSuccessful() then 
		getTableDataFromSql = result 
	else 
		dim count as n
		count = customSqlCount(sql, args, cn)
		dim data as extension::json 
		data.setJson("{}")
		data.setProperty("result", result.getInner())
		data.setProperty("count", count)
		getTableDataFromSql = Result.success(data)
	end if
	
	'Clean up by freeing the resultset and then closing the database
	cn.freeresult()
	cn.close()
end function

function getTableData as {Result} (tableName as c, columns as p, pageOptions as a, filters as extension::json, e as p)
	'DIM an Xbasic AlphaDAO connection object
	dim cn as sql::connection
	dim flag as l
	''open the connection object to connect to the Database
	flag = cn_open(cn,"::Name::conn")
	
	if columns.size == 0 then
		dim data as extension::json 
		data.setJson("[]")
		getTableData = Result.success(data)
		end 
	end if
	
	dim args as sql::arguments
	dim filterStr as c
	filterStr = buildConstraint(filters, args, cn, e)
	

	dim sql as c
	dim selectPart as c 
	dim fromPart as c
	dim wherePart as c
	dim rowStart as n
	dim getRows as n
	
	selectPart = ""
	for each col in columns
		selectPart = selectPart + "[" + col.value + "],"
	next
	
	if selectPart == "" then 
		selectPart = " * "
	end if
	
	if right(selectPart, 1) == "," then 
		selectPart = substr(selectPart, 1, len(selectPart) - 1)
	end if
	
	fromPart = " [" + tableName + "]"
	
	if len(filterStr) <> 0 then 
		wherePart = " " + filterStr
	else 
		wherePart = " 1 = 1 "
	end if
	
	sql = "SELECT " + selectPart + " FROM " + fromPart + " WHERE " + wherePart
	
	dim data as {Result}
	data = runSqlFetch(cn, sql, args, pageOptions)
	
	if .not. data.isSuccessful() then 
		getTableData = data
		end
	end if 
	
	dim count as n
	count = sql_count(cn, tableName, "*", wherePart, args);
	dim dataObj as extension::json 
	dataObj.setJson("{}")
	dataObj.setProperty("count", count)
	dataObj.setProperty("result", data.getInner())
	getTableData = Result.success(dataObj)
	
	'Clean up by freeing the resultset and then closing the database
	cn.freeresult()
	cn.close()
	
end function


function runSqlFetch as {Result} (cn as sql::connection, sql as c, args as sql::Arguments, pageOptions as a)
	dim result as {Result}
	
	if pageOptions == null_value() then 
		rowStart = 1
		getRows = -1
	else
		rowStart = 1 + (pageOptions.pageSize * (pageOptions.getPage - 1))
		getRows = pageOptions.pageSize
	end if
	
	'turn portable SQL on. (for more information on portable sql search in help (https://www.alphasoftware.com/documentation)
	cn.PortableSQLEnabled = .t.
	'execute the SQL - pass in the sql::arguments object
	flag = cn.execute(sql,args)
	if flag = .f. then 
		'an error occurred - get the error message from cn.callresult.text 
		'report the error, close the database and then end the script
		result = Result.fail(cn.callresult.text)
		runSqlFetch = result
		cn.close()
		end
	end if
	'DIM a SQL::Resultset object
	dim rs as sql::resultset
	rs = cn.resultset
	dim cr as sql::CallResult 
	cr = cn.CallResult
	
	'get the JSON from the query
	dim jsonStr as c 
	jsonStr = rs.toJSON(getRows, rowStart)
	dim json as extension::json
	json.setJson(jsonStr)
	result = Result.success(json)
	runSqlFetch = result
end function

function buildConstraint(filters as extension::json, args as sql::arguments, connection as sql::connection, e as p) as c	
	dim args as sql::arguments
	dim filterStr as c
	filterStr = ""
	if filters.getLength() == 0 then 
		filterStr = "";
	else
		dim argCounter as n
		dim filter as p
		argCounter = 0
		for i = 0 to filters.getLength() - 1
			filter = filters.getIndexed(i)
			if .not. (filter.hasProperty("op")) .or. (.not. isSafeOp(filter.getProperty("op"))) then 
				filter.setProperty("op", "=")
			end if 
			
			if .not. (filter.hasProperty("connector")) .or. (.not. isSafeConnector(filter.getProperty("connector"))) then 
				filter.setProperty("connector", "AND")
			end if
			
			if .not. (filter.hasProperty("type")) then 
				filter.setProperty("type", "c")
			end if
			filterStr = filterStr + "[" + connection.generateNativeColumnName(filter.getProperty("columnName")) + "] " + filter.getProperty("op")
			filterStr = filterStr + " :argNum" + argCounter + " " + filter.getProperty("connector") + " "
			
			' User can choose either argument or regular value 
			if filter.getProperty("columnVal").getProperty("tag") == "value" then
				args.add("argNum" + argCounter, convert_type(filter.getProperty("columnVal").getProperty("value"), filter.getProperty("type")))
			else
				dim argVal as c 
				argVal = e.arguments.find(filter.getProperty("columnVal").getProperty("value")).data
				args.add("argNum" + argCounter, convert_type(argVal, filter.getProperty("type")))
			end if
			argCounter = argCounter + 1
		next
	end if
	
	if len(filterStr) != 0 then
		' Get rid of AND or OR
		filterStr = substr(filterStr, 1, len(filterStr) - 4)
	end if
	buildConstraint = filterStr
end function

function isSafeConnector as l (conn as c) 
	isSafeConnector = (conn == "AND" .or. conn == "OR")
end function

function isSafeOp as l (op as c)
	isSafeOp = (op == "=") .or. (op == "<>") .or. (op == "<") .or. (op == "<=") .or. (op == ">") .or. (op == ">=") .or. (op == "LIKE")
end function 

' Input: Table Name OR customSql
' Input: dirty (from 'harvestList')
' Input: resultsOut output parameter list of results
function updateTableData as v (e as p, resultsOut as p)
	dim isCustomSql as l
	isCustomSql = prop_valid(e, "customSql")
	
	dim schemaInfo as p
	dim info as c
	dim schema as p
	
	if .not. isCustomSql then 
		schemaInfo = require("schemaInfo")
		info = schemaInfo.getConnectionSchemaJSON("conn", e.tableName)
		schema = json_parse(info)
	end if
	
	dim dirty as p
	dirty = json_parse(e.dirty)
	
	'DIM an Xbasic AlphaDAO connection object
	dim cn as sql::connection
	dim flag as l
	''open the connection object to connect to the Database
	flag = cn_open(cn,"::Name::conn")
	
	for each item in dirty
		
		dim shouldDelete as l
		dim shouldUpdate as l
		dim shouldInsert as l
		
		if prop_valid(item.value, "_isDeleted") then 
			shouldDelete = item.value._isDeleted
		else if prop_valid(item.value, "_isNewRow") then 
			shouldInsert = item.value._isNewRow
		end if 
		
		if shouldDelete == .f. .and. shouldInsert == .f. then 
			shouldUpdate = .t.
		end if
		
		
		if shouldDelete then
			if isCustomSql then
				resultsOut[] = runQueryWithCustomSql(e.customSql, item, cn, "delete")
			else 
				resultsOut[] = runDeleteQuery(e, schema, item, cn)
			end if
		else if shouldUpdate then 
			if isCustomSql then 
				resultsOut[] = runQueryWithCustomSql(e.customSql, item, cn, "update")
			else 
				resultsOut[] = runUpdateQuery(e, schema, item, cn)
			end if
		else if shouldInsert then
			if isCustomSql then
				resultsOut[] = runQueryWithCustomSql(e.customSql, item, cn, "insert")
			else 
				resultsOut[] = runInsertQuery(e, schema, item, cn)
			end if
		end if
	next item

end function

function runUpdateQuery as {Result} (e as p, schema as p, item as p, cn as sql::connection)
	dim updateSql as c
	updateSql = "UPDATE [" + e.tableName + "] SET "
	dim args as sql::arguments
	
	' For each field, add an arg to the pile
	for each column in schema.jsonOutput.column
		if prop_valid(item.value, column.value.name) == .f. then 
			continue 
		end if
		
		' Skip over adding in the primary key field if it is autogenerated. 
		' If it is autogenerated, specifying it will result in a DB error.
		' We *do* want to add it to the argument list, so that the WHERE clause can be specified. 
		' But we should draw the value from _oldData, in case the user tried to change the primary key.
		if .not. needExplicitPrimaryKey(schema) .and. (column.value.name == schema.primaryKey) then 
			args.set(schema.primaryKey, convert_type(item.value._oldData.data(schema.primaryKey), column.value.alphaType))
			continue
		end if 
		
		args.set(column.value.name, convert_type(item.value.data(column.value.name), column.value.alphaType))
		updateSql = updateSql + "[" + column.value.name + "] = :" + column.value.name + ","

	next field
	
	if right(updateSql, 1) == "," then  
		updateSql = substr(updateSql, 1, len(updateSql) - 1)
	end if
	
	updateSql = updateSql + " WHERE [" + schema.primaryKey + "] = :" + schema.primaryKey
	
	'turn portable SQL on. (for more information on portable sql search in help (https://www.alphasoftware.com/documentation)
	cn.PortableSQLEnabled = .t.
	'execute the SQL - pass in the sql::arguments object
	flag = cn.execute(updateSql,args)
	if flag = .f. then 
		'an error occurred - get the error message from cn.callresult.text 
		'report the error, close the database and then end the script
		runUpdateQuery = Result.fail(cn.callresult.text)
		cn.close()
		end
	end if
	
	runUpdateQuery = Result.success("")
end function

function runQueryWithCustomSql as {Result} (sql as c, item as p, cn as sql::connection, queryType as c)
	dim query as sql::query 
	query.parse(sql)
	dim output as {Result} = Result.success("")
	
	dim dependencies as extension::json
	dependencies.setJson("{}")
	
	dim queryTableNames[0] as c
	for each queryTableName in query.selectTableReferences
		queryTableNames[] = queryTableName.value.name
	next field
	
	dim entireSchema as sql::Schema
	cn.GetSchema(entireSchema)
	
	dim orderedTableRefs as p
	orderedTableRefs = entireSchema.TableInDependencyOrder
	
	dim orderedFilteredRefs[0] as c
	for i = 1 to orderedTableRefs.count
		if queryTableNames.find(orderedTableRefs[i].tableName) > 0 then 
			orderedFilteredRefs[] = orderedTableRefs[i].tableName
		end if
	next
	
	if queryType == "delete" then
		reversearray(orderedFilteredRefs)
	end if
	
	cn.BeginTransaction()
	
	for each tableName in orderedFilteredRefs
		dim e as p
		e.tableName = tableName.value
		dim schemaInfo as p
		dim info as c
		dim schema as p
		schemaInfo = require("schemaInfo")
		info = schemaInfo.getConnectionSchemaJSON("conn", e.tableName)
		schema = json_parse(info)
		
		if queryType == "insert" then
			dim itemJson as extension::json
			itemJson.setJson(json_generate(item))
			updateItemCols(cn, tableName, itemJson, dependencies)
			property_from_json(item, itemJson.getJson())
			
			output = runInsertQuery(e, schema, item, cn)
			
			' The next step in this iteration may require data from this newly inserted data. 
			' So, we will add all column info to the map.
			addToDependencies (cn, tableName.value, item, dependencies)
		else if queryType == "update" then 
			output = runUpdateQuery(e, schema, item, cn)
		else if queryType == "delete" then 
			output = runDeleteQuery(e, schema, item, cn)
		end if
		
		if .not. output.isSuccessful() then 
			' Failure 
			exit for
		end if 
	next
	
	if .not. output.isSuccessful() then 
		' Roll back transaction
		cn.RollBackTransaction()
	end if
	
	cn.CommitTransaction()
	
	runQueryWithCustomSql = output
	
end function

' Loop through all columns that may be dependent on another table. 
' If a dependent column *is* in dependencies and *isn't* already in item, then add it.
function updateItemCols as v (cn as sql::Connection, tableName as c, item as extension::json, dependencies as extension::json)
	dim tableInfo as sql::TableInfo
	cn.GetTableInfo(tableInfo, tableName)
	dim indexes as p
	indexes = tableInfo.index 
	
	for i = 1 to indexes.count
		dim index as p
		index = indexes[i]
		if .not. index.reference then 
			continue 
		end if 
		
		' Table that dependent columns are pointing at 
		dim refTableName as c 
		refTableName = index.referenceTable
		
		for j = 1 to index.column.count 
			dim column as p 
			column = index.column[j]
			
			' If this column was specified, skip
			if item.hasProperty(column.name) then 
				continue
			end if 
			
			' Dependencies structured as table name -> columns
			if dependencies.hasProperty(index.referenceTable) then 
				dim depTbl as extension::json
				depTbl = dependencies.getProperty(index.referenceTable)
				if depTbl.hasProperty(column.referenceName) then
					item.setProperty(column.name, depTbl.getProperty(column.referenceName))
				end if
			end if 
			
		next
		
	next
	
end function

function addToDependencies as v (cn as sql::Connection, tableName as c, arguments as p, dependencies as extension::json)
	dim result as p
	dim id as n
	dim tableInfo as sql::TableInfo
	id = cn.CallResult.lastInsertedIdentity
	cn.GetTableInfo(tableInfo, tableName)
	
	dim innerDeps as extension::json
	innerDeps.setJson("{}")
	
	for i = 1 to tableInfo.column.count
		dim col as p 
		col = tableInfo.column[i]
		dim primary as l 
		primary = tableInfo.ColumnIsInPrimaryKey(i)
		dim specified as l 
		specified = prop_valid(arguments, col.name)
		
		if primary .and. (.not. specified) then 
			innerDeps.setProperty(col.name, id)
		else if specified 
			innerDeps.setProperty(col.name, arguments.data(col.name))
		end if
	next
	
	dependencies.setProperty(tableName, innerDeps)
	
end function

function runInsertQuery as {Result} (e as p, schema as p, item as p, cn as sql::connection)
	dim insertSql as c
	insertSql = "INSERT INTO [" + e.tableName + "] ("
	dim args as sql::arguments
	dim valueSql as c
	valueSql = " VALUES ("
	
	for each column in schema.jsonOutput.column
		if prop_valid(item.value, column.value.name) == .f. then 
			continue 
		end if
		
		if .not. needExplicitPrimaryKey(schema) .and. (column.value.name == schema.primaryKey) then 
			continue
		end if 
		
		args.set(column.value.name, convert_type(item.value.data(column.value.name), column.value.alphaType))
		insertSql = insertSql + "[" + column.value.name + "],"
		valueSql = valueSql + ":" + column.value.name + ","

	next field
	
	if right(insertSql, 1) == "," then  
		insertSql = substr(insertSql, 1, len(insertSql) - 1)
	end if
	
	if right(valueSql, 1) == "," then  
		valueSql = substr(valueSql, 1, len(valueSql) - 1)
	end if
	
	insertSql = insertSql + ")"
	valueSql = valueSql + ")"
	
	insertSql = insertSql + valueSql
	
	'turn portable SQL on. (for more information on portable sql search in help (https://www.alphasoftware.com/documentation)
	cn.PortableSQLEnabled = .t.
	'execute the SQL - pass in the sql::arguments object
	flag = cn.execute(insertSql,args)
	if flag = .f. then 
		'an error occurred - get the error message from cn.callresult.text 
		'report the error, close the database and then end the script
		runInsertQuery = Result.fail(cn.CallResult.text)
		cn.close()
		end
	end if
	runInsertQuery = Result.success("")
end function

' Return true if column is not autogenerated in any way
function needExplicitPrimaryKey as l (schema as p)
	dim pk as c 
	pk = schema.primaryKey 
	
	for each column in schema.jsonOutput.column
		if column.value.name == pk then
			' We need an explicit key if the column is *not* autogenerated at all
			needExplicitPrimaryKey = .not. (column.value.autoGenerate .or. column.value.autoIncrement)
			end
		end if
	next field
	needExplicitPrimaryKey = .f.
end function

function runDeleteQuery as {Result} (e as p, schema as p, item as p, cn as sql::connection)
	dim deleteSql as c
	deleteSql = "DELETE FROM [" + e.tableName + "] WHERE [" + schema.primaryKey + "] = :" + schema.primaryKey
	
	dim args as sql::arguments 
	args.add(schema.primaryKey, item.value.data(schema.primaryKey))
	
	'turn portable SQL on. (for more information on portable sql search in help (https://www.alphasoftware.com/documentation)
	cn.PortableSQLEnabled = .t.
	'execute the SQL - pass in the sql::arguments object
	flag = cn.execute(deleteSql,args)
	if flag = .f. then 
		'an error occurred - get the error message from cn.callresult.text 
		'report the error, close the database and then end the script
		runDeleteQuery = Result.fail(cn.CallResult.text)
		cn.close()
		end
	end if
	runDeleteQuery = Result.success("")
end function

' Given any sql select query with arguments, return number of rows matching the query
function customSqlCount as n (query as c, args as sql::Arguments, cn as sql::Connection)
	dim tmpQuery as sql::Query
	dim realQuery as sql::query
	tmpQuery.Parse("select count(*) from col")
	realQuery.parse(query)
	realQuery.Column.reset()
	realQuery.Column.add(tmpQuery.Column.item(1))

	dim flag as l
	flag = realQuery.Execute(cn, args)
	if .not. flag then 
		customSqlCount = 0
		end 
	else
		customSqlCount = realQuery.ResultSet.data(1)
		end
	end if
end function

' e.options: (headers? pointer variable, body? string)
' e.url: url
' e.method? method
function performFetch as c (e as p)
	dim settings as p
	dim settings.method as c
	dim settings.host as c
	dim options as p
	dim urlData as p
	
	if e.options <> "undefined" then
		options = json_parse(e.options)
	else 
		options = json_parse("{}")
	end if
	
	urlData = a5_split_url(e.url)
	settings.host = urlData.server

	dim settings.page as c
	settings.page = urlData.path + urlData.page
	
	if urlData.query_string <> "" then 
		dim settings.query_string as c 
		settings.query_string = urlData.query_string
	end if
	
	
	if prop_valid(options, "method") then 
		settings.method = options.method
	else 
		settings.method = "GET"
	end if 
	
	dim apiKeys as p
	dim keysFilePath as c
	keysFilePath = "./apiKeys.json"
	apiKeys = json_parse(FILE.to_string(keysFilePath))
	
	if prop_valid(options, "headers") then
		dim settings.header as c
		settings.header = ""
		for each property in properties_enum(options.headers)
			dim val as c
			val = options.headers.data(property.value)
			if substr(val, 1, 7) == "__KEY__" then 
				val = apiKeys.data(substr(val, 8))
			end if
			
			settings.header = settings.header + property.value + ": " + val
		next
	end if
	
	if prop_valid(options, "body") then 
		dim settings.body as c
		settings.body = options.body
	end if
	
	dim result as P
	performFetch = json_generate(http_fetch(settings))
	
end function

exports.getTableData = getTableData
exports.updateTableData = updateTableData
exports.performFetch = performFetch
exports.querySqlWithFilters = querySqlWithFilters

