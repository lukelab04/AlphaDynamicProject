'TIP: You can encrypt this file when it is saved, or password protect it, by adding a special comment to the first line of the file (with no leading spaces).
'To encrypt the file, set the comment on the first line to: 'ENCRYPTED
'To password protect the file (which will also encrypt it), set the comment on the first line to: 'PASSWORD:your_password_phrase
'To create a compiled AEX library (when this project is published), add the comment 'COMPILEAEX at the START of a line in the code.

exports.requestConfig = requestConfig
exports.saveConfig = saveConfig
exports.batchFetch = batchFetch

loadClass("Result")

' Input: e.configName (string)
' Input: e.filters (filter array)
' Output: Result(ok: {data array, schema (if schema can be fetched), isAdmin (bool), config)
function batchFetch as Result (e as p)
	dim resultObj as extension::json 
	resultObj.setJson("{}")
	
	dim config as p
	config = requestConfig(e)
	if .not. config.isSuccessful()
		batchFetch = config 
		end 
	end if 
	config = config.getInner()
	resultObj.setProperty("config", config)
	
	dim admin as l
	dim username as c = context.security.currentuser
	if .not. context.security.callresult.success then 
		username = ""
	end if

	' Ensure user is logged in
	if username == "" then 
		admin = .f.
	end if
	
	dim has_permissions as L = context.security.isUserInRole(username, "ADMINISTRATOR")
	if (.not. context.security.callresult.success) .or. (.not. has_permissions) then 
		admin = .f.
	else 
		admin = .t.
	end if
	resultObj.setProperty("isAdmin", admin)
	
	dim schemaInfo as p 
	schemaInfo = require("schemaInfo")
	dim standardQueries as p 
	standardQueries = require("standardQueries")
	dim ds as extension::json 
	ds = config.getProperty("dataSource")
	
	dim connectionString as c 
	if ds.hasProperty("connectionString") then 
		connectionString = ds.getProperty("connectionString")
	else 
		connectionString = "conn"
	end if
	
	dim data as p
	
	if ds.hasProperty("table") then
		dim schema as c
		dim schemaRes as Result
		schemaRes = schemaInfo.getConnectionSchemaJSON(connectionString, ds.getProperty("table"))
		if schemaRes.isSuccessful() then 
			schema = schemaRes.getInner()
		else 
			batchFetch = schemaRes 
			end 
		end if
		
		dim schemaJson as extension::json 
		schemaJson.setJson(schema)
		resultObj.setProperty("schema", schemaJson)
	end if
	
	if ds.getProperty("type") == "sql" then
		if config.getProperty("dataSource").hasProperty("paginate") then
			dim pageOpts as extension::json 
			pageOpts.setJson("{}")
			pageOpts.setProperty("pageSize", config.getProperty("dataSource").getProperty("paginate").getProperty("pageSize"))
			pageOpts.setProperty("getPage", 0)
			e.pageOptions = pageOpts.getJson()
		end if 
		data = standardQueries.querySqlWithFilters(e)
		if .not. data.isSuccessful() then 
			batchFetch = data 
			end
		end if 
		resultObj.setProperty("data", data.getInner())
	else if ds.hasProperty("static") then 
		resultObj.setProperty("data", ds.getProperty("static"))
	end if
	
	batchFetch = Result.success(resultObj)
	
end function

' Input: e.configName (string)
' Output: {ok : JSON configuration} or {err: Error Message }

function requestConfig as Result (e as p)
	dim username as c = context.security.currentuser
	
	if .not. context.security.callresult.success then 
		username = ""
	end if
	
	'DIM a SQL arguments object
	dim args as sql::arguments
	args.add("username", username)
	
	if e.data("configName") == "" then 
		requestConfig = Result.fail("property configName cannot be empty")
		end 
	else 
		args.add("listname", e.configName)
	end if 
	
	dim userSql as c
	dim globalSql as c
	userSql = "SELECT CONFIG FROM alpha_anywhere_dynamic_list_settings  WHERE USER_NAME = :username AND CONFIG_NAME = :listname AND GLOBAL = .f."
	globalSql = "SELECT CONFIG FROM alpha_anywhere_dynamic_list_settings WHERE CONFIG_NAME = :listname AND GLOBAL = .t."
	
	dim userMappings as Result
	dim globalConfig as p
	userMappings = fetchFromDb(userSql, args, "conn")
	globalConfig = fetchFromDb(globalSql, args, "conn")
	
	if .not. globalConfig.isSuccessful() then 
		requestConfig = globalConfig
		end
	end if 
	
	if globalConfig.getInner().getJson() == "" then 
		requestConfig = Result.fail("config does not exist")
		end 
	end if
	
	globalConfig = globalConfig.getInner()
	
	if userMappings.isSuccessful() .and. userMappings.getInner().getJson() <> "" then 
		globalConfig.setProperty("mappings", userMappings.getInner())
	end if
	
	requestConfig = Result.success(globalConfig)
end function

' Take SQL and Args, query database, return as JSON object
' Returns { ok: Obj } or { err: errMsg }
function fetchFromDb as Result (sql as c, args as sql::arguments, connectionString as c)
	'DIM an Xbasic AlphaDAO connection object
	dim cn as sql::connection
	dim flag as l
	''open the connection object to connect to the Database
	flag = cn_open(cn,"::Name::" + connectionString)
	'turn portable SQL on. (for more information on portable sql search in help (https://www.alphasoftware.com/documentation)
	cn.PortableSQLEnabled = .t.
	'execute the SQL - pass in the sql::arguments object
	flag = cn.execute(sql,args)
	if flag = .f. then 
		'an error occurred - get the error message from cn.callresult.text 
		'report the error, close the database and then end the script
		dim errortext as c 
		fetchFromDb = Result.fail(cn.callResult.text)
		cn.close()
		end
	end if
	'DIM a SQL::Resultset object
	dim rs as sql::resultset
	rs = cn.resultset
	'get the JSON from the query
	dim json as extension::json
	json.setJson(rs.tostring())
	fetchFromDb = Result.success(json)
	
	'Clean up by freeing the resultset and then closing the database
	cn.freeresult()
	cn.close()
end function

' Input: e.global -- Flag to save as global (will fail, depending on user)
' Input: e.configName -- Name to save the config under
' Input: e.payload
' 	If global is true, then this is the entire configuration 
' 	If global is false, then this is just the mapping portion of the config
function saveConfig as Result (e as p) 
	debug(1)
	if e.data("global") == "" then 
		saveConfig = Result.fail("Field 'global' is required")
		end 
	else if e.data("configName") == "" then 
		saveConfig = Result.fail("Field 'configName' is required")
		end 
	else if e.data("payload") == "" then 
		saveConfig = Result.fail("Field 'payload' is required")
		end 
	end if
	
	dim saveGlobal as L
	if e.global == "true" then 
		saveGlobal = .t.
	else 
		saveGlobal = .f.
	end if
	
	dim username as c = context.security.currentuser
	if .not. context.security.callresult.success then 
		username = ""
	end if

	' Ensure user is logged in
	if username == "" then 
		saveConfig = Result.fail("User is not logged in")
		end 
	end if
	
	dim has_permissions as L = context.security.isUserInRole(username, "ADMINISTRATOR")
	' User is trying to save globally, but isn't an admin?
	if ((.not. context.security.callresult.success) .or. (.not. has_permissions)) .and. saveGlobal then 
		saveConfig = Result.fail("User does not have permissions to save globally.")
		end 
	end if
	
	'DIM a SQL arguments object
	dim args as sql::arguments
	args.add("listname", e.configName)
	args.add("username", username)
	args.add("global", saveGlobal)
	
	dim sql as c
	dim already_exists as l = config_exists(username, saveGlobal, e.configName)
	
	'DIM an Xbasic AlphaDAO connection object
	dim cn as sql::connection
	dim flag as l
	''open the connection object to connect to the Database
	flag = cn_open(cn,"::Name::conn")
	
	'turn portable SQL on. (for more information on portable sql search in help (https://www.alphasoftware.com/documentation)
	cn.PortableSQLEnabled = .t.
	cn.ReportNotFoundAsWarning = .t.
	
	dim userSuppliedConfig as extension::json 
	dim globalConfig as a
	dim maybeGlobalConfig as Result
	userSuppliedConfig.setJson(e.payload)
	maybeGlobalConfig = requestConfig(e)
	
	if maybeGlobalConfig.isSuccessful() then 
		globalConfig = maybeGlobalConfig.data
	else 
		globalConfig = null_value()
	end if
	
	if already_exists then
		if saveGlobal then
			args.add("config", e.payload)
			flag = cn.execute("UPDATE alpha_anywhere_dynamic_list_settings SET CONFIG = :config WHERE CONFIG_NAME = :listname AND GLOBAL = .t.", args)
		else
			' saveGlobal false, so not admin
			userSuppliedConfig = screenUserConfig(userSuppliedConfig, globalConfig)
			args.add("config", userSuppliedConfig.getJson())
			flag = cn.execute("UPDATE alpha_anywhere_dynamic_list_settings SET CONFIG = :config WHERE CONFIG_NAME = :listname AND GLOBAL = .f. AND USER_NAME = :username", args)
		end if
	else 
		if saveGlobal then
			args.add("config", e.payload)
			flag = cn.execute("INSERT INTO alpha_anywhere_dynamic_list_settings (CONFIG, CONFIG_NAME, GLOBAL, USER_NAME) VALUES (:config, :listname, :global, NULL)", args)
		else 
			' saveGlobal false, so not admin
			userSuppliedConfig = screenUserConfig(userSuppliedConfig, globalConfig)
			dim exists_globally as l = config_exists("", .t., e.configName)
			if .not. exists_globally then 
				saveConfig = Result.fail("Cannot save user config when no corresponding global config exists").toJson().getJson()
			end if
			args.add("config", userSuppliedConfig.getJson())
			flag = cn.execute("INSERT INTO alpha_anywhere_dynamic_list_settings (CONFIG, CONFIG_NAME, GLOBAL, USER_NAME) VALUES (:config, :listname, :global, :username)", args)
		end if 
	end if
	
	if flag = .f. then 
		'an error occurred - get the error message from cn.callresult.text 
		'report the error, close the database and then end the script
		saveConfig = Result.fail(cn.callresult.text).toJson().getJson()
		cn.close()
		end
	end if
	
	saveConfig = Result.success("")
	cn.close()
	
end function

' Call only if the user is not an administrator
' userConfig should be just the Mapping portion of the config, supplied by the front end
' savedConfig should be the entire config from the DB OR a null value (this function will choose defaults)
' Function ensures user has not changed admin only options (like readonly) and returns a screened JSON object
function screenUserConfig as p (userConfig as p, savedConfig as a) 
	dim officialMappings as extension::json 
	officialMappings = savedConfig.getProperty("mappings")
	
	if officialMappings <> null_value() .and. officialMappings.hasProperty("readOnly") then 
		userConfig.setProperty("readOnly", officialMappings.getProperty("readOnly"))
	else
		userConfig.setProperty("readOnly", .f.)
	end if
	
	screenUserConfig = userConfig
end function


function config_exists as l (username as c, global as l, configName as c)
	'DIM a SQL arguments object
	dim args as sql::arguments
	args.add("listname", configName)
	args.add("username", username)
	
	'DIM an Xbasic AlphaDAO connection object
	dim cn as sql::connection
	dim flag as l
	''open the connection object to connect to the Database
	flag = cn_open(cn,"::Name::conn")
	
	
	dim sql as c
	
	if global then 
		sql = "SELECT CONFIG FROM alpha_anywhere_dynamic_list_settings WHERE CONFIG_NAME = :listname AND GLOBAL = .t."
	else 
		sql = "SELECT CONFIG FROM alpha_anywhere_dynamic_list_settings WHERE CONFIG_NAME = :listname AND USER_NAME = :username AND GLOBAL = .f."
	end if
	
	
	'turn portable SQL on. (for more information on portable sql search in help (https://www.alphasoftware.com/documentation)
	cn.PortableSQLEnabled = .t.
	'execute the SQL - pass in the sql::arguments object
	flag = cn.execute(sql,args)
	if flag = .f. then 
		'an error occurred - get the error message from cn.callresult.text 
		'report the error, close the database and then end the script
		dim errortext as c 
		errortext = js_escape(cn.callresult.text)
		config_exists = .f.
		cn.close()
		end
	end if
	'DIM a SQL::Resultset object
	dim rs as sql::resultset
	rs = cn.resultset
	'get the JSON from the query
	dim json as c 
	
	if rs.tostring() == "" then
		config_exists = .f.
	else
		config_exists = .t.
	end if
	
	'Clean up by freeing the resultset and then closing the database
	cn.freeresult()
	cn.close()	
end function


	
