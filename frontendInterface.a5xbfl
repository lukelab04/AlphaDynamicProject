
function handle_template_download as c (e as p)
	e.ajaxCallBackType = "FileDownload"
	e.Action = "Display Message"
	e.downloadMethod = "direct"

	dim result as DynamicLists::Result
	dim stateInfo as p
	stateInfo = json_parse(e._stateInfoJSON)
	
	dim fileInteractor as DynamicLists::Result
	fileInteractor = DynamicLists::FileInteraction.create(stateInfo.configName)
	
	if fileInteractor.isSuccess = .f. then
		e.message = result.getInner()
		handle_template_download = ""
		end 
	end if 
	
	result = fileInteractor.getInner().createExcelTemplate()
	
	if result.isSuccessful() then 
		e.fileToDownload = result.getInner()
		e.CSFilename = stateInfo.configName + " Template"
		handle_template_download = result.getInner()
	else 
		e.Message = result.getInner()
		handle_template_download = ""
	end if
end function

function handle_file_download as c (e as p)
	e.ajaxCallBackType = "FileDownload"
	e.Action = "Display Message"
	e.downloadMethod = "direct"
	dim stateInfo as p
	stateInfo = json_parse(e._stateInfoJSON)
	
	dim fileInteractor as DynamicLists::Result = DynamicLists::FileInteraction.create(stateInfo.configName)
	if fileInteractor.isSuccessful() = .f. then 
		e.message = fileInteractor.getInner()
		handle_file_download = ""
		end 
	end if 
	
	dim result as DynamicLists::Result = fileInteractor.getInner().createExcelFile(e, stateInfo.currentFilters)
	
	if result.isSuccessful() then 
		e.fileToDownload = result.getInner()
		e.CSFilename = stateInfo.configName
		handle_file_download = result.getInner()
	else 
		e.Message = result.getInner()
		handle_file_download = ""
	end if

end function


function handle_data_upload as v (e as p)
	if .not. context.session.hasVariable("DYNAMIC_LIST_UPLOADED_DATA") then 
		context.session.add("DYNAMIC_LIST_UPLOADED_DATA", "[]")
	end if 
	
	if .not. context.session.hasVariable("DYNAMIC_LIST_UPLOAD_SUCCESS") then 
		context.session.add("DYNAMIC_LIST_UPLOAD_SUCCESS", "true")
	end if 
	
	dim stateInfo as p
	stateInfo = json_parse(e.__si)
	
	dim fileInteractor as DynamicLists::Result = DynamicLists::FileInteraction.create(stateInfo.configName)
	if fileInteractor.isSuccessful() = .f. then 
		e.errorText = fileInteractor.getInner()
		context.session.DYNAMIC_LIST_UPLOAD_SUCCESS = "false"
		context.session.DYNAMIC_LIST_UPLOADED_DATA = "[]"
		e.abort = .t.
		end 
	end if 
	
	dim result as DynamicLists::Result = fileInteractor.data.readFileToJsonString(e.fileArray[1])
	
	if result.isSuccessful() then
		context.session.DYNAMIC_LIST_UPLOAD_SUCCESS = "true"
		context.session.DYNAMIC_LIST_UPLOADED_DATA = result.data.getJson()
		e.abort = .f.
		e.errorText = ""
	else 
		context.session.DYNAMIC_LIST_UPLOAD_SUCCESS = "false"
		context.session.DYNAMIC_LIST_UPLOADED_DATA = "[]"
		e.abort = .t.
		e.errorText = result.getInner()
	end if
end function

function pre_file_upload as v (e as p)
	session_set("DYNAMIC_LIST_CURRENT_DATA", e.__listData)
	session_set("DYNAMIC_LIST_COLUMN_NAMES", e.DYNAMIC_LIST_COLUMN_NAMES)
	session_set("DYNAMIC_LIST_COLUMN_DISPLAY_NAMES", e.DYNAMIC_LIST_COLUMN_DISPLAY_NAMES)
end function

function session_set as v (key as c, val as c)
	if .not. context.session.hasVariable(key) then 
		context.session.add(key, val)
	else 
		context.session.saveData(key, val)
	end if
end function

function post_file_upload as c (e as p)
	dim res as DynamicLists::Result
	if context.session.DYNAMIC_LIST_UPLOAD_SUCCESS = "true" then 
		res = DynamicLists::Result.success(context.session.DYNAMIC_LIST_UPLOADED_DATA)
	else 
		res = DynamicLists::Result.fail("File upload failed!")
	end if 
	
	post_file_upload = "{dialog.object}.stateInfo.apiResult = " + res.toJson().getJson() + ";"
end function

function get_user_permissions as c (e as p)
	dim login as p 
	login = require("login")
	dim loginStatus as p = login.loginStatus()

	dim perms as extension::json 
	perms.setJson(json_generate(loginStatus.permissions))

	get_user_permissions = "{dialog.object}.stateInfo.apiResult = " + DynamicLists::Result.success(perms).toJson().getJson() + ";"
end function

function batch_fetch as c (e as p)
	dim configInterface as p
	dim batch as c
	configInterface = require("listConfigInterface")
	batch = configInterface.batchFetch(e).toJson().getJson()
	batch_fetch = "{dialog.object}.stateInfo.apiResult = " + batch + ";"
end function

' e.formid
function prepare_transform_form_list as c (e as p)
	dim configInterface as p
	dim res as p
	configInterface = require("listConfigInterface")
	res = configInterface.prepareTransformFormList(e)
	prepare_transform_form_list = "{dialog.object}.stateInfo.apiResult = " + res.toJson().getJson() + ";"
end function

' Takes e.connectionName and e.tableName
function getSchemaAjaxCallback as c (e as p)
	dim schemaInfo as p
	dim schemaRes as DynamicLists::Result
	schemaInfo = require("schemaInfo")
	schemaRes = schemaInfo.getConnectionSchemaJSON(e.connectionName, e.tableName)
	
	getSchemaAjaxCallback = "{dialog.object}.stateInfo.apiResult = " + schemaRes.toJson().getJson() + ";"
end function

function getAllDataForTable as c (e as p)
	dim standardQueries as p
	dim result as DynamicLists::Result
	stdQueries = require("standardQueries")
	result = stdQueries.querySqlWithFilters(e)
	if result.isSuccess = .f. then 
		getAllDataForTable = "{dialog.object}.stateInfo.apiResult = " + result.toJson().getJson() + ";"
	end if

	dim inner as extension::json = result.data 
	dim output as extension::json 
	output.setJson("{}")
	output.setProperty("fetchedData", inner)
	output.setProperty("serverTimeOffset", gettimezoneoffset())
	getAllDataForTable = "{dialog.object}.stateInfo.apiResult = " + DynamicLists::Result.success(output).toJson().getJson() + ";"
end function

function updateData as c (e as p)
	dim standardQueries as p
	dim results[0] as p
	stdQueries = require("standardQueries")
	dim res as DynamicLists::Result = stdQueries.updateData(e)
	updateData = "{dialog.object}.stateInfo.apiResult = " + res.toJson().getJson() + ";"
end function

function fetch as c (e as p)
	dim stdQueries as p
	dim result as DynamicLists::Result
	stdQueries = require("standardQueries")
	result = stdQueries.performFetch(e)
	if result.isSuccess = .f. then 
		fetch = "{dialog.object}.stateInfo.apiResult = " + result.toJson().getJson() + ";"
	end if 

	dim inner as extension::json = result.data 
	dim output as extension::json 
	output.setJson("{}")
	output.setProperty("fetchedData", inner)
	output.setProperty("serverTimeOffset", gettimezoneoffset())
	fetch = "{dialog.object}.stateInfo.apiResult = " + DynamicLists::Result.success(output).toJson().getJson() + ";"
end function

' e.configName (string)
function request_list_config as c (e as p)
	dim configInterface as p
	dim config as c
	configInterface = require("listConfigInterface")
	config = configInterface.requestConfig(e).toJson().getJson()
	request_list_config = "{dialog.object}.stateInfo.apiResult = " + config + ";"
end function

' Input: e.global -- Flag to save as global (will fail, depending on user)
' Input: e.configName -- Name to save the config under
' Input: e.payload
' 	If global is true, then this is the entire configuration 
' 	If global is false, then this is just the mapping portion of the config
function save_config as c (e as p)
	dim configInterface as p
	dim result as c
	configInterface = require("listConfigInterface")
	result = configInterface.saveConfig(e).toJson().getJson()
	save_config = "{dialog.object}.stateInfo.apiResult = " + result + ";"
end function
