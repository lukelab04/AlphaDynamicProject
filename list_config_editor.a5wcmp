{
    "$schema": "UX",
    "$definition": {
        "style_name": "Alpha",
        "style_type": "Alpha Five",
        "resolveAbstractClassNames": true,
        "builderVersionNumber": 1,
        "overrideStyleName": "Default",
        "FontSize": "Medium",
        "LocalCss": "<style type=\"text/css\">\n\n\n\n\n\n\n\n\n\n\n\n</style>",
        "A5ContainerClassPadding": "0px",
        "A5ContainerClassPaddingForContainerWidthMode": "4px",
        "JavaScriptFunctionDeclarations": "// Take items (should be string representation of JSON) and render form\nfunction renderForm(obj, formName, items) {\n\titems = items.filter((x) => Boolean(x));\n\n\tobj.setJSONFormItems(formName, items);\n\tobj.getControl(formName)._formBoxSize = \"\";\n\tobj.resizeFormBoxes();\n}\n\n// Mapping from ID to boolean so components can look up if they are hidden\nvar SHOW_HIDE_MAP = {};\n\n// https://stackoverflow.com/questions/105034/how-do-i-create-a-guid-uuid\nfunction uuidv4() {\n  return \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, c =>\n    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n  );\n}\n\n// Helper to make sure arguments are what they should be\nfunction typeCheck(x, type, msg) {\n\tif (typeof x !== type) throw new Error(msg);\n\treturn x;\n}\n\n// Class to handle VALUES in the input. Numbers, strings, objects, arrays, etc.\n// The options can be of multiple forms. Null for strings, numbers, and functions, \n// an object description for objects, or an Input instance for arrays.\nclass Value {\n\tconstructor(type, options) {\n\t\t// Dialog object and form name\n\t\tthis.obj = null;\n\t\tthis.formName = null;\n\t\t\n\t\tthis.options = options ? options : {};\n\t\tthis.id = \"INPUT_TYPE_\" + uuidv4();\n\t\tSHOW_HIDE_MAP[this.id] = true;\n\t\n\t\t// Helper function to make sure object description matches what we expect\n\t\tlet validateObj = (o) => {\n\t\t\tif (!o.staticKeys) {\n\t\t\t\tthrow new Error(\"Expected input object to have field 'staticKeys'\");\n\t\t\t}\n\t\t\tif (o.dynamicKeys) {\n\t\t\t\tif (!(o.dynamicKeys instanceof Input)) throw new Error(\"Expected field 'dynamicKeys' to be an instance of Input\");\n\t\t\t}\n\t\t\tfor(const prop in o.staticKeys) {\n\t\t\t\tif (!(o.staticKeys[prop] instanceof Input)) throw new Error(`Key ${prop} is not associated with an instance of Input`);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Helper function to make sure array description is an Input\n\t\tlet validateArr = (options) => {\n\t\t\tif (!options.arrayInput || !(options.arrayInput instanceof Input)) throw new Error(`Expected 'options.arrayInput' to be an instance of Input`);\n\t\t}\n\t\n\t\t// Set up class variables according to type of input\n\t\tswitch (type) {\n\t\t\tcase 'string':\n\t\t\tcase 'number': \n\t\t\tcase 'boolean': \n\t\t\tcase 'function':\n\t\t\tcase 'dropdown':\n\t\t\t\tthis.type = type;\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tthis.type = type;\n\t\t\t\tvalidateObj(options);\n\t\t\t\t// Key -> Input\n\t\t\t\tthis.dynamicElems = {};\n\t\t\t\tbreak;\n\t\t\tcase 'array':\n\t\t\t\tthis.type = type;\n\t\t\t\tvalidateArr(options);\n\t\t\t\toptions.arrayInput.renderOptions.delete = true;\n\t\t\t\t// Element ID -> Input\n\t\t\t\tthis.allArrayElems = {};\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Value: Unknown type ${type}`)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// Helper method to find instances of Input that are included in this class's description \n\t// (i.e. in Arrays or Objects) and set those Input parents to the parent specified here\n\tsetParent(parent) {\n\t\tswitch (this.type) {\n\t\t\tcase 'object':\n\t\t\t\tfor (const prop in this.options.staticKeys) {\n\t\t\t\t\tthis.options.staticKeys[prop].setParent(parent);\n\t\t\t\t}\n\t\t\t\tfor (const prop in this.dynamicElems) {\n\t\t\t\t\tthis.dynamicElems[prop].setParent(parent);\n\t\t\t\t}\n\t\t\t\tif (this.options.dynamicKeys)\n\t\t\t\t\tthis.options.dynamicKeys.setParent(parent);\n\t\t\t\treturn;\n\t\t\tcase 'array':\n\t\t\t\tfor (const prop in this.allArrayElems) {\n\t\t\t\t\tthis.allArrayElems[prop].setParent(parent);\n\t\t\t\t}\n\t\t\t\tthis.options.arrayInput.setParent(parent);\n\t\t\t\treturn;\n\t\t\tdefault: return;\n\t\t}\n\t}\n\t\n\t// Set the dialog object and form name for this and all children\n\tsetObjAndFormName(obj, formName) {\n\t\tthis.obj = obj;\n\t\tthis.formName = formName;\n\t\t\n\t\tswitch(this.type) {\n\t\t\tcase 'object':\n\t\t\t\tfor (const prop in this.options.staticKeys) {\n\t\t\t\t\tthis.options.staticKeys[prop].setObjAndFormName(obj, formName);\n\t\t\t\t}\n\t\t\t\tfor (const prop in this.dynamicElems) {\n\t\t\t\t\tthis.dynamicElems[prop].setObjAndFormName(obj, formName);\n\t\t\t\t}\n\t\t\t\tif (this.options.dynamicKeys) {\n\t\t\t\t\tthis.options.dynamicKeys.setObjAndFormName(obj, formName);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'array':\n\t\t\t\tfor (const prop in this.allArrayElems) {\n\t\t\t\t\tthis.allArrayElems[prop].setObjAndFormName(obj, formName);\n\t\t\t\t}\n\t\t\t\tthis.options.arrayInput.setObjAndFormName(obj, formName);\n\t\t\t\treturn;\n\t\t\tdefault: return;\n\t\t}\n\t}\n\t\n\tpropagateDefaults(hasDefault, val) {\n\t\tif (!('default' in this.options) && hasDefault) this.options.default = val;\n\t\n\t\tswitch(this.type) {\n\t\t\tcase 'object':\n\t\t\t\tfor (const prop in this.options.staticKeys) {\n\t\t\t\t\tthis.options.staticKeys[prop].propagateDefaults('default' in this.options, this.options.default);\n\t\t\t\t}\n\t\t\t\tfor (const prop in this.dynamicElems) {\n\t\t\t\t\tthis.dynamicElems[prop].propagateDefaults('default' in this.options, this.options.default);\n\t\t\t\t}\n\t\t\t\tif (this.options.dynamicKeys) {\n\t\t\t\t\tthis.options.dynamicKeys.propagateDefaults('default' in this.options, this.options.default);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'array':\n\t\t\t\tfor (const prop in this.allArrayElems) {\n\t\t\t\t\tthis.allArrayElems[prop].propagateDefaults('default' in this.options, this.options.default);\n\t\t\t\t}\n\t\t\t\tthis.options.arrayInput.propagateDefaults('default' in this.options, this.options.default);\n\t\t\t\treturn;\n\t\t}\n\t}\n\t\n\t// Return *value*\n\t// Will be a number, bool, string, array, etc\n\tserialize() {\n\t\tlet val;\n\t\tlet form = this.obj.getControl(this.formName);\n\t\tswitch (this.type) {\n\t\t\t// The simple input types can be parsed directly from the JSON\n\t\t\tcase 'string':\n\t\t\t\tval = form.data[this.id];\n\t\t\t\tif ('default' in this.options && (val === undefined || val === \"\")) return this.options.default;\n\t\t\t\tif (val === undefined || val === '') throw new Error(\"Value must be filled out.\");\n\t\t\t\treturn val;\n\t\t\tcase 'number':\n\t\t\t\tval = form.data[this.id];\n\t\t\t\tif ('default' in this.options && (val === undefined || val === \"\")) return this.options.default;\n\t\t\t\tif (val === undefined || val == '') throw new Error(\"Value must be filled out.\");\n\t\t\t\treturn val;\n\t\t\tcase 'boolean': \n\t\t\t\tval = form.data[this.id];\n\t\t\t\t\n\t\t\t\t// Doesn't really make sense for a categorical value to be undefined. But the code is here to deal with it in case\n\t\t\t\t// if ('default' in this.options && (val === undefined || val === false)) return this.options.default;\n\t\t\t\t// if (val === undefined) throw new Error(\"Value must be filled out.\");\n\t\t\t\treturn Boolean(val);\n\t\t\tcase 'function':\n\t\t\t\tval = eval(form.data[this.id]);\n\t\t\t\tif ('default' in this.options && (val === undefined || val === \"\")) return this.options.default;\n\t\t\t\tif (val === undefined) throw new Error(\"Value must be filled out.\");\n\t\t\t\treturn val.toString();\n\t\t\tcase 'dropdown':\n\t\t\t\tval = form.data[this.id];\n\t\t\t\tif ('default' in this.options && (val == undefined || val === \"\")) return this.options.default;\n\t\t\t\treturn val;\n\t\t\tcase 'object':\n\t\t\t\tlet allErrors = [];\n\t\t\t\n\t\t\t\t// Collect all static & dynamic keys into objResult\n\t\t\t\tlet objResult = {};\n\t\t\t\tfor(const prop in this.options.staticKeys) {\n\t\t\t\t\tlet input = this.options.staticKeys[prop];\n\t\t\t\t\tobjResult[prop] = input.serialize();\n\t\t\t\t}\n\t\t\t\tfor(const prop in this.dynamicElems) {\n\t\t\t\t\tlet input = this.dynamicElems[prop];\n\t\t\t\t\tobjResult[prop] = input.serialize();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Undefined values can't be serialized anyway, so we'll clean them out\n\t\t\t\t// This also makes it possible to see if we should use the default value for this object \n\t\t\t\tfor (const key in objResult) {\n\t\t\t\t\tif(objResult[key] === undefined) delete objResult[key];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// If objResult empty and default exists, use the default\n\t\t\t\tif ('default' in this.options && Object.keys(objResult).length == 0) {\n\t\t\t\t\treturn this.options.default;\n\t\t\t\t} \n\t\t\t\tif (Object.keys(objResult).length == 0) throw new Error('Object must specify at least one key.');\n\t\t\t\treturn objResult;\n\t\t\tcase 'array':\n\t\t\t\tlet arrResult = [];\n\t\t\t\tfor(const prop in this.allArrayElems) {\n\t\t\t\t\tarrResult.push(this.allArrayElems[prop].serialize());\n\t\t\t\t}\n\t\t\t\tif (arrResult.length == 0 && 'default' in this.options) return this.default;\n\t\t\t\tif (arrResult.length == 0) throw new Error('Array must have at least one element.');\n\t\t\t\treturn arrResult;\n\t\t}\n\t}\n\t\n\t// If this is an object, return the Input associated with this key\n\tkey(name) {\n\t\tif (this.type !== 'object') return;\n\t\t\n\t\tif (this.options.staticKeys[name]) {\n\t\t\treturn this.options.staticKeys[name];\n\t\t}\n\t\tif (this.dynamicElems[name]) {\n\t\t\treturn this.dynamicElems[name];\n\t\t}\n\t}\n\t\n\t// If this is an array, return the Input associated with the index\n\tindex(i) {\n\t\tif (this.index !== 'array') return;\n\t\t\n\t\treturn Object.values(this.allArrayElems)[i];\n\t}\n\t\n\t// Return a JSON object that can be used to populate the form\n\t// Takes 'data', which is a JSON object *or JSON value* corresponding to this object\n\tgetPopulateDataFromObj(data, callbacks) { \n\t\t// If data is undefined and we have a default, just return an object setting this item to our default\n\t\tif (data === undefined && 'default' in this.options) {\n\t\t\tlet d = {};\n\t\t\td[this.id] = this.options.default;\n\t\t\treturn d;\n\t\t}\n\t\t\n\t\tif (typeof data == 'object' && 'title' in data && data.title == 'Show Reviews') debugger;\n\t\n\t\tlet t = typeof data;\n\t\t\n\t\t// Simple types can be set directly to 'data'\n\t\tif ((t == 'string' || t == 'boolean' || t == 'number') && this.type === t) {\n\t\t\tlet d = {};\n\t\t\td[this.id] = data;\n\t\t\treturn d;\n\t\t}\n\t\t\n\t\tif (t == 'string' && this.type == 'dropdown') {\n\t\t\tlet d = {};\n\t\t\td[this.id] = data;\n\t\t\treturn d;\n\t\t}\n\t\t\n\t\t// Functions must be converted to string representation (we input functions through a text edit box).\n\t\t// Implies closures don't work, but the JSON object representation of whatever we are building\n\t\t// should be standalone anyway.\n\t\tif(t == 'string' && this.type === 'function') {\n\t\t\tlet d = {};\n\t\t\td[this.id] = data.toString();\n\t\t\treturn d;\n\t\t}\n\t\t\n\t\t// Handle arrays\n\t\telse if (t == 'object' && this.type == 'array') {\n\t\t\tthis.allArrayElems = {};\n\t\t\tlet d = {};\n\t\t\tfor (const elem of data) {\n\t\t\t\t// Make a new instance of the array element to hold this element of d\n\t\t\t\tlet input = this.options.arrayInput.cloneWithNewId();\n\t\t\t\t// We don't actually need the form, we just need to populate the child map,\n\t\t\t\t// which is done when building the form\n\t\t\t\tinput.buildJSONForm(() => {});\n\t\t\t\tObject.assign(d, input.getPopulateDataFromObj(elem));\n\t\t\t\tthis.allArrayElems[input.id] = input;\n\t\t\t}\n\t\t\treturn d;\n\t\t}\n\t\t\n\t\t// Handle objects\n\t\telse if (t == 'object' && this.type == 'object') {\n\t\t\tlet d = {};\n\t\t\t// We will try to parse all remaining keys in d as a dynamic key.\n\t\t\t// So we should keep track of which keys we see while filling so we don't parse any twice.\n\t\t\tlet seen = {};\n\t\t\t\n\t\t\t// If key corresponds to static entry, populate it.\n\t\t\tfor (const elem in this.options.staticKeys) {\n\t\t\t\t// Ok if data[elem] undefined, input getPopulateDataFromObj will handle default items\n\t\t\t\tObject.assign(d, this.options.staticKeys[elem].getPopulateDataFromObj(data[elem]));\n\t\t\t\tseen[elem] = true;\n\t\t\t}\n\t\t\t\n\t\t\t// For remaining keys, try to parse according to dynamic keys\n\t\t\tthis.dynamicElems = {};\n\t\t\tfor (const elem in data) {\n\t\t\t\tif (seen[elem]) continue;\n\t\t\t\t\n\t\t\t\tlet input = this.options.dynamicKeys;\n\t\t\t\tif (!input) throw new Error('Could not parse keys ' + JSON.stringify(data));\n\t\t\t\tinput = input.cloneWithNewId();\n\t\t\t\t// Same deal as with arrays\n\t\t\t\tinput.buildJSONForm(() => {});\n\t\t\t\tthis.dynamicElems[elem] = input;\n\t\t\t\tObject.assign(d, input.getPopulateDataFromObj(data[elem]));\n\t\t\t}\n\t\t\t\n\t\t\treturn d\n\t\t}\n\t\t\n\t\t// Type didn't match anything we recognize\n\t\telse {\n\t\t\tlet str = JSON.stringify(data);\n\t\t\tlet label = this.parent ? 'Value ' + this.parent.label + ': ' : '';\n\t\t\tthrow new Error(label + 'Could not parse ' + (str ? str : 'empty value when no default was supplied'));\n\t\t}\n\t}\n\t\n\t// Return an object containing key-value pairs for data currently in the form \n\tgetPopulateData() {\n\t\tlet data = {};\n\t\tlet form = this.obj.getControl(this.formName);\n\n\t\tswitch (this.type) {\n\t\t\tcase 'string':\n\t\t\tcase 'number':\n\t\t\tcase 'function':\n\t\t\tcase 'boolean':\n\t\t\tcase 'dropdown':\n\t\t\t\tdata[this.id] = form.data[this.id];\n\t\t\t\treturn data;\n\t\t\tcase 'object':\n\t\t\t\tfor (const prop in this.options.staticKeys) {\n\t\t\t\t\tObject.assign(data, this.options.staticKeys[prop].getPopulateData());\n\t\t\t\t}\n\t\t\t\tfor (const prop in this.dynamicElems) {\n\t\t\t\t\tObject.assign(data, this.dynamicElems[prop].getPopulateData());\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\tcase 'array':\n\t\t\t\tfor (const prop in this.allArrayElems) {\n\t\t\t\t\tObject.assign(data, this.allArrayElems[prop].getPopulateData());\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t}\n\t}\n\t\n\t// Do a \"fairly deep\" clone of an object. The ID is new and all children will be cloned as well. \n\t// Options will be kept. Array elements and dynamic keys are not kept.\n\tcloneWithNewId() {\n\t\tlet newOptions = {};\n\t\tlet value = null;\n\t\tswitch (this.type) {\n\t\t\t// No special handling for basic input types\n\t\t\tcase 'string':\n\t\t\tcase 'number':\n\t\t\tcase 'function':\n\t\t\tcase 'boolean':\n\t\t\tcase 'dropdown':\n\t\t\t\t value = new Value(this.type, this.options);\n\t\t\t\t value.obj = this.obj;\n\t\t\t\t value.formName = this.formName;\n\t\t\t\t return value;\n\t\t\tcase 'object':\n\t\t\t\t// Clone static & dynamic keys and return\n\t\t\t\tnewOptions.staticKeys = {};\n\t\t\t\tif ('default' in this.options) newOptions.default = this.options.default;\n\t\t\t\tfor (const prop in this.options.staticKeys) {\n\t\t\t\t\tnewOptions.staticKeys[prop] = this.options.staticKeys[prop].cloneWithNewId();\n\t\t\t\t}\n\t\t\t\tif (this.options.dynamicKeys) {\n\t\t\t\t\tnewOptions.dynamicKeys = this.options.dynamicKeys.cloneWithNewId();\n\t\t\t\t}\n\t\t\t\tnewOptions.inline = this.options.inline;\n\t\t\t\tvalue = new Value(this.type, newOptions);\n\t\t\t\tvalue.setObjAndFormName(this.obj, this.formName);\n\t\t\t\treturn value;\n\t\t\tcase 'array':\n\t\t\t\tnewOptions.inline = this.options.inline;\n\t\t\t\tnewOptions.arrayInput = this.options.arrayInput.cloneWithNewId();\n\t\t\t\tif ('default' in this.options) newOptions.default = this.options.default;\n\t\t\t\tvalue = new Value(this.type, newOptions);\n\t\t\t\tvalue.setObjAndFormName(this.obj, this.formName);\n\t\t\t\treturn value;\n\t\t}\n\t}\n\t\n\t// Build the JSON form input element corresponding to this object instance. \n\tbuildFormInput(callbacks) {\n\t\tswitch(this.type) {\n\t\t\tcase 'string':\n\t\t\tcase 'function':\n\t\t\tcase 'number':\n\t\t\t\treturn this.buildSimpleInput('edit');\n\t\t\tcase 'boolean':\n\t\t\t\treturn this.buildSimpleInput('checkbox');\n\t\t\tcase 'dropdown':\n\t\t\t\treturn this.buildDropdownInput();\n\t\t\tcase 'object':\n\t\t\t\treturn this.buildObjectInput(callbacks);\n\t\t\tcase 'array':\n\t\t\t\treturn this.buildArrayInput(callbacks);\n\t\t}\n\t}\n\t\n\tbuildOpenInTabButton(id, buttonText, onClick) {\n\t\treturn {\n\t\t\ttype: \"button\",\n\t\t\tid: id,\n\t\t\tcontrol: {\n\t\t\t\tlayout: \"text\",\n\t\t\t\thtml: \"<span class=\\\"\\\" style=\\\"\\\">\" + buttonText + \"</span>\",\n\t\t\t\ticon: \"svgIcon=#alpha-icon-addCircleBorder:icon,24\",\n\t\t\t\tonClick: onClick,\n\t\t\t},\n\t\t\tcontainer: {\n\t\t\t\tstyle: \"width: 100%;\",\n\t\t\t\tclassName: \"\"\n\t\t\t},\n\t\t\tlayout: \"{content}\"\n\t\t};\n\t}\n\t\n\t// Build JSON form input for an Object input\n\tbuildObjectInput(callbacks) {\n\t\tlet allChildren = [];\n\t\t\n\t\tlet makeTabBtn = (input, btnText, tabTitle) => {\n\t\t\treturn this.buildOpenInTabButton(this.id + \"_OPEN_BTN_\"+ input.id, btnText, () => callbacks.addObjAsTab(input, tabTitle));\n\t\t};\n\t\n\t\t// Get form JSON for all static & dynamic keys\n\t\tfor (const key in this.options.staticKeys) {\n\t\t\tlet input = this.options.staticKeys[key];\n\t\t\tlet inputType = input.selected();\n\t\t\tlet inputForm = null;\n\t\t\t\n\t\t\tif (inputType && (inputType.type == 'object' || inputType.type == 'array') && !inputType.options.inline) {\n\t\t\t\tinputForm = makeTabBtn(input, \"Open \" + key, input.label + \" -- \" + key);\n\t\t\t}\n\t\t\telse inputForm = input.buildJSONForm(callbacks);\n\t\t\t\n\t\t\tallChildren.push(inputForm);\t\t\n\t\t}\n\t\t\n\t\tfor (const key in this.dynamicElems) {\n\t\t\tlet input = this.dynamicElems[key];\n\t\t\tinput.renderOptions.delete = true;\n\t\t\tinput.renderOptions.keyName = key;\n\t\t\tlet inputType = input.selected();\n\t\t\tlet inputForm = null;\n\t\t\t\n\t\t\tif (inputType && (inputType.type == 'object' || inputType.type == 'array') && !inputType.options.inline) {\n\t\t\t\tinputForm = makeTabBtn(input, \"Open \" + key, input.label + ' -- ' + key);\n\t\t\t}\n\t\t\telse inputForm = input.buildJSONForm(callbacks);\n\n\t\t\tallChildren.push(inputForm);\n\t\t}\n\t\t\n\t\t// Callback function to add a key to this object\n\t\tlet addDynamicKey = () => {\n\t\t\tlet form = this.obj.getControl(this.formName);\n\t\t\t// Get the key name from the input box and make sure it isn't empty, isn't null, and doesn't already exist\n\t\t\tlet keyName = form.data[this.id + \"_ADD_KEY_INPUT\"];\n\t\t\t// Reset key input\n\t\t\tform.data[this.id + \"_ADD_KEY_INPUT\"] = \"\";\n\t\t\tif (keyName == \"\" || !keyName) return;\n\t\t\tif (!this.options.dynamicKeys) return;\n\t\t\t\n\t\t\t// Clone dynamic keys input element, add it to this object instance, and re render\n\t\t\tlet newItem = this.options.dynamicKeys.cloneWithNewId();\n\t\t\tnewItem.buildJSONForm(null, null, null);\n\t\t\tthis.dynamicElems[keyName] = newItem;\n\t\t\tcallbacks.reRender();\n\t\t};\n\t\t\n\t\tlet items = [];\n\t\t// If we have the ability to add dynamic keys, we need to add a button to create them\n\t\tif(this.options.dynamicKeys) {\n\t\t\titems = [\n\t\t\t\t{\n\t\t\t\t\ttype: \"button\",\n\t\t\t\t\tid: this.id + \"_ADD_KEY_BTN\",\n\t\t\t\t\tcontrol: {\n\t\t\t\t\t\tlayout: \"text\",\n\t\t\t\t\t\thtml: \"<span class=\\\"\\\" style=\\\"\\\">Add Key</span>\",\n\t\t\t\t\t\t\"icon\": \"\",\n\t\t\t\t\t\t\"onClick\": addDynamicKey,\n\t\t\t\t\t},\n\t\t\t\t\tcontainer: {\n\t\t\t\t\t\tstyle: \";\",\n\t\t\t\t\t\tclassName: \"\"\n\t\t\t\t\t},\n\t\t\t\t\tlayout: \"{content}\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"edit\",\n\t\t\t\t\tid: this.id + \"_ADD_KEY_INPUT\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tfrom: this.id + \"_ADD_KEY_INPUT\",\n\t\t\t\t\t\tensure: true,\n\t\t\t\t\t},\n\t\t\t\t\tlabel: {\n\t\t\t\t\t\ttext: \"New key name\",\n\t\t\t\t\t},\n\t\t\t\t\tlayout: 'label-above',\n\t\t\t\t\tcontrol: {\n\t\t\t\t\t\tplaceholder: \"\",\n\t\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\t},\n\t\t\t\t\tcontainer: {\n\t\t\t\t\t\tstyle: \";width: 30%;\",\n\t\t\t\t\t\tclassName: \"\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t\t\n\t\tallChildren.push({\n\t\t\ttype: \"group\",\n\t\t\tid: this.id + \"_ADD_KEY_GROUP\",\n\t\t\tcontainer: {\n\t\t\t\tstyle: \";width: 100%;display: flex; flex-direction: row; width: 100%; border-top: 1px solid black;\"\n\t\t\t},\n\t\t\titems: items,\n\t\t});\n\t\t\n\t\treturn {\n\t\t\ttype: \"group\",\n\t\t\tid: this.id,\n\t\t\tcontainer: {\n\t\t\t\tstyle: \"; width: 100%;display: flex; flex-direction: row; flex-flow: wrap; box-sizing: border-box;\"\n\t\t\t},\n\t\t\t// Show if the show hide map says we should show\n\t\t\tshow: () => {return SHOW_HIDE_MAP[this.id] === undefined ? true : SHOW_HIDE_MAP[this.id]; },\n\t\t\titems: allChildren,\n\t\t};\n\t}\n\t\n\t// Build JSON form element from array input\n\tbuildArrayInput(callbacks) {\n\t\tlet value = this.options.arrayInput;\n\t\t\n\t\t// Helper function to take an instance of Input and wrap it in a JSON form row (rows have buttons to delete)\n\t\tlet injectIntoRow = (input) => {\n\t\t\tlet inputForm = input.buildJSONForm(callbacks);\n\t\t\tlet id = \"ARRAY_ROW_\" + uuidv4();\n\t\t\t\n\t\t\treturn {\n\t\t\t\ttype: \"group\",\n\t\t\t\tshow: () => {return SHOW_HIDE_MAP[id] === undefined ? true : SHOW_HIDE_MAP[id]; },\n\t\t\t\tid: id,\n\t\t\t\tcontainer: {\n\t\t\t\t\tstyle: \";width: 100%; display: flex; flex-direction: row; flex-flow: wrap;\"\n\t\t\t\t},\n\t\t\t\titems: [\n\t\t\t\t\tinputForm,\n\t\t\t\t]\n\t\t\t};\n\t\t}\n\t\t\n\t\t// Callback for the add row onclick\n\t\tlet makeArrayRow = () => {\n\t\t\tlet input = value.cloneWithNewId();\n\t\t\tthis.allArrayElems[input.id] = input;\n\t\t\tcallbacks.reRender();\n\t\t};\n\t\t\n\t\treturn {\n\t\t\ttype: \"group\",\n\t\t\tid: this.id,\n\t\t\tcontainer: {\n\t\t\t\tstyle: \"; width: 100%;display: flex; flex-direction: row; flex-flow: wrap; box-sizing: border-box;\"\n\t\t\t},\n\t\t\tshow: () => {return SHOW_HIDE_MAP[this.id] === undefined ? true : SHOW_HIDE_MAP[this.id]; },\n\t\t\titems: [\n\t\t\t\t// allArrayElems are Input instances, so we need to map those to JSON forms\n\t\t\t\t...Object.values(this.allArrayElems).map(injectIntoRow),\n\t\t\t\t{\n\t\t\t\t\ttype: \"button\",\n\t\t\t\t\tid: this.id + \"_ADD_BTN\",\n\t\t\t\t\tcontrol: {\n\t\t\t\t\t\tlayout: \"icon\",\n\t\t\t\t\t\thtml: \"<span class=\\\"\\\" style=\\\"\\\"></span>\",\n\t\t\t\t\t\ticon: \"svgIcon=#alpha-icon-addCircleBorder:icon,24\",\n\t\t\t\t\t\tonClick: makeArrayRow,\n\t\t\t\t\t},\n\t\t\t\t\tcontainer: {\n\t\t\t\t\t\tstyle: \";\",\n\t\t\t\t\t\tclassName: \"\"\n\t\t\t\t\t},\n\t\t\t\t\tlayout: \"{content}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n\t\n\t// Build input for \"simple\" values (number, bool, string, function)\n\tbuildSimpleInput(editType) {\n\t\tlet input = {\n\t\t\ttype: editType,\n\t\t\tid: this.id,\n\t\t\tdata: {\n\t\t\t\tfrom: this.id,\n\t\t\t\tensure: true,\n\t\t\t},\n\t\t\tshow: () => {return SHOW_HIDE_MAP[this.id] === undefined ? true : SHOW_HIDE_MAP[this.id]; },\n\t\t\tcontrol: {\n\t\t\t\tplaceholder: \"\",\n\t\t\t\twidth: \"100%\",\n\t\t\t},\n\t\t\tcontainer: {\n\t\t\t\tstyle: \"; flex: 1 1;\",\n\t\t\t\tclassName: \"\"\n\t\t\t}\n\t\t};\n\t\t\n\t\treturn input;\n\t}\n\t\n\tbuildDropdownInput() {\n\t\tlet dropdown = {\n\t\t\ttype: \"picker\",\n\t\t\tid: this.id,\n\t\t\tdata: {\n\t\t\t\tfrom: this.id,\n\t\t\t\tensure: true,\n\t\t\t},\n\t\t\tshow: () => {return SHOW_HIDE_MAP[this.id] === undefined ? true : SHOW_HIDE_MAP[this.id]; },\n\t\t\tcontrol: {\n\t\t\t\tplaceholder: \"\",\n\t\t\t\tdata: {\n\t\t\t\t\tsrc: this.options.dropdownItems,\n\t\t\t\t\tmap: [\"value\", \"text\"],\n\t\t\t\t},\n\t\t\t\tonChange: (change) => this.options.onChange(change, this),\n\t\t\t},\n\t\t\tcontainer: {\n\t\t\t\tstyle: \"; flex: 1 1;\",\n\t\t\t}\n\t\t};\n\t\treturn dropdown;\n\t}\n}\n\n\n// Class to handle an input for an *abstract* value.\n// For example, we may want an input to handle a shipping address. \n// The exact information we need for that may vary by state or country. \n// However, we are collecting the same abstract thing: a shipping address. \n// So, we would create an Input with a 'shipping address' label, then add multiple \n// values to encompass all of the options a user might need to input their address.\n// That is the core difference between this and the Value class. \n// Input = abstract thing or piece of data, Value = literal JSON value that can be entered into the form\nclass Input {\n\tconstructor(options) {\n\t\tthis.renderOptions = {\n\t\t\tkeyName: '',\n\t\t\tcollapse: true,\n\t\t\tdelete: false,\n\t\t};\n\t\t\n\t\t// Dialog object and form name \n\t\tthis.obj = null;\n\t\tthis.formName = null;\n\t\n\t\tthis.parent = null;\n\t\t// Helpful to keep track of the initial render because we want to set the default dropdown choice \n\t\t// to the first one specified, but *only* on the initial render.\n\t\tthis.initialRender = true;\n\t\t// Dropdown name -> child object\n\t\tthis.childMap = {};\n\t\tthis.dropdownId = \"DROPDOWN_\" + uuidv4();\n\t\t\n\t\tif (!options) throw new Error('Must supply options');\n\t\t\n\t\tthis.id = \"GROUP_\" + uuidv4();\n\t\tSHOW_HIDE_MAP[this.id] = true;\n\t\t\n\t\t// Helper to validate that the 'values' array is of the expected form\n\t\tlet validateTypes = (t) => {\n\t\t\tif (!(t instanceof Array))\n\t\t\t\tthrow new Error(\"Expected 'values' to be an Array\");\n\t\t\t\n\t\t\tif (t.length == 0) \n\t\t\t\tthrow new Error(\"Expected 'values' to have at least one element\");\n\t\t\t\n\t\t\tfor (const item of t) {\n\t\t\t\ttypeCheck(item, 'object', \"All items in 'values' should be objects\");\n\t\t\t\ttypeCheck(item.dropdownLabel, 'string', \"Expected 'dropdownLabel' to be a string\");\n\t\t\t\tif (!item.value || !(item.value instanceof Value)) \n\t\t\t\t\tthrow new Error(\"Field 'value' in an element of 'values' must be an instance of Value\");\n\t\t\t}\n\t\t};\n\n\t\tvalidateTypes(options.values);\n\t\tthis.currDropdownValue = options.values[0].dropdownLabel;\n\t\tthis.values = typeCheck(options.values, 'object', 'options.values should be an array');\n\t\tthis.label = typeCheck(options.label, 'string', 'options.label should be a string');\n\t\tthis.comments = typeCheck(options.comments, 'string', 'options.comments should be a string');\n\t\tthis.validate = typeCheck(options.validate, 'function', 'options.validate should be a function');\n\t\tif (options.onPopulate) {;\n\t\t\tthis.onPopulate = typeCheck(options.onPopulate, 'function', 'options.onPopulate should be a function');\n\t\t} else {\n\t\t\tthis.onPopulate = null;\n\t\t}\n\t\t// If show is undefined, just default to true\n\t\tthis.show = options.show ? typeCheck(options.show, 'function', 'options.show should be a function') : (() => true);\n\t}\n\t\n\t// Helper function to return a 'values' array (used in the Input description) with a single value \n\t// Takes value, an instance of the Value object\n\tstatic singleValue(value) {\n\t\treturn [{\n\t\t\tvalue: value,\n\t\t\tdropdownLabel: ''\n\t\t}]\n\t}\n\t\n\t// Helper function to return an input that has just a single Value in the values array \n\t// Takes a type string (object, array, number, etc)\n\t// Takes a label, used for the input\n\t// Takes options, which are used in the Value constructor (so you could pass in the object description, etc)\n\t// Takes show, a callback function, defaults to return true\n\tstatic singleInput(type, label, valueOptions, inputOptions) {\n\t\tvalueOptions = valueOptions ? valueOptions : {};\n\t\tinputOptions = inputOptions ? inputOptions : {};\n\t\treturn new Input({\n\t\t\tvalues: [{value: new Value(type, valueOptions), dropdownLabel: ''}],\n\t\t\tlabel: label,\n\t\t\tcomments: inputOptions.comments ? inputOptions.comments : '',\n\t\t\tvalidate: inputOptions.validate ? inputOptions.validate : (() => true),\n\t\t\tshow: inputOptions.show ? inputOptions.show : (() => true),\n\t\t\tonPopulate: inputOptions.onPopulate,\n\t\t});\n\t}\n\t\n\t// Set the parent of this object and recursivley set parents of all children\n\tsetParent(parent) {\n\t\tthis.parent = parent;\n\t\tfor (const item of this.values) {\n\t\t\titem.value.setParent(this);\n\t\t}\n\t}\n\t\n\t// Set the dialog object and form name for this and all children\n\tsetObjAndFormName(obj, formName) {\n\t\tthis.obj = obj;\n\t\tthis.formName = formName;\n\t\t\n\t\tfor (const item of this.values) {\n\t\t\titem.value.setObjAndFormName(obj, formName);\n\t\t}\n\t}\n\t\n\t// Return a JSON object representing the data in this class\n\tserialize() {\n\t\ttry {\n\t\t\tlet value = this.childMap[this.currDropdownValue].serialize();\n\t\t\tthis.validate(value);\n\t\t\treturn value;\n\t\t} catch (e) {\n\t\t\tlet errMsg = `<p>Errors while attempting to serialize input <b>${this.label}</b>:</p>`;\n\t\t\terrMsg += '<div style = \"margin-left: 1rem;\">';\n\t\t\terrMsg += e.toString();\n\t\t\terrMsg += \"</div>\";\n\t\t\tthrow errMsg;\n\t\t}\n\t}\n\t\n\t// Return input corresponding to selected dropdown element\n\tselected() {\n\t\treturn this.childMap[this.currDropdownValue];\n\t}\n\t\n\tpropagateDefaults(hasDefault, val) {\n\t\tfor (const item of this.values) {\n\t\t\titem.value.propagateDefaults(hasDefault, val);\n\t\t}\n\t}\n\t\n\tpreprocess(obj, formName, parent) {\n\t\tthis.setParent(parent);\n\t\tthis.setObjAndFormName(obj, formName);\n\t\tthis.propagateDefaults(false);\n\t}\n\t\n\t// Similar to the method in Value. \n\t// Clone this object with a new ID, and carry across the options specified. \n\t// Children are also cloned with a new ID. \n\tcloneWithNewId() {\n\t\tlet newOptions = {\n\t\t\tvalues: [],\n\t\t\tlabel: this.label,\n\t\t\tcomments: this.comments,\n\t\t\tvalidate: this.validate,\n\t\t\tshow: this.show,\n\t\t\tonPopulate: this.onPopulate,\n\t\t};\n\t\tfor (const value of this.values) { \n\t\t\tnewOptions.values.push({\n\t\t\t\tvalue: value.value.cloneWithNewId(),\n\t\t\t\tdropdownLabel: value.dropdownLabel,\n\t\t\t});\n\t\t}\n\t\tlet i = new Input(newOptions);\n\t\ti.renderOptions = JSON.parse(JSON.stringify(this.renderOptions));\n\t\ti.setParent(this.parent);\n\t\ti.setObjAndFormName(this.obj, this.formName);\n\t\treturn i;\n\t}\n\t\n\t// Return a JSON object that can be used to set the JSON Form data.\n\t// 'data' should be a JSON object or value.\n\tgetPopulateDataFromObj(data) {\n\t\t// Loop through value definitions, searching for one that matches the data \n\t\t// If none accept, return with false\n\t\tlet recentErrs = {};\n\t\tfor (const valuedef of this.values) {\n\t\t\t// getPopulateDataFromObj can throw an error, but we don't want to instantly return failure in that case. \n\t\t\t// Instead we want to try and find at least one that doesn't fail, and use that.\n\t\t\ttry {\n\t\t\t\tlet d = valuedef.value.getPopulateDataFromObj(data);\n\t\t\t\tthis.setDropdown({item: {data: valuedef.dropdownLabel}});\n\t\t\t\tif (this.onPopulate) {\n\t\t\t\t\tthis.onPopulate(this, data);\n\t\t\t\t}\n\t\t\t\treturn d;\n\t\t\t} catch (e) {\n\t\t\t\t// Just helpful for debugging. Errors logged here may not necessarily be critical, \n\t\t\t\t// they just reflect why certain dropdown values failed to parse.\n\t\t\t\trecentErrs[valuedef.dropdownLabel] = e;\n\t\t\t}\n\t\t}\n\t\tlet errMsg = `<p>Errors while attempting to parse input <b>${this.label}</b>:</p>`;\n\t\terrMsg += '<div style = \"margin-left: 1rem;\">';\n\t\tfor (const valuedef of this.values) {\n\t\t\tif (valuedef.dropdownLabel != '') errMsg += `<p>For dropdown <b>${valuedef.dropdownLabel} </b></p>`;\n\t\t\terrMsg += recentErrs[valuedef.dropdownLabel].toString();\n\t\t}\n\t\terrMsg += \"</div>\";\n\t\t\n\t\tthrow errMsg;\n\t}\n\t\n\tgetPopulateData() {\n\t\tlet d = {};\n\t\td[this.dropdownId] = this.currDropdownValue;\n\t\tfor (const prop in this.childMap) {\n\t\t\tObject.assign(d, this.childMap[prop].getPopulateData());\n\t\t}\n\t\treturn d;\n\t}\n\t\n\t// Helper function to select one of the dropdown values and update child visibility.\n\tsetDropdown(changeInfo) {\n\t\tlet changedTo = changeInfo.item.data;\n\n\t\tfor (const dropdownLabel in this.childMap) {\n\t\t\tif (dropdownLabel == changedTo) {\n\t\t\t\tSHOW_HIDE_MAP[this.childMap[dropdownLabel].id] = true;\n\t\t\t} else {\n\t\t\t\tSHOW_HIDE_MAP[this.childMap[dropdownLabel].id] = false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlet form = this.obj.getControl(this.formName);\n\t\tform.data[this.dropdownId] = changedTo;\n\t\tthis.obj.setValue(this.formName, this.obj.getValue(this.formName));\n\t\tthis.currDropdownValue = changedTo;\n\t}\n\t\n\t// Return a JSON Form object based on this object instance\n\tbuildJSONForm(callbacks) {\n\t\n\t\tlet childForms = [];\n\t\t// We clear the child map in case children were removed (i.e. an Array element was deleted).\n\t\t// It will be re populated in the below loop anyway.\n\t\tthis.childMap = {};\n\t\t\n\t\tlet first = true;\n\t\tfor (const item of this.values) {\n\t\t\t// Push each child's form to the child array\n\t\t\tlet component = item.value.buildFormInput(callbacks);\n\t\t\tchildForms.push(component);\n\t\t\t\n\t\t\t// Don't want multiple children with the same label. \n\t\t\t// Alt. option is to just overwrite or something but silent failure will likely come back to haunt us.\n\t\t\tif (this.childMap[item.dropdownLabel]) {\n\t\t\t\tthrow new Error(`Multiple components with same dropdown label (${item.dropdownLabel}`);\n\t\t\t}\n\t\t\tthis.childMap[item.dropdownLabel] = item.value;\n\t\t\t\n\t\t\t// Only want to update the show hide map if this is the first render. \n\t\t\t// Otherwise we would reset the dropdown option that the user had selected.\n\t\t\tif (this.initialRender) {\n\t\t\t\tSHOW_HIDE_MAP[this.id + \"_CHILDREN\"] = false;\n\t\t\t\tSHOW_HIDE_MAP[item.value.id] = first;\n\t\t\t\tfirst = false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.initialRender = false;\n\t\t\n\t\t// Information used for the dropdown in the JSON Form\n\t\tlet textToVal = [];\n\t\tfor (const label in this.childMap) { \n\t\t\ttextToVal.push({text: label, value: label});\n\t\t}\n\t\t\n\t\t// Callback for when the user selects a new dropdown option\n\t\tlet onChange = (info) => {\n\t\t\tthis.setDropdown(info);\n\t\t};\n\t\t\n\t\tlet header = this.makeHeader(textToVal, onChange, childForms, callbacks);\n\t\t\n\t\treturn header;\n\t}\n\t\n\t// Helper function to create a JSON Form group with a dropdown element placed in the upper right corner\n\tmakeHeader(textToValue, onChange, children, callbacks) {\n\t\tlet init = textToValue[0].value;\n\t\tlet dropdown = {\n\t\t\ttype: \"picker\",\n\t\t\tid: this.dropdownId,\n\t\t\tdata: {\n\t\t\t\tfrom: this.dropdownId,\n\t\t\t\tensure: true,\n\t\t\t\tblank: init,\n\t\t\t},\n\t\t\tlabel: {\n\t\t\t\ttext: \"Editor Types\",\n\t\t\t},\n\t\t\tlayout: \"label-above\",\n\t\t\tcontrol: {\n\t\t\t\tplaceholder: \"\",\n\t\t\t\twidth: \"fit-content;\",\n\t\t\t\tdata: {\n\t\t\t\t\tsrc: textToValue,\n\t\t\t\t\tmap: [\"value\", \"text\"],\n\t\t\t\t},\n\t\t\t\tonChange: onChange,\n\t\t\t},\n\t\t\tcontainer: {\n\t\t\t\tstyle: \"min-width: 100px; background-color: #eaeaea; margin-left: auto;\",\n\t\t\t}\n\t\t};\n\t\t\n\t\tlet collapse = {\n\t\t\ttype: \"button\",\n\t\t\tid: this.id + \"_COLLAPSE_BTN\",\n\t\t\tcontrol: {\n\t\t\t\tlayout: \"icon\",\n\t\t\t\thtml: `<span class=\"\" style=\"\" id=\"${this.id + '_COLLAPSE_ICON'}\"></span>`,\n\t\t\t\ticon: \"svgIcon=#alpha-icon-chevronRight:icon,24\",\n\t\t\t\tonClick: () => {\n\t\t\t\t\tSHOW_HIDE_MAP[this.id + \"_CHILDREN\"] = !SHOW_HIDE_MAP[this.id + \"_CHILDREN\"];\n\t\t\t\t\tthis.obj.setValue(this.formName, this.obj.getValue(this.formName));\n\t\t\t\t\t\n\t\t\t\t\tlet rotation = SHOW_HIDE_MAP[this.id + '_CHILDREN'] ? 'rotate(90deg)' : 'rotate(0deg)';\n\t\t\t\t\tdocument\n\t\t\t\t\t\t.getElementsByClassName(this.id + '_COLLAPSE_ICON')[0]\n\t\t\t\t\t\t.querySelectorAll('svg')[0]\n\t\t\t\t\t\t.style\n\t\t\t\t\t\t.transform = rotation;\n\t\t\t\t},\n\t\t\t},\n\t\t\tcontainer: {\n\t\t\t\tstyle: \"background-color: #eaeaea;\",\n\t\t\t\tclassName: this.id + '_COLLAPSE_ICON'\n\t\t\t},\n\t\t\tlayout: \"{content}\"\n\t\t};\n\t\t\n\t\tlet deleteBtn = {\n\t\t\ttype: 'button',\n\t\t\tid: this.id + \"_DELETE_BTN\",\n\t\t\tcontrol: {\n\t\t\t\tlayout: 'icon',\n\t\t\t\ticon: 'svgIcon=#alpha-icon-trash:icon,24',\n\t\t\t\tonClick: () => {\n\t\t\t\t\tlet parent = this.parent;\n\t\t\t\t\tif(parent) {\n\t\t\t\t\t\tlet selected = parent.selected();\n\t\t\t\t\t\tif (selected.type == 'array') {\n\t\t\t\t\t\t\tdelete selected.allArrayElems[this.id];\n\t\t\t\t\t\t} else if (selected.type == 'object') {\n\t\t\t\t\t\t\tdelete selected.dynamicElems[this.renderOptions.keyName];\n\t\t\t\t\t\t\tcallbacks.deleteTab(this.id, true);\n\t\t\t\t\t\t} else return;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcallbacks.reRender();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontainer: {\n\t\t\t\tstyle: \"background-color: #eaeaea;\",\n\t\t\t\tclassName: \"\"\n\t\t\t},\n\t\t\tlayout: \"{content}\"\n\t\t};\n\t\t\n\t\tlet label = {\n\t\t\ttype: 'html',\n\t\t\tcontrol: {\n\t\t\t\thtml: this.label,\n\t\t\t},\n\t\t\tcontainer: {\n\t\t\t\tclassName: '',\n\t\t\t\tstyle: ';background-color: #eaeaea;',\n\t\t\t},\n\t\t\tlayout: '{content}',\n\t\t};\n\t\t\n\t\tlet keyName = {\n\t\t\ttype: 'html',\n\t\t\tcontrol: {\n\t\t\t\thtml: this.renderOptions.keyName,\n\t\t\t},\n\t\t\tcontainer: {\n\t\t\t\tclassName: '',\n\t\t\t\tstyle: ';background-color: #eaeaea;',\n\t\t\t},\n\t\t\tlayout: '{content}',\n\t\t};\n\t\t\n\t\tlet comments = {\n\t\t\ttype: 'html',\n\t\t\tcontrol: {\n\t\t\t\thtml: this.comments,\n\t\t\t},\n\t\t\tcontainer: {\n\t\t\t\tclassName: '',\n\t\t\t\tstyle: 'width: 100%; background-color: #f5f5f5; margin: 1rem; padding: 1rem; font-style: italic;',\n\t\t\t},\n\t\t\tlayout: '{content}',\n\t\t};\n\t\t\n\t\tlet barItems = [];\n\t\tif (this.renderOptions.collapse) barItems.push(collapse);\n\t\tif (this.renderOptions.delete) barItems.push(deleteBtn);\n\t\tbarItems.push(label);\n\t\tif (this.renderOptions.keyName) barItems.push(keyName);\n\t\tif (Object.values(this.childMap).length > 1) barItems.push(dropdown);\n\t\tif (this.comments != '') barItems.push(comments);\n\t\t\n\t\n\t\t\n\t\treturn {\n\t\t\ttype: \"group\",\n\t\t\tid: this.id,\n\t\t\tcontainer: {\n\t\t\t\tstyle: \"width: 100%;display: flex; flex-direction: column; align-items: center; box-sizing: border-box; margin: 0px; padding: 0px; margin-bottom: 0.5rem; margin-top: 0.5rem\"\n\t\t\t},\n\t\t\t// In addition to the show hide map, we should take into account the function that the user has supplied \n\t\t\t// to show or hide. Both must return true to display the component.\n\t\t\tshow: () => {\n\t\t\t\tlet a = SHOW_HIDE_MAP[this.id] === undefined ? true : SHOW_HIDE_MAP[this.id];\n\t\t\t\tlet b = this.show(this);\n\t\t\t\treturn a && b;\n\t\t\t},\n\t\t\t// Multiple input values => display the dropdown options \n\t\t\t// Singlge input value => do not display the dropdown options\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'group',\n\t\t\t\t\tid: this.id + \"_HEADER\",\n\t\t\t\t\tcontainer: {\n\t\t\t\t\t\tstyle: `; \n\t\t\t\t\t\t\twidth: 95%; \n\t\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\t\tflex-direction: row; \n\t\t\t\t\t\t\tbox-sizing: border-box;\n\t\t\t\t\t\t\tbackground-color: #eaeaea;\n\t\t\t\t\t\t\talign-items: center;\n\t\t\t\t\t\t\tborder: 1px solid black;\n\t\t\t\t\t\t\tflex-wrap: wrap;\n\t\t\t\t\t\t`\n\t\t\t\t\t},\n\t\t\t\t\titems: barItems,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'group',\n\t\t\t\t\tshow: () => {\n\t\t\t\t\t\treturn SHOW_HIDE_MAP[this.id + \"_CHILDREN\"] === undefined ? true : SHOW_HIDE_MAP[this.id + \"_CHILDREN\"];\n\t\t\t\t\t},\n\t\t\t\t\tid: this.id + \"_CHILDREN\",\n\t\t\t\t\tcontainer: {\n\t\t\t\t\t\tstyle: `;\n\t\t\t\t\t\t\twidth: 95%;\n\t\t\t\t\t\t\tborder: 1px solid black;\n\t\t\t\t\t\t\tborder-top: none;\n\t\t\t\t\t\t\tbox-sizing: border-box;\n\t\t\t\t\t\t`\n\t\t\t\t\t},\n\t\t\t\t\titems: children,\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t}\n}\n\n// Given obj (dialog.object), the form name, and a config object (instance of Input or Value), \n// build and render a JSON Form.\nfunction buildFromConfig(obj, formName, configObj, style, listName) {\n\tconfigObj.preprocess(obj, formName, null);\n\tif (!obj.stateInfo) obj.stateInfo = {};\n\t\n\t\n\t// ID -> Input Object\n\tlet tabPanes = {};\n\t// Navigation Stack (empty means default tab)\n\tlet tabStack = [];\n\t\n\t// Callback to pass into the form so that we can have a button that serializes the form\n\tlet writeToFileCallback = () => {\n\t\ttry {\n\t\t\tlet json = JSON.stringify(configObj.serialize());\n\t\t\tlet file = new Blob([json], {type: 'application/json'});\n\t\t\t\n\t\t\tlet a = document.createElement('a');\n\t\t\tlet url = URL.createObjectURL(file);\n\t\t\ta.href = url;\n\t\t\ta.download = 'ConfigurationJSON';\n\t\t\tdocument.body.appendChild(a);\n\t\t\ta.click();\n\t\t\tsetTimeout(() => {\n\t\t\t\tdocument.body.removeChild(a);\n\t\t\t\twindow.URL.revokeObjectURL(url);\n\t\t\t}, 0);\n\t\t} catch(e) {\n\t\t\tobj.stateInfo.errorMessages = e.toString();\n\t\t}\n\t\treRender();\n\t};\n\t\n\tlet loadFromFileCallback = (data) => {\n\tdebugger;\n\t\tpopulateFromData(obj, formName, configObj, reRender, data);\n\t};\n\t\n\tlet saveGlobal = () => {\n\t\tlet data = encodeURIComponent(JSON.stringify(configObj.serialize()));\n\t\tobj.ajaxCallback('','','save_config_global', '', `listname=${listName}&config=${data}`)\n\t};\n\t\n\tlet saveUser = () => {\n\t\tlet data = encodeURIComponent(JSON.stringify(configObj.serialize()));\n\t\tobj.ajaxCallback('','','save_config_user', '', `listname=${listName}&config=${data}`)\n\t};\n\t\n\tlet bottomButtons = makeSerializeButton(obj, writeToFileCallback, loadFromFileCallback);\n\t\n\t// Callback to re render form. Saves current form data and restores it after re rendering.\n\tlet reRender = () => {\n\t\tconfigObj.setParent(null);\n\t\tlet oldData = configObj.getPopulateData();\n\t\t\n\t\tlet form = undefined;\n\t\ttry {\n\t\t\tform = makeTabGroup(tabPanes, tabStack, obj, style, allFormCallbacks, configObj.id);\n\t\t} catch(e) {\n\t\t\tobj.stateInfo.errorMessages = e.toString();\n\t\t}\n\t\trenderForm(obj, formName, [form, bottomButtons, makeErrorPane(obj)]);\n\t\t\n\t\tobj.setValue(formName, oldData);\n\t};\n\t\n\tfunction addObjAsTab(obj, tabTitle) {\n\t\tif (tabPanes[obj.id]) return;\n\t\t\n\t\ttabPanes[obj.id] = {object: obj, title: tabTitle};\n\t\ttabStack.push(obj.id);\n\t\treRender();\n\t}\n\t\n\t// Pop tabs off until we reach the tab we want\n\t// If 'includeSelf', then the tab with tabId is also deleted\n\tfunction deleteTab(tabId, includeSelf) {\n\t\twhile(tabStack.length > 0) {\n\t\t\tlet last = tabStack[tabStack.length - 1];\n\t\t\t\n\t\t\tif (last == tabId) {\n\t\t\t\tif (includeSelf) {\n\t\t\t\t\ttabStack.pop();\n\t\t\t\t\tdelete tabPanes[last];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\ttabStack.pop();\n\t\t\tdelete tabPanes[last];\n\t\t}\n\t\t\n\t\treRender();\n\t}\n\t\n\tlet allFormCallbacks = {\n\t\treRender: reRender,\n\t\taddObjAsTab: addObjAsTab,\n\t\tdeleteTab: deleteTab,\n\t};\n\t\n\tobj.stateInfo.callbacks = allFormCallbacks;\n\t\n\t// Build, render, populate form\n\ttabPanes[configObj.id] = {object: configObj, title: configObj.label};\n\t\n\tlet form;\n\t\n\ttry {\n\t\t// Don't need the form, but this sets some necessary information regarding dropdowns and child forms\n\t\tconfigObj.buildJSONForm(null);\n\t\tform = makeTabGroup(tabPanes, tabStack, obj, style, allFormCallbacks, configObj.id);\n\t} catch(e) {\n\t\tobj.stateInfo.errorMessages = e.toString();\n\t\tform = undefined;\n\t}\n\t\n\trenderForm(obj, formName, [form, bottomButtons, makeErrorPane(obj)]);\n\treturn reRender;\n}\n// Helper function to populate the form given an existing JSON object representing the data\nfunction populateFromData(obj, formName, input, reRender, data) {\n\ttry {\n\t\tlet d = input.getPopulateDataFromObj(data);\n\t\tobj.setValue(formName, JSON.stringify(d));\n\t} catch(e) {\n\t\tobj.stateInfo.errorMessages = e.toString();\n\t\tconsole.error(e);\n\t}\n\treRender();\n}\n\nfunction makeTabGroup(tabPaneObjs, tabStack, obj, style, callbacks, mainId) {\n\tlet panes = [];\n\tlet defaultId = undefined;\n\tlet navTo = tabStack.length > 0 ? tabStack[tabStack.length - 1] : mainId;\n\t\n\tfor (id in tabPaneObjs) {\n\t\tlet inner = tabPaneObjs[id].object.buildJSONForm(callbacks);\n\t\tlet pane = wrapInTab(inner, tabPaneObjs[id].title, id, mainId, obj);\n\t\t\n\t\tif (!defaultId && navTo == id) defaultId = pane.id;\n\t\t\n\t\tpanes.push(pane);\n\t}\n\t\n\treturn {\n\t\ttype: 'tab',\n\t\tid: 'TAB_' + uuidv4(),\n\t\tcontainer: {\n\t\t\ttheme: style,\n\t\t\ttabband: {\n\t\t\t\ttab: {initial: defaultId}\n\t\t\t}\n\t\t},\n\t\titems: panes,\n\t}\n}\n\nfunction wrapInTab(formJSON, title, id, mainId, obj) {\n\tlet inner;\n\t\n\t// Change in requirement means that we no longer want to x out tabs. But this code may be useful in the future.\n\t/* if (id == mainId) inner = title;\n\telse inner = `\n\t\t<div style=\"display: flex; flex-direction: row; align-items: center; justify-content: center;\">\n\t\t\t<button onclick=\"${obj.dialogId + '_DlgObj'}.stateInfo.callbacks.deleteTab('${id}');\" style = \"padding: 0px; height: 1.5em; width: 1.5em; margin-right: .5rem;\"> X </button>\n\t\t\t<p>${title}</p>\n\t\t</div>\n\t`; */\n\t\n\tinner = `\n\t\t<div onclick=\"${obj.dialogId + '_DlgObj'}.stateInfo.callbacks.deleteTab('${id}');\">\n\t\t\t<p>${title}</p>\n\t\t</div>\n\t`;\n\n\treturn {\n\t\ttype: 'pane',\n\t\tid: 'TAB_PANE_' + uuidv4(),\n\t\tdata: {from: ''},\n\t\tcontainer: {\n\t\t\ttitle: inner,\n\t\t\tstyle: \"display: flex; flex-direction: row; justify-content: center; align-items: center;\",\n\t\t},\n\t\titems: [formJSON],\n\t}\n}\n\nfunction makeErrorPane(obj) {\n\tlet style = 'background-color: red; color: white;';\n\tif (!obj.stateInfo.errorMessages || obj.stateInfo.errorMessages === '') style += 'display: none;';\n\t\n\treturn {\n\t\ttype: 'html',\n\t\tcontrol: {\n\t\t\thtml: \"<h3> Error </h3>\" + obj.stateInfo.errorMessages,\n\t\t},\n\t\tcontainer: {\n\t\t\tclassName: '',\n\t\t\tstyle: style,\n\t\t},\n\t\tlayout: '{content}',\n\t}\n}\n\n// Helper function to make a button to serialize the form data\nfunction makeSerializeButton(obj, writeToFileCallback, loadFromFileCallback) {\n\treturn {\n\t\ttype: \"group\",\n\t\t\"id\": \"SERIALIZE_GROUP_\" + uuidv4(),\n\t\tcontainer: {\n\t\t\tstyle: 'width: 100%; display: flex; flex-direction: row;',\n\t\t},\n\t\titems: [\n\t\t\t{\n\t\t\t\ttype: \"button\",\n\t\t\t\tid: \"SERIALIZE_BTN_\" + uuidv4(),\n\t\t\t\tcontrol: {\n\t\t\t\t\tlayout: \"text\",\n\t\t\t\t\thtml: \"<span class=\\\"\\\" style=\\\"\\\">Save</span>\",\n\t\t\t\t\t\"icon\": \"\",\n\t\t\t\t\t\"onClick\": () => {\n\t\t\t\t\t\tobj.stateInfo.errorMessages = '';\n\t\t\t\t\t\twriteToFileCallback();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontainer: {\n\t\t\t\t\tstyle: \";\",\n\t\t\t\t\tclassName: \"\"\n\t\t\t\t},\n\t\t\t\tdata: {from: ''},\n\t\t\t\tlayout: \"{content}\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"button\",\n\t\t\t\tid: \"LOAD_BTN_\" + uuidv4(),\n\t\t\t\tcontrol: {\n\t\t\t\t\tlayout: \"text\",\n\t\t\t\t\thtml: \"<span class=\\\"\\\" style=\\\"\\\"><label for=\\\"loadFileElem\\\"> Load </label></span>\",\n\t\t\t\t\ticon: \"\",\n\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\tobj.stateInfo.errorMessages = '';\n\t\t\t\t\t\tlet input = document.createElement('input');\n\t\t\t\t\t\tinput.type = 'file';\n\t\t\t\t\t\tinput.accept = 'application/json';\n\t\t\t\t\t\tinput.multiple = false;\n\t\t\t\t\t\tinput.onchange = _ => {\n\t\t\t\t\t\t\tlet files = Array.from(input.files);\n\t\t\t\t\t\t\tif (files.length > 0) {\n\t\t\t\t\t\t\t\tlet reader = new FileReader();\n\t\t\t\t\t\t\t\treader.readAsText(files[0]);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treader.onloadend = (res) => {\n\t\t\t\t\t\t\t\t\tlet text = reader.result;\n\t\t\t\t\t\t\t\t\tloadFromFileCallback(JSON.parse(text));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinput.click();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontainer: {\n\t\t\t\t\tstyle: \";\",\n\t\t\t\t\tclassName: \"\"\n\t\t\t\t},\n\t\t\t\tdata: {from: ''},\n\t\t\t\tlayout: \"{content}\"\n\t\t\t},\n\t\t]\n\t}\n}\n\n\nfunction makeSQLSaveButtons(obj, saveUser, saveGlobal) {\n\treturn {\n\t\ttype: \"group\",\n\t\t\"id\": \"SERIALIZE_GROUP_\" + uuidv4(),\n\t\tcontainer: {\n\t\t\tstyle: 'width: 100%; display: flex; flex-direction: row;',\n\t\t},\n\t\titems: [\n\t\t\t{\n\t\t\t\ttype: \"button\",\n\t\t\t\tid: \"SERIALIZE_BTN_\" + uuidv4(),\n\t\t\t\tcontrol: {\n\t\t\t\t\tlayout: \"text\",\n\t\t\t\t\thtml: \"<span class=\\\"\\\" style=\\\"\\\">Save to Current User</span>\",\n\t\t\t\t\t\"icon\": \"\",\n\t\t\t\t\t\"onClick\": () => {\n\t\t\t\t\t\tobj.stateInfo.errorMessages = '';\n\t\t\t\t\t\tsaveUser();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontainer: {\n\t\t\t\t\tstyle: \";\",\n\t\t\t\t\tclassName: \"\"\n\t\t\t\t},\n\t\t\t\tdata: {from: ''},\n\t\t\t\tlayout: \"{content}\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"button\",\n\t\t\t\tid: \"LOAD_BTN_\" + uuidv4(),\n\t\t\t\tcontrol: {\n\t\t\t\t\tlayout: \"text\",\n\t\t\t\t\thtml: \"<span class=\\\"\\\" style=\\\"\\\"><label for=\\\"loadFileElem\\\"> Save Globally </label></span>\",\n\t\t\t\t\ticon: \"\",\n\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\tobj.stateInfo.errorMessages = '';\n\t\t\t\t\t\tsaveGlobal();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontainer: {\n\t\t\t\t\tstyle: \";\",\n\t\t\t\t\tclassName: \"\"\n\t\t\t\t},\n\t\t\t\tdata: {from: ''},\n\t\t\t\tlayout: \"{content}\"\n\t\t\t},\n\t\t]\n\t}\n}",
        "layoutType": "ContainerWidth",
        "previewMode": "Default",
        "useDragScrolling": "Auto",
        "pageTitle": "UX",
        "waitMsg": {
            "message": {
                "text": "Wait...",
                "waitIcon": "css/A5System/Images/wait.gif"
            },
            "cssAnimation": {
                "size": "32"
            }
        },
        "globalSettings": {
            "labelWidth": "1in"
        },
        "serverSideEvents": {
            "canAjaxCallback": "",
            "afterAjaxCallback": ""
        },
        "onTimerEventInterval": 60,
        "securityDeniedAction": "Redirect to login page",
        "clientSideEvents": {
            "onAjaxCallbackFailed": "",
            "onAjaxCallbackNotAvailable": "",
            "onAjaxCallbackNotAllowed": "",
            "onBeforeCreate": "",
            "onServerSideEventHandlerError": "",
            "onFieldValidationError": "",
            "onInitializeComplete": "\nonload = () => {\n\tlet configInput = buildConfigForm([]);\n\tbuildFromConfig({dialog.object}, 'BUILDER', configInput, \"{dialog.Style}\", \"\");\n}\n\n\nfunction buildConfigForm(allColumns) {\n\tlet configUx = {dialog.object};\n\tlet singleInput = Input.singleInput;\n\tlet singleValue = Input.singleValue;\n\t\n\tlet btns = singleInput('array', 'List Buttons', {\n\t\tdefault: [],\n\t\tarrayInput: singleInput('object', 'List Button', {\n\t\t\tstaticKeys: {\n\t\t\t\tcolumnTitle: singleInput('string', 'Column Title'),\n\t\t\t\tonClick: singleInput('function', 'On Click Javascript'),\n\t\t\t\ttitle: singleInput('string', 'Button Text (Optional)', {default: undefined}),\n\t\t\t\ticon: singleInput('string', 'Button Icon (Optional)', {default: undefined}),\n\t\t\t}\n\t\t})\n\t});\n\t\n\tlet endpoint = singleInput('object', 'API Endpoint', {\n\t\tstaticKeys: {\n\t\t\tmethod: singleInput('string', 'HTTP Method (GET, POST, etc)'),\n\t\t\tendpoint: new Input({\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: new Value('object', {\n\t\t\t\t\t\t\tstaticKeys: {\n\t\t\t\t\t\t\t\ttemplate: singleInput('string', 'Template String'),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tdropdownLabel: 'Endpoint Template'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: new Value('object', {\n\t\t\t\t\t\t\tstaticKeys: {\n\t\t\t\t\t\t\t\tgetEndpointURL: singleInput('function', 'Function to get endpoint'),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tdropdownLabel: 'Endpoint Function'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tlabel: 'Endpoint',\n\t\t\t\tcomments: 'The endpoint can be a string template or a function accepting list filters and returning a string URL',\n\t\t\t\tvalidate: () => true,\n\t\t\t}),\n\t\t\tbody: singleInput('object', 'Body (Optional)', {\n\t\t\t\tstaticKeys: {},\n\t\t\t\tdynamicKeys: singleInput('string', 'Value'),\n\t\t\t}),\n\t\t\theaders: singleInput('object', 'Headers (Optional)', {\n\t\t\t\tstaticKeys: {},\n\t\t\t\tdynamicKeys: singleInput('string', 'Value'),\n\t\t\t}),\n\t\t\tcallback: singleInput('function', 'On Complete Callback (Optional)', {default: undefined}),\n\t\t},\n\t});\n\t\n\tdebugger;\n\tlet mappings = new Input({\n\t\tvalues: singleValue(new Value('array', {\n\t\t\tdefault: [],\n\t\t\tarrayInput: singleInput('object', 'Column Settings', {\n\t\t\t\tstaticKeys: {\n\t\t\t\t\tcolumnName: singleInput('string', 'Column Name'),\n\t\t\t\t\tdisplayName: singleInput('string', 'Column Name to Display (Optional)', {default: undefined}),\n\t\t\t\t\tinList: singleInput('boolean', 'Show in List? (Optional)', {default: true}),\n\t\t\t\t\tinDetailView: singleInput('boolean', 'Show in Detail View? (Optional)', {default: true}),\n\t\t\t\t\teditType: singleInput('dropdown', 'Data Type (Optional)', {\n\t\t\t\t\t\tdefault: 'text',\n\t\t\t\t\t\tdropdownItems: ['text', 'dropdown', 'time', 'datetime', 'bool', 'number'].map(x => { return { value: x, text: x }}),\n\t\t\t\t\t}),\n\t\t\t\t\twidth: singleInput('string', 'Column Width (Optional)', {default: undefined}),\n\t\t\t\t\ttemplate: singleInput('string', 'Column Template (Optional)', {default: undefined}),\n\t\t\t\t\tdropdownConfig: singleInput('object', 'Dropdown Config (Optional)', {\n\t\t\t\t\t\tdefault: undefined,\n\t\t\t\t\t\tstaticKeys: {\n\t\t\t\t\t\t\tchoices: new Input({\n\t\t\t\t\t\t\t\tvalues: singleValue(new Value('array', {\n\t\t\t\t\t\t\t\t\tarrayInput: singleInput('string', 'Dropdown Item'),\n\t\t\t\t\t\t\t\t\tdefault: [],\n\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\tlabel: 'Dropdown Choices',\n\t\t\t\t\t\t\t\tcomments: '',\n\t\t\t\t\t\t\t\tvalidate: () => true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tfromColumn: singleInput('string', 'Derive From Column', {default: undefined}),\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t}, {\n\t\t\t\tonPopulate: (input, d) => {\n\t\t\t\t\tlet name = d.displayName ? d.displayName : d.columnName;\n\t\t\t\t\tinput.label = name + \" options\";\n\t\t\t\t},\n\t\t\t}),\n\t\t})),\n\t\tlabel: \"List Mappings\",\n\t\tcomments: \"Add or remove columns for the list\",\n\t\tvalidate: () => true,\n\t});\n\t\n\treturn singleInput('object', 'List Configuration', {\n\t\tstaticKeys: {\n\t\t\tname: singleInput('string', 'List Name'),\n\t\t\tonInitialize: singleInput('function', 'On Initialize Callback (Optional)', {default: undefined}),\n\t\t\tdataSource: new Input({\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: new Value('object', {\n\t\t\t\t\t\t\tstaticKeys: {\n\t\t\t\t\t\t\t\ttype: singleInput('dropdown', 'Input Type', {dropdownItems: [{value: 'json', text: 'json'}]}),\n\t\t\t\t\t\t\t\tendpoints: singleInput('object', 'Endpoints', {dynamicKeys: endpoint, staticKeys: {}, default: {}}, {\n\t\t\t\t\t\t\t\t\tcomments: 'Key can be fetch, search, add, update, or delete'\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tpreprocess: singleInput('function', 'Preprocess Function (Optional)', {default: undefined}),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tdropdownLabel: 'Fetch from API',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: new Value('object', {\n\t\t\t\t\t\t\tstaticKeys: {\n\t\t\t\t\t\t\t\ttype: singleInput('dropdown', 'Input Type', {dropdownItems: [{value: 'json', text: 'json'}]}),\n\t\t\t\t\t\t\t\ttable: singleInput('string', 'Table Name'),\n\t\t\t\t\t\t\t\tpreprocess: singleInput('function', 'Preprocess Function (Optional)', {default: undefined}),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tdropdownLabel: 'Fetch from SQL',\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tlabel: \"Data Source\",\n\t\t\t\tcomments: \"\",\n\t\t\t\tvalidate: () => true\n\t\t\t}),\n\t\t\tmappings: mappings,\n\t\t\tsearchOptions: singleInput('object', 'Search Options', {\n\t\t\t\tstaticKeys: {\n\t\t\t\t\tpaginate: singleInput('object', 'Pagination', {\n\t\t\t\t\t\tdefault: undefined,\n\t\t\t\t\t\tstaticKeys: {pageSize: singleInput('number', 'Page Size') }\n\t\t\t\t\t}),\n\t\t\t\t\tadvancedSearch: singleInput('boolean', 'Do Advanced Search?', {default: false}),\n\t\t\t\t\tserverSearch: singleInput('boolean', 'Do Server-Side Search?', {default: false}),\n\t\t\t\t\tonlyInclude: singleInput('array', 'Only include these search columns:', {\n\t\t\t\t\t\tarrayInput: singleInput('string', 'Column Name'),\n\t\t\t\t\t\tdefault: []\n\t\t\t\t\t}),\n\t\t\t\t\tonlyExclude: singleInput('array', 'Only exclude these search columns:', {\n\t\t\t\t\t\tarrayInput: singleInput('string', 'Column Name'),\n\t\t\t\t\t\tdefault: []\n\t\t\t\t\t}),\n\t\t\t\t}\n\t\t\t}),\n\t\t\tbuttons: btns,\n\t\t}\n\t});\n}\n",
            "beforePrepare": "",
            "afterPrepare": "",
            "afterValidate": "",
            "onTabPaneChanged": "",
            "beforeRptSectionRowPrepare": "",
            "afterRptSectionRowPrepare": "",
            "canRptSectionRowAdd": "",
            "afterRptSectionRowAdd": "",
            "canRptSectionRowDelete": "",
            "afterRptSectionRowDelete": "",
            "onStateChange": "",
            "onDataStateChange": "",
            "afterControlBasedOnClientSideDataCacheRefreshed": "",
            "onControlFocus": "",
            "onRptSectionFocus": "",
            "onRptSectionRowChange": "",
            "canResetForm": "",
            "afterResetForm": "",
            "canRecordNavigate": "",
            "afterRecordNavigate": "",
            "onSynchronizeDialog": "",
            "afterPopulateFromTable": "",
            "afterPopulateNewRecord": "",
            "onRenderComplete": "",
            "onAndroidBackButton": "",
            "onPanelActivate": "",
            "afterSaveToRepository": "",
            "afterLoadFromRepository": "",
            "afterGoogleVisualization": "",
            "canDeleteParentRecord": "",
            "afterDeleteParentRecord": "",
            "onOrientationChange": "",
            "onKeyboard": "",
            "onCordovaReady": "",
            "onPhoneGapReady": "",
            "onImageError": "",
            "onSignatureCaptureToggle": "",
            "onSignatureCaptureAccept": "",
            "onTimer": "",
            "beforeOnTimer": "",
            "canLogin": "",
            "afterLogin": "",
            "afterCordovaLoginWithGoogle": "",
            "afterFailedLogin": "",
            "canLogout": "",
            "afterLogout": "",
            "onSessionTimeoutWarning": "",
            "onServerSideListSummaryCompute": "",
            "beforeHTMLReportExport": "",
            "onConnectionChange": "",
            "appCache_cached": "",
            "appCache_checking": "",
            "appCache_downloading": "",
            "appCache_error": "",
            "appCache_noupdate": "",
            "appCache_obsolete": "",
            "appCache_progress": "",
            "appCache_updateready": "",
            "onOAuthCompleted": "",
            "onControlBlur": "",
            "onControlChange": "",
            "onBeforePersistControlValuesToLocalStorage": "",
            "onPersistControlValuesToLocalStorage": "",
            "onRestoreVariablesFromLocalStorage": "",
            "onRestoreComponentStateFromLocalStorage": "",
            "localStorageEncryption": "",
            "localStorageDecryption": "",
            "securityNotAuthenticated": "",
            "securityPermissionDenied": "",
            "webSocketOnMessage": "",
            "webSocketServerClose": "",
            "webSocketSendMessageFail": "",
            "onOAuthAuthorize": "",
            "afterGoogleAddressSelect": "",
            "onBeforeClientSideDataCacheRead": "",
            "afterClientSideDataCacheAjaxCallback": "",
            "onWatchEvent": "",
            "onWindowResize": "",
            "onPusherMessage": "",
            "onDestroy": ""
        },
        "onlyValidateChangedFields": true,
        "edit": {
            "field_error_style": {
                "type": "Block",
                "showWarning": true,
                "icon": "<Specified by Style>",
                "controlContainer_classname": ""
            },
            "row_errors_window_title": "Error",
            "row_errors_window_style": "color: red; width: 6in; height: 2in;",
            "fieldValidationErrorMessage": "Form has errors."
        },
        "activeLanguage": "<Default>",
        "datePicker": {
            "dayNames": "Sun,Mon,Tue,Wed,Thu,Fri,Sat",
            "monthNames": "January,February,March,April,May,June,July,August,September,October,November,December",
            "firstDayOfWeek": 1,
            "todayButtonText": "Today",
            "closeButtonText": "Close"
        },
        "clientSideDateFormat": "MM/dd/yyyy&&0h:0m AM",
        "fontScalingOption": "All",
        "helpTableType": "DBF",
        "fieldHelpWindowStyle": "modal-resizeable",
        "customization": {
            "resetFormMessage": "Are you sure you want to reset the form?",
            "resetFormTitle": "Warning",
            "resetFormIcon": "<Specified by Style>",
            "resetFormYesButton": "Yes",
            "resetFormNoButton": "No",
            "windowTitleDirection": "ltr",
            "dirtyWarning": "You must first save your changes or cancel changes by clicking the Reset button.",
            "dirtyWarningTitle": "Notice",
            "dirtyWarningIcon": "<Specified by Style>",
            "deleteRecordWarningTitle": "Delete Record",
            "deleteRecordWarningMessage": "Are you sure you want to delete this record?"
        },
        "dataBinding": {
            "computeDataBindingCodeAtDesignTime": true,
            "computeDataBindingCodeAtDesignTimePrompt": "Prompt",
            "autoRefreshSchemaOnLoad": true,
            "autoRefreshPromptFirst": "Prompt",
            "precalc": {
                "flagCodeComputed": false
            },
            "computeDataBindingEveryTimeComponentIsSaved": true,
            "flagBindToJSONForm": false,
            "auto_define_jsonform": false
        },
        "info": {
            "createdBy": "lukes",
            "dateCreated": "2024-7-26",
            "dateLastEdited": "2024-7-26",
            "revisionnumber": 1153
        },
        "CSSSubThemeDefinition": ".json-form-dropdown-hidden {\n\toverflow: hidden;\n\theight: 0px;\n}",
        "flagShowCommentsInTree": true,
        "treeCommentOffset": "6",
        "renderUXLocation": {
            "type": "window",
            "sizeToElement": true
        },
        "checkSessionEvery": 1,
        "warningIntervalBeforeExpiration": 1,
        "sessionTimeOutWarningMessage": "Your session will expire in {secondsToSessionEnd} seconds. Click the button to extend your session.",
        "sessionExtendSessionButtonLabel": "Extend Session",
        "sessionTimeoutWarningDialogTitle": "Warning",
        "sessionHasExpiredMessage": "Your session has expired.",
        "sessionHasExpiredButtonLabel": "OK",
        "sessionHasExpiredAction": "Nothing",
        "sessionHasExpiredRedirectPage": "<self>",
        "sessionHasExpiredDialogTitle": "Notice",
        "sessionHasExpiredOKButtonJavascript": "<ReloadThisPage>",
        "login": {
            "errorMessageStyle": "color: red;",
            "logoutDoesFullPageReload": true,
            "persisent": false,
            "persistentLoginAlwaysAllowed": "",
            "persistentduration": 60000,
            "afterLogin": "RedirectToTargetPage",
            "afterLoginRedirectPage": "<Default>",
            "afterLoginTargetPanel": "",
            "persistentLogin_loginPanel": "",
            "securityOptionsJSON": "",
            "twofactoreventfunctionname": "",
            "hasResetPasswordFeature": false,
            "hasCreateAccountFeature": false,
            "otherFeaturesJSON": "",
            "createAccountSettingsJSON": "",
            "hasLoginWithGoogle": false,
            "googleSettingsJSON": "",
            "cognitoSettingsJSON": "",
            "hasLoginWithCognito": false
        },
        "applyResponsiveDesignSettings": true,
        "responseDesignRulesMode": "FirstTrue",
        "localStorage": {
            "namespace": "<Default>",
            "__version": 1,
            "workingPreviewTestingMode": "Browser",
            "variablesToNotPersist": ""
        },
        "securityAppliedClientSide": true,
        "preRenderUXatDesignTime": true,
        "preRenderComputeWhen": "Every time component is saved",
        "page_fields": [
            {
                "controlType": "layout_directive_button",
                "display": "{B=White,Light Blue}{Data=fc6de9ee-8ff2-4eef-b6f5-94c8de9b5a79}{I:'$$control.button'} [Button: Load Configuration]<<break>>",
                "idInternal": "fc6de9ee-8ff2-4eef-b6f5-94c8de9b5a79",
                "crc": "4294954847",
                "precalc": {
                    "ControlHTML": "<button type=\"button\" id=\"{dialog.componentName}.V.R{dialog.rownumber}.BUTTON_1\"  style=\"\"></button>",
                    "DesignViewHTML": ""
                },
                "isCollapsed": false,
                "containerStartIndex": 0,
                "v": {
                    "localxbasic": "",
                    "localjavascript": "",
                    "buttonText": "Load Configuration",
                    "Class": "<Default>",
                    "cssGridItemPropertiesJSON": "",
                    "BreakType": "After",
                    "breakHeight": ".1in",
                    "breakHorizontalSpace": ".1in",
                    "id": "BUTTON_1",
                    "hide": true,
                    "advancedButtonStyling": true,
                    "labelClass": "<Default>",
                    "labelPosition": "None",
                    "labelWidth": "{Global.LabelWidth}",
                    "labelAlignment": "Left",
                    "advancedButton": {
                        "subTheme": "base",
                        "buttonClass": "",
                        "buttonClassDisabled": "",
                        "buttonClassHover": "",
                        "buttonClassPressed": "",
                        "buttonInlineStyle": "",
                        "buttonstyle": "Text only",
                        "disabledImageName": "",
                        "hoverImageName": "",
                        "displayDropdownIconOnButton": false,
                        "displayAsSplitButton": false,
                        "showBadge": false,
                        "badgeSettingsJSON": "",
                        "hyperlinkClass": "[class.gridHyperlinkButton]",
                        "hyperlinkImagePosition": "None",
                        "hyperlinkInlineStyle": "",
                        "imageClass": "",
                        "imageInlineStyle": "",
                        "imageName": "",
                        "pressedImageName": "",
                        "textClass": "",
                        "textInlineStyle": "",
                        "type": "Button"
                    },
                    "securityGroups": "",
                    "showHideExpn": "",
                    "clientSideconditionalStyle": "",
                    "CalcExpression": "",
                    "EnableExpression": "",
                    "ShowExpression": "",
                    "abstractJavascript": {
                        "click": "/* actionJavascript:a62a58a3-f469-44b1-a85a-a7bf472df8b9      */\n{dialog.object}.stateInfo.errorMessages = '';\n\nlet input = document.createElement('input');\ninput.type = 'file';\ninput.accept = 'application/text';\ninput.multiple = false;\ninput.onchange = _ => {\n\tlet files = Array.from(input.files);\n\tif (files.length > 0) {\n\t\tlet reader = new FileReader();\n\t\treader.readAsText(files[0]);\n\t\t\n\t\treader.onloadend = (res) => {\n\t\t\tlet text = reader.result;\n\t\t\tbuildFromConfig({dialog.object}, \"BUILDER\", eval(text), \"{dialog.Style}\");\n\t\t}\n\t}\n}\ninput.click();"
                    },
                    "precalc": {
                        "javascriptClientSideWatches": "",
                        "javascriptAbstractSetupCode": "$e.add('{dialog.componentName}.V.R{dialog.rownumber}.BUTTON_1',A5.d.evnts.click,function(e) {\nvar _disabled = this.disabled; if(typeof _disabled == 'undefined') _disabled = false; if(!_disabled) {;var flagLocked = false; if (typeof this._locked != 'undefined') flagLocked = this._locked;  if(!flagLocked) {{dialog.object}.stateInfo.errorMessages = '';\nlet input = document.createElement('input');\ninput.type = 'file';\ninput.accept = 'application/text';\ninput.multiple = false;\ninput.onchange = _ => {\n let files = Array.from(input.files);\n if (files.length > 0) {\n  let reader = new FileReader();\n  reader.readAsText(files[0]);\n  reader.onloadend = (res) => {\n   let text = reader.result;\n   buildFromConfig({dialog.object}, \"BUILDER\", eval(text), \"{dialog.Style}\");\n  }\n }\n}\ninput.click(); } ; this._locked = true; flagLocked = true; var that = this; setTimeout(function() { that._locked = false; },300);}\n},this,false,'{dialog.componentName}.V.R{dialog.rownumber}.BUTTON_1');\n",
                        "javascriptAdvancedButton": "",
                        "javascriptAdvancedButton_control": "{dialog.object}._buttons['BUTTON_1'] = new A5.Button({\n\tlayout: 'text',\n\thtml: 'Load Configuration',\n\tonClick: function() { \n\n},\n\ttheme: '{grid.style}:base'\n});",
                        "javascriptAdvancedButton_bind": "{dialog.object}._buttons['BUTTON_1'].bind('{DIALOG.COMPONENTNAME}.V.R{DIALOG.ROWNUMBER}.BUTTON_1');"
                    },
                    "info": {
                        "level": 0,
                        "isContainerStart": false,
                        "isTabControlStart": false,
                        "isContainerEnd": false,
                        "isTabControlEnd": false,
                        "isTabPaneEnd": false,
                        "lastItemInTabPane": false,
                        "inContainer": false,
                        "inCSSGridContainer": false,
                        "inRepeatingSection": false,
                        "inTabPane": false,
                        "parentContainerID": "",
                        "repeatingSectionParentId": "",
                        "parentTabID": "",
                        "parentTabPaneID": "",
                        "index": 1,
                        "color": "",
                        "icon": "$$control.button",
                        "displayText": "[Button: Load Configuration]",
                        "parentPanelCardId": "",
                        "break": true,
                        "display": "{B=White,Light Blue}{Data=fc6de9ee-8ff2-4eef-b6f5-94c8de9b5a79}{I:'$$control.button'} [Button: Load Configuration]<<break>>"
                    },
                    "javascript": {
                        "onclick": ""
                    },
                    "controlContainerStyle": "",
                    "listview": {
                        "allchildren": ""
                    }
                }
            },
            {
                "controlType": "layout_directive_ContainerBegin",
                "display": "{C=#0+0+127,White}{B=White,Light Blue}{F=+B}{Data=1f6db566-bdac-444a-93b6-93a142e117e1}{I:'$$format.border.style.dash'} [Container: FLEXLAYOUT_1]",
                "idInternal": "1f6db566-bdac-444a-93b6-93a142e117e1",
                "lastIndex": 4,
                "crc": "4294932750",
                "v": {
                    "container": {
                        "ID": "FLEXLAYOUT_1",
                        "style": "display: flex; justify-content: center; align-content: center; box-sizing: border-box; margin: 2px; padding: 2px;",
                        "contentAlignment": "Center",
                        "width": "100%;",
                        "nonFloating": true,
                        "buttonGroup": {
                            "orientation": "Horizontal"
                        },
                        "subType": "None",
                        "contentVerticalAlign": "Center",
                        "CSSGridJSON": "",
                        "useFlex": true,
                        "useFlexLeft": false,
                        "alignItems": "",
                        "containersettype": "",
                        "edgeOffset": "",
                        "allowScrolling": false,
                        "scrolling": {
                            "axis": "Both",
                            "stopPropogation": false,
                            "isDefined": false,
                            "indicator": {
                                "v": {
                                    "show": true,
                                    "className": "",
                                    "barClassName": "",
                                    "location": "right",
                                    "offset": "0px",
                                    "top": "0px",
                                    "bottom": "0px"
                                },
                                "h": {
                                    "show": true,
                                    "className": "",
                                    "barClassName": "",
                                    "location": "top",
                                    "offset": "0px",
                                    "left": "0px",
                                    "right": "0px"
                                }
                            }
                        },
                        "pull": {
                            "isDefined": false,
                            "javascript": {
                                "onPullRelease": "",
                                "onPullEnd": "",
                                "onPull": ""
                            },
                            "pullpastEnd": {
                                "YSetting": "auto",
                                "XSetting": "auto",
                                "duration": 1000
                            }
                        },
                        "constrainTabKey": "No",
                        "constrainJavascriptFunction": ""
                    },
                    "precalc": {
                        "javascriptAbstractSetupCode": ""
                    },
                    "localxbasic": "",
                    "localjavascript": "",
                    "cssGridItemPropertiesJSON": "",
                    "info": {
                        "level": 0,
                        "isContainerStart": true,
                        "isTabControlStart": false,
                        "isContainerEnd": false,
                        "isTabControlEnd": false,
                        "isTabPaneEnd": false,
                        "lastItemInTabPane": false,
                        "inContainer": false,
                        "inRepeatingSection": false,
                        "inTabPane": false,
                        "parentContainerID": "",
                        "repeatingSectionParentId": "",
                        "parentTabID": "",
                        "parentTabPaneID": "",
                        "index": 2,
                        "color": "{C=#0+0+127,White}{B=White,Light Blue}{F=+B}",
                        "icon": "$$format.border.style.dash",
                        "displayText": "[Container: FLEXLAYOUT_1]",
                        "parentPanelCardId": "",
                        "lastID": "f70ecb7f-02b0-41d2-ace8-f2176f161325",
                        "break": false,
                        "display": "{C=#0+0+127,White}{B=White,Light Blue}{F=+B}{Data=1f6db566-bdac-444a-93b6-93a142e117e1}{I:'$$format.border.style.dash'} [Container: FLEXLAYOUT_1]",
                        "inCSSGridContainer": false
                    },
                    "listview": {
                        "allchildren": ""
                    },
                    "_analyzecontainersjs": true
                },
                "precalc": {
                    "ControlHTML": "<div \tid=\"{dialog.componentName}.V.R{dialog.rownumber}.FLEXLAYOUT_1\"   \n\t\t\tA5-containerType=\"none\"\n\t\t\tclass=\"\"  style=\"padding: 2px; margin: 2px; display: flex; width: 100%; box-sizing: border-box; justify-content: center; align-content: center; align-items: center; \"  ><!--DIV for Container control-->",
                    "DesignViewHTML": ""
                },
                "isCollapsed": false,
                "containerStartIndex": 0
            },
            {
                "controlType": "dialog_formcontrol",
                "display": "{B=White,Light Blue}{I:'vertline'}{Data=bb9ffb39-e228-41c8-8fbe-d36c49f528ae}{I:'$$control.form'} [BUILDER]<<break>>",
                "idInternal": "bb9ffb39-e228-41c8-8fbe-d36c49f528ae",
                "parentContainer": 2,
                "displayODtree": "{B=White,Light Blue}{I:'vertline'}{Data=bb9ffb39-e228-41c8-8fbe-d36c49f528ae}{I:'$$control.form'} [BUILDER]<<break>>",
                "crc": "4294901958",
                "v": {
                    "controlType": "formbox",
                    "variableName": "BUILDER",
                    "type": "Character",
                    "maxLength": -1,
                    "watermark": {
                        "text": "<FieldLabel>"
                    },
                    "precalc": {
                        "javascriptAbstractSetupCode": "",
                        "_jsOnChangeFunction": "function onChange_BUILDER_bb9ffb39e22841c88fbed36c49f528ae(_dlgObj){if(_dlgObj.executeWatchEventForControl) _dlgObj.executeWatchEventForControl('BUILDER');};"
                    },
                    "lookup": {
                        "flagIsdefined": false,
                        "editCombo": {
                            "openLookupOnFocus": false
                        }
                    },
                    "textboxAutocorrect": true,
                    "textboxAutoCapitalize": true,
                    "label": "Builder",
                    "class": "<Default>",
                    "breakType": "After",
                    "breakHeight": ".1in",
                    "breakHorizontalSpace": ".1in",
                    "labelClass": "<Default>",
                    "labelPosition": "None",
                    "labelWidth": "{Global.LabelWidth}",
                    "labelAlignment": "Center",
                    "repeatingSectionColumnHeading": "<FieldLabel>",
                    "embeddedJavascriptControl": true,
                    "helpIcon": "images/$$generic.help.png.a5image",
                    "showHelpIcon": "None",
                    "helpIconBehavior": "ShowHelpOnClick",
                    "clientSideFormat": {
                        "type": "Mask",
                        "allowMultiple": false,
                        "separatorCharacter": ",",
                        "trimTrailingSeparatorOnBlur": false
                    },
                    "onChange_ValidationOption": "Client-side only",
                    "dataBinding": {
                        "updateable": true,
                        "image": {
                            "type": "JPG",
                            "noImageFoundImage": "<None>",
                            "newRecordImage": "<None>"
                        },
                        "ink": {
                            "hasbackgroundimage": false,
                            "backgroundimage": "",
                            "inkunits": 1
                        },
                        "encrypted": false,
                        "encryptionkey": ""
                    },
                    "textboxSubTheme": "",
                    "getFunction": "",
                    "setFunction": "",
                    "datePicker": {
                        "displayTimePicker": false,
                        "openMethod": "ClickIcon",
                        "dateFormat": "<Default>",
                        "iconNumber": 2,
                        "OKButtonLabel": "OK",
                        "CancelButtonLabel": "Cancel",
                        "userMustSelectFromDatePicker": false,
                        "multiple": {
                            "allow": false,
                            "separators": ".."
                        },
                        "hasMask": false,
                        "format": {
                            "mask": ""
                        },
                        "timePickerOptionsDefined": false,
                        "display": false,
                        "useComboBoxes": true,
                        "lowYear": 1950,
                        "highYear": 2050,
                        "switchYear": 30,
                        "lowDate": "",
                        "highDate": "",
                        "disabledDays": "",
                        "disabledDates": ""
                    },
                    "displayAsSlider": false,
                    "flags": {
                        "clientSideDefinition": false
                    },
                    "localXbasic": "",
                    "localJavascript": "",
                    "controlContainerStyle": "",
                    "cssGridItemPropertiesJSON": "",
                    "formbox": {
                        "height": "98%",
                        "width": "98%",
                        "fillPanelContainer": false,
                        "definitionJSON": "{\n\t\"_state\": {\n\t\t\"showPane\": {\n\t\t\t\"css\": false,\n\t\t\t\"javascript\": false,\n\t\t\t\"items\": true,\n\t\t\t\"preview\": true\n\t\t},\n\t\t\"tabPage\": \"FormLayout\",\n\t\t\"flagShowLineNumbers\": false,\n\t\t\"LayoutSelected_n\": 1,\n\t\t\"fieldSelected_n\": 0,\n\t\t\"layoutGenieFieldSelected_c\": \"\",\n\t\t\"fieldselected_c\": \"\",\n\t\t\"itemSelected_c\": \"\",\n\t\t\"groupSelected_c\": \"\",\n\t\t\"cssMode\": 1,\n\t\t\"jsmode\": 1,\n\t\t\"selected_javascriptLocal_c\": \"\",\n\t\t\"flagPreviewOpen\": false\n\t},\n\t\"formview\": {\n\t\t\"datasource\": {\n\t\t},\n\t\t\"formProperties\": {\n\t\t\t\"hasMultipleLayouts\": false,\n\t\t\t\"theme\": \"{dialog.style}\",\n\t\t\t\"item\": {\n\t\t\t\t\"className\": \"listItem\",\n\t\t\t\t\"label\": {\n\t\t\t\t\t\"style\": \"\"\n\t\t\t\t},\n\t\t\t\t\"description\": {\n\t\t\t\t\t\"style\": \"\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"javascript\": {\n\t\t\t\t\"onChange\": \"\",\n\t\t\t\t\"onInitialize\": \"\"\n\t\t\t},\n\t\t\t\"responsiveRulesJSON\": \"\",\n\t\t\t\"namedLayoutsJSON\": \"[]\"\n\t\t},\n\t\t\"fields\": [],\n\t\t\"items\": [],\n\t\t\"groups\": [],\n\t\t\"layouts\": [\n\t\t{\n\t\t\t\"layoutName\": \"default\",\n\t\t\t\"defaultLayout\": false,\n\t\t\t\"layoutDataType\": \"Data\",\n\t\t\t\"layoutDefinition\": \"\",\n\t\t\t\"responsiveRulesJSON\": \"\",\n\t\t\t\"defaultTemplate\": \"\",\n\t\t\t\"postProcessJavascript\": \"\",\n\t\t\t\"layoutType\": \"Genie\",\n\t\t\t\"last_layoutGenieFieldSelected_c\": \"\",\n\t\t\t\"itemsArray\": [],\n\t\t\t\"precalc\": \"*gzip:H4sIAAAAAAAAC4VTYWvbMBD9Pth/EBojGzgsGf1kt4Wl3cbYiEtpt0EbhmKdYzFZEpIcNxj/9+mUeEkobb+Y80nv3bt3p7uO+o0BmhK6sroxNKGC49+XT98/f73Ob69CptDKM6HAhoOOOr+REcCFM5Jt0lLCQ0bwO+bCQuGFVqnVbZa9eGObK6Vu09YykxHaJzQgdOOxAqrxULsQ3+2FLhvvtfqvdHZ7c5PP/0x3Qq2WUeaeRRTxduVrPKGnzjBFCsmcO7un95TEhmJ4zhwvTz/ghXPkR2BAuPXqWwjP3jBpKjbG9NhCrddwIWwhYaYtB5tiPvl4EoBaXUhR/A3YslGx23fvSUemWd8/6WaG+lHUnNUxcWxFhzBQvg/pgNp6+GM47sLdwR4TKgfywZ7L6/zqMv81n+W/o0eu0u3OWw6usMIgU9Ti4WGw/XlZnHkWEaXVNSaDb5GvZI30P5lsYMcDyjUWf7xtIKFrJkUAw6EzhvkqWSMGPcpev+pj40uQR6K2JYaRvChx71ykGi+h1EHI8Y6E5Syg0pLHYSBpK7ivMJ5OJm8Pi9CDrp0tcCMXCa2ZwWgU5Y+SEYodLZ6bMi58Og2r8Fg0DnYYYlzWJ1kqEKvKp2Rihme1ZE64lKDqjITFtPFNVYJzUI9KhVfWL/rFP9NQtxT8AwAA\"\n\t\t}],\n\t\t\"javascriptLocal\": [],\n\t\t\"css\": \"\",\n\t\t\"Javascript\": \"\"\n\t}\n}"
                    },
                    "info": {
                        "level": 1,
                        "isContainerStart": false,
                        "isTabControlStart": false,
                        "isContainerEnd": false,
                        "isTabControlEnd": false,
                        "isTabPaneEnd": false,
                        "lastItemInTabPane": false,
                        "inContainer": true,
                        "inRepeatingSection": false,
                        "inTabPane": false,
                        "parentContainerID": "1f6db566-bdac-444a-93b6-93a142e117e1",
                        "repeatingSectionParentId": "",
                        "parentTabID": "",
                        "parentTabPaneID": "",
                        "index": 3,
                        "color": "",
                        "icon": "$$control.form",
                        "displayText": "[BUILDER]",
                        "parentPanelCardId": "",
                        "break": true,
                        "display": "{B=White,Light Blue}{I:'vertline'}{Data=bb9ffb39-e228-41c8-8fbe-d36c49f528ae}{I:'$$control.form'} [BUILDER]<<break>>",
                        "inCSSGridContainer": false
                    }
                },
                "precalc": {
                    "ControlHTML": "<div class=\"A5CWLayout\" style=\"width: 98%\" >\n\t<!--FldS-->\t\t<div id=\"{grid.componentname}.V.R{grid.rownumber}.BUILDER\" class=\"{dialog.componentName}_BUILDER\"></div>\n\t\t<!--FldE-->\n</div><!--breakbegin--><br  style=\"clear:both; \" /><!--breakend-->",
                    "DesignViewHTML": "",
                    "columnInfo": "'BUILDER': {info: {controlType: 'formbox'}, hiddenVal: false, type: 'input,label', isCalc: false, hlp: '', isArray: false, dataType: 'C'  }\n"
                },
                "isCollapsed": false,
                "parentIsCollapsed": false,
                "containerStartIndex": 0
            },
            {
                "controlType": "layout_directive_ContainerEnd",
                "display": "{C=#0+0+127,White}{B=White,Light Blue}{F=+B}{Data=f70ecb7f-02b0-41d2-ace8-f2176f161325}{I:'vertLineCap'} [Container End: FLEXLAYOUT_1]<<break>>",
                "idInternal": "f70ecb7f-02b0-41d2-ace8-f2176f161325",
                "displayODtree": "{C=#0+0+127,White}{B=White,Light Blue}{F=+B}{Data=f70ecb7f-02b0-41d2-ace8-f2176f161325}{I:'vertLineCap'} [Container End: FLEXLAYOUT_1]<<break>>",
                "crc": "4294924000",
                "v": {
                    "container": {
                        "BreakType": "After",
                        "BreakHeight": ".1in",
                        "breakHorizontalSpace": ".1in",
                        "parentIsNonFloating": true
                    },
                    "info": {
                        "level": 0,
                        "isContainerStart": false,
                        "isTabControlStart": false,
                        "isContainerEnd": true,
                        "isTabControlEnd": false,
                        "isTabPaneEnd": false,
                        "lastItemInTabPane": false,
                        "inContainer": false,
                        "inRepeatingSection": false,
                        "inTabPane": false,
                        "parentContainerID": "",
                        "repeatingSectionParentId": "",
                        "parentTabID": "",
                        "parentTabPaneID": "",
                        "index": 4,
                        "containerStartID": "1f6db566-bdac-444a-93b6-93a142e117e1",
                        "color": "{C=#0+0+127,White}{B=White,Light Blue}{F=+B}",
                        "icon": "vertLineCap",
                        "displayText": "[Container End: FLEXLAYOUT_1]",
                        "parentPanelCardId": "",
                        "break": true,
                        "display": "{C=#0+0+127,White}{B=White,Light Blue}{F=+B}{Data=f70ecb7f-02b0-41d2-ace8-f2176f161325}{I:'vertLineCap'} [Container End: FLEXLAYOUT_1]<<break>>",
                        "inCSSGridContainer": false
                    }
                },
                "precalc": {
                    "ControlHTML": "</div><div style=\"display:none;font: 0pt arial;clear:both;\"></div>\n\t</div>\n",
                    "DesignViewHTML": ""
                },
                "isCollapsed": false,
                "parentIsCollapsed": false,
                "containerStartIndex": 2,
                "__flagwrapcontentsindiv": true
            }
        ],
        "builderType": "Dialog2",
        "guid": "989d0e7b-4c0d-462b-859e-b82cdff36711",
        "componentName": "LIST_CONFIG_EDITOR",
        "componentFilename": "C:\\Users\\lukes\\Documents\\AlphaAnywhere\\Phase 1 Project\\Phase 1 Project.WebProjects\\Default.WebProject\\list_config_editor.a5wcmp",
        "_style_versionNumber": 4,
        "_style_hasSassOverrides": false,
        "_style_hasCSSTweaks": false,
        "_style_hasCSS_or_subtheme_tweaks": false,
        "useCompactTheme": false,
        "styleTweaksCSS": "",
        "styleTweaksSubthemes": "",
        "controlflowdirection": "ltr",
        "SVGLinkedFiles": "",
        "localsvg": "",
        "createAppCacheVersion": false,
        "createAppCacheVersionC": "No",
        "appcache": {
            "pageName": "<Default>",
            "pageTitle": "",
            "hasHomeScreenIcons": false,
            "homeScreenIconName": "",
            "icons": {
                "precomposed": false
            },
            "pageHeadSection": ""
        },
        "clientsideNumberFormatDecimal": "period",
        "clientsideNumberFormatThousands": "comma",
        "dataSeriesPublishToClientSide": false,
        "showLineNumbersInControlsList": false,
        "saveFileType": "Formatted JSON",
        "keyboardShortcutsJSON": "",
        "preRenderWarningMessageShow": false,
        "autoSetPreRenderOnForAllUX": true,
        "selected": "fc6de9ee-8ff2-4eef-b6f5-94c8de9b5a79\n",
        "designPaneIndex": 1,
        "masterPaneC": "EventsClientSide",
        "serverSideEventIndex": 1,
        "clientSideEventIndex": 10,
        "clientSideEventIndexC": "10",
        "lastControlSelected": "insert_layout_directive_JSChart",
        "__WPhostName": "Chrome",
        "embeddedMode": false,
        "_style_hassubthemeTweaks": false,
        "repeatingSectionsAreDirty": true,
        "containerSubTypeNew": "",
        "containerSubTypeOld": "",
        "flagDropdownCascadingChanged": false,
        "toolBox_value": "",
        "addinBuildNumber": "5691",
        "addinBuildNumberHighestUsed": "5696",
        "alphaFiveBuildNumber": "12",
        "openedFromTemplate": false,
        "builtWithVersionNumer": 1,
        "_buildCount": "1152",
        "securityEnabled": false,
        "showHideIsUsed": false,
        "precalc": {
            "js_editorSetInitialization": ";\n",
            "customControl": {
                "js_beforePrepare": "\n__replaceAtRuntime_CustomControlsSystemBeforePrepare",
                "js_afterRender": "\n__replaceAtRuntime_CustomControlsSystemAfterRender",
                "customControl_xbasicFunctions": ""
            },
            "jschart": {
                "js_beforePrepare": "",
                "js_afterRender": "",
                "jschart_xbasicFunctions": "",
                "divstyle": ""
            },
            "rgraph": {
                "libraries": "RGraph.svg.common.ajax.js\nRGraph.svg.common.core.js\nRGraph.svg.common.csv.js\nRGraph.svg.common.fx.js\nRGraph.svg.common.key.js\nRGraph.svg.common.sheets.js\nRGraph.svg.common.tooltips.js\n"
            },
            "getSetFunctions": {
                "js_beforePrepare": ""
            },
            "injectibleHTML": "",
            "containerWindowHTML": "",
            "repeatingsectionInfoJs": "",
            "framesInfoJS": "{dialog.object}.framesInfo = {\n\n};\n",
            "jsActionJavascriptGlobalFunctions": "",
            "xbActionJavascriptGlobalFunctions": "",
            "javascriptSetupForGridLookups": "{\n}",
            "javascript": {
                "showWaitMessage": "",
                "hideWaitMessage": "",
                "embeddedUXComponents": ""
            },
            "fileUpload_controlInfo": "",
            "javascript_cascadingDropdowns": "{dialog.object}._cascadingControls = [];\n{dialog.object}._cascadingControlsChildren = [];",
            "template_html": "<!--div GLOBALERRORS-->\n<div class=\"errorTip\" style=\"margin-bottom: 2px; display: none; width: 8in; \" id=\"{dialog.componentname}.GLOBALERRORS\"></div>\n<!--End div GLOBALERRORS-->\n\n<div id=\"{dialog.componentname}.R1\">\n\n<div \tid=\"{dialog.componentName}.V.R{dialog.rownumber}.FLEXLAYOUT_1\"   \n\t\t\tA5-containerType=\"none\"\n\t\t\tclass=\"\"  style=\"padding: 2px; margin: 2px; display: flex; width: 100%; box-sizing: border-box; justify-content: center; align-content: center; align-items: center; \"  ><!--DIV for Container control-->\n<div class=\"A5CWLayout\" style=\"width: 98%\" >\n\t<!--FldS-->\t\t<div id=\"{grid.componentname}.V.R{grid.rownumber}.BUILDER\" class=\"{dialog.componentName}_BUILDER\"></div>\n\t\t<!--FldE-->\n</div>\n</div><div style=\"display:none;font: 0pt arial;clear:both;\"></div>\n\t</div>\n\n\n\n</div>\n<!--div DEBUGUPDATECOMMANDS-->\n<div class=\"\" style=\"display: none; \" id=\"{dialog.componentname}.DEBUGUPDATECOMMANDS\"></div>\n<!--End div DEBUGUPDATECOMMANDS-->\n",
            "panelDisplayNames": "",
            "controlJavascript": "",
            "controlJavascriptRepeatingSections": "",
            "template_js": "",
            "sessionVarsInShowHideExpns": "",
            "flagHasShowTimer": false,
            "themeSearchReplaceString": "[theme:edit.base.className|class.dialogInput]=*if_error(p.edit.base.className,\"[class.dialogInput]\")\n",
            "flagHasHTML5ImageCapture": false,
            "flagUsesCordova": false,
            "flagUseAmazonS3FileUpload": false,
            "flagUseStripe": false,
            "usesSystemSVG": true,
            "flagUseAudioPlayer": false,
            "flagUseInk": false,
            "flagUsesAudioLibrary": false,
            "flagUsesPhoneGapFileSystemFunctions": false,
            "flagUsesGetAccurateLocation": false,
            "editorSet_for_editor": "{dialog.object}._EDITOR_EDITORSET = {};",
            "otherJS": "",
            "javascript_layoutRules": "",
            "javascript_controlNesting": "{\nFLEXLAYOUT_1: ['BUILDER']\n}",
            "appcacheEvents": "",
            "IconMap": "{images.RowExpander.Open}=\"<Specified by Style>\"\n{images.RowExpander.Close}=\"<Specified by Style>\"\n{images.EmbeddedSearch.Search}=\"<Specified by Style>\"\n{images.EmbeddedSearch.ClearSearch}=\"<Specified by Style>\"\n{images.EmbeddedSearch.ShowHideEmbeddedSearch}=\"<Specified by Style>\"\n{images.GridRow.NewRecordRow.NoFocus}=\"<Specified by Style>\"\n{images.GridRow.NewRecordRow.HasFocus}=\"<Specified by Style>\"\n{images.GridRow.SaveRecord}=\"<Specified by Style>\"\n{images.GridRow.SaveRecord.Disabled}=\"<Specified by Style>\"\n{images.GridRow.UndoChanges}=\"<Specified by Style>\"\n{images.GridRow.UndoChanges.Disabled}=\"<Specified by Style>\"\n{images.GridRow.EditRecord}=\"<Specified by Style>\"\n{images.GridRow.EditRecord.Disabled}=\"<Specified by Style>\"\n{images.GridRow.DeleteRecord}=\"<Specified by Style>\"\n{images.GridRow.DeleteRecord.Disabled}=\"<Specified by Style>\"\n{images.GridRow.CancelEditRecord}=\"<Specified by Style>\"\n{images.GridRow.CancelEditRecord.Disabled}=\"<Specified by Style>\"\n{images.GridRow.HasError}=\"<Specified by Style>\"\n{images.QBE.OperatorIsSelected}=\"<Specified by Style>\"\n{images.QBE.OpenQBEMenu}=\"<Specified by Style>\"\n{images.QBE.ShowHideQBERow}=\"<Specified by Style>\"\n{images.PopUpWindow.Lookup.Close}=\"<Specified by Style>\"\n{images.PopUpWindow.DetailView.Close}=\"<Specified by Style>\"\n{images.CollapseContainer.Open}=\"<Specified by Style>\"\n{images.CollapseContainer.Close}=\"<Specified by Style>\"\n{images.FieldHelpIcon}=\"<Specified by Style>\"\n{images.SearchPart.SaveSearchCriteria}=\"<Specified by Style>\"\n{images.SearchPart.LoadSearchCriteria}=\"<Specified by Style>\"\n{images.SearchPart.RunSearch}=\"<Specified by Style>\"\n{images.SearchPart.ClearSearch}=\"<Specified by Style>\"\n{images.GridRow.SelectionPointer}=\"<Specified by Style>\"\n{images.Grid.SortAsc}=\"<Specified by Style>\"\n{images.Grid.SortAscDisabled}=\"<Specified by Style>\"\n{images.Grid.sortDesc}=\"<Specified by Style>\"\n{images.grid.sortDescDisabled}=\"<Specified by Style>\"\n{images.grid.firstPage}=\"<Specified by Style>\"\n{images.grid.firstPageDisabled}=\"<Specified by Style>\"\n{images.grid.prevPage}=\"<Specified by Style>\"\n{images.grid.prevPageDisabled}=\"<Specified by Style>\"\n{images.grid.nextPage}=\"<Specified by Style>\"\n{images.grid.nextPageDisabled}=\"<Specified by Style>\"\n{images.grid.lastPage}=\"<Specified by Style>\"\n{images.grid.lastPageDisabled}=\"<Specified by Style>\"\n{images.edit.dropdownArrow}=\"<Specified by Style>\"\n{images.edit.datePicker}=\"<Specified by Style>\"\n{images.edit.dateTimePicker}=\"<Specified by Style>\"\n{images.edit.timePicker}=\"<Specified by Style>\"\n{images.edit.calculator}=\"<Specified by Style>\"\n{images.edit.lookup}=\"<Specified by Style>\"\n{images.javascript.deleteRowConfirmation}=\"<Specified by Style>\"\n{images.javascript.cancelEditRowConfirmation}=\"<Specified by Style>\"\n{images.javascript.UndoEditsConfirmation}=\"<Specified by Style>\"\n{images.javascript.UndoAllEditsConfirmation}=\"<Specified by Style>\"\n{images.javascript.dirtyRecordWarning}=\"<Specified by Style>\"\n{images.dv.close}=\"<Specified by Style>\"\n{images.dv.firstRecord}=\"<Specified by Style>\"\n{images.dv.prevRecord}=\"<Specified by Style>\"\n{images.dv.nextRecord}=\"<Specified by Style>\"\n{images.dv.lastRecord}=\"<Specified by Style>\"\n{images.dv.newRecord}=\"<Specified by Style>\"\n{images.dv.cancelEdits}=\"<Specified by Style>\"\n{images.dv.deleteRecord}=\"<Specified by Style>\"\n{images.dv.saveRecord}=\"<Specified by Style>\"\n{images.dv.saveAndEnter}=\"<Specified by Style>\"\n{images.dv.switchToEdit}=\"<Specified by Style>\"\n{images.dv.switchToView}=\"<Specified by Style>\"\n{images.disabled.dv.newRecord}=\"<Specified by Style>\"\n{images.disabled.dv.cancelEdits}=\"<Specified by Style>\"\n{images.disabled.dv.deleteRecord}=\"<Specified by Style>\"\n{images.disabled.dv.saveRecord}=\"<Specified by Style>\"\n{images.disabled.dv.saveAndEnter}=\"<Specified by Style>\"\n{images.dv.cancelNewRecord}=\"<Specified by Style>\"\n{images.grid.editError}=\"<Specified by Style>\"\n{images.dialog.editError}=\"<Specified by Style>\"\n{images.tabbedUI.menuExpandLeft}=\"<Specified by Style>\"\n{images.tabbedUI.menuCollapseLeft}=\"<Specified by Style>\"\n{images.tabbedUI.menuExpandRight}=\"<Specified by Style>\"\n{images.tabbedUI.menuCollapseRight}=\"<Specified by Style>\"",
            "absoluteLayoutSetButtonSizes": "",
            "viewBoxesToRefresh": "",
            "AdditionalGridStyles": "",
            "viewbox": {
                "includeJSONPath": false
            },
            "hasListNavigator": true,
            "vb_based_on_lists": "",
            "vb_based_on_javascritFunctions": "",
            "constrainContainerJS": "",
            "hasFormViewControls": false,
            "hasPDFViewer": false,
            "setScreenHeightJS": "",
            "hasListColumnSelector": false,
            "hasPDFViewerForReports": false,
            "hasIndexedDBJS": false,
            "hasCalendarJS": false,
            "hasCharts": false,
            "hasformbox": true,
            "hasExpandingmenus": false,
            "actionsheet": {
                "has": false
            },
            "kanban": {
                "has": false
            },
            "transformdataviewer": {
                "has": false,
                "controlnames": "",
                "controlnamesListDataSource": "{dialog.object}._listsWithDependentTFControls = {}"
            },
            "requiredPlugins": "",
            "formbox": {
                "has": false
            },
            "_PDFViewerIds": "",
            "__panelButtons": "",
            "flagLoadFirestore": false,
            "__freeformLayoutsJS": "",
            "_jsOnChangeFunctions": "function onChange_BUILDER_bb9ffb39e22841c88fbed36c49f528ae(_dlgObj){if(_dlgObj.executeWatchEventForControl) _dlgObj.executeWatchEventForControl('BUILDER');};",
            "_jsOnClickFunctions": ""
        },
        "FieldsInRepeatingSectionsDeletedBySecurity": "",
        "repeatingSectionsToRecalc": "",
        "dialogObject": "if(typeof {dialog.componentName}_DlgObj == 'object') {dialog.componentName}_DlgObj._destroy();\nvar {dialog.componentName}_DlgObj = new A5.DialogComponentHelper('{dialog.componentName}',{\n\tajaxURL: '{dialog.ajaxUrl}',\n\t_embeddedMode: {dialog.embeddedMode},\n\t_livePreviewInBuilder: {livePreviewInBuilder},\n\tcomponentGUID: '989d0e7b-4c0d-462b-859e-b82cdff36711',\n\tcolumnInfo: {columninfo},\n\toriginalValues: {dialog.jsOriginalValues},\n\tdefaultValues: {dialog.jsDefaultValues},\n\tdatePickerMonthNames: [{datePickerMonthNames}],\n\tdatePickerDayNames: [{datePickerDayNames}],\n\tdatePickerTodayButton: '{datePickerTodayButton}',\n\tdatePickerCloseButton: '{datePickerCloseButton}',\n\tdatePickerFirstDayOfWeek: {datePickerFirstDayOfWeek},\n\tresetFormMessage: '{resetFormMessage}',\n\tresetFormTitle: '{resetFormTitle}',\n\tresetFormIcon: '{resetFormIcon}',\n\tdirtyFormMessage: '{dirtyFormMessage}',\n\tdirtyFormTitle: '{dirtyFormTitle}',\n\tdirtyFormIcon: '{dirtyFormIcon}',\n\tdeleteRecordDialogTitle: '{deleteRecordTitle}',\n\tdeleteRecordDialogMessage: '{deleteRecordMessage}',\t\n\tssDateFormat: '{serverSideDateFormat}',\n\tstyleName: '{dialog.style}',\n\t_fieldHelpers_DIALOG2: [],\n\tparentComponentAlias: '{parentComponentAlias}',\n\tsubmitIfHasClientSideErrors: false, \n\trowErrors: {\n\t\t\t\tshowMessageBox: false,\n\t\t\t\tmessageBoxTitle: 'Error',\n\t\t\t\tstyle: 'color: red; width: 6in; height: 2in;'\n\t\t},\n\tfieldErrors: {\n\t\ttype: 'block', \n\t\tclassName: 'errorText',\n\t\tinputClassName: '[class.gridInputError]',\n\t\tedit: { \n\t\t\tcontainer: { className: '[class.gridInputContainerError]'}\n\t\t},\n\t\ticon: '{images.dialog.editError}',\n\t\tglobal: {\n\t\t\tcontId: '{dialog.componentname}.GLOBALERRORS',\n\t\t\thoverClassName: 'errorTextHighlight',\n\t\t\thoverInputClassName: 'errorInputHighlight'\n\t\t}\n\t},\n\t\tonInitializeComplete: function(e) {\nonload = () => {\n\tlet configInput = buildConfigForm([]);\n\tbuildFromConfig({dialog.object}, 'BUILDER', configInput, \"{dialog.Style}\", \"\");\n}\n\n\nfunction buildConfigForm(allColumns) {\n\tlet configUx = {dialog.object};\n\tlet singleInput = Input.singleInput;\n\tlet singleValue = Input.singleValue;\n\t\n\tlet btns = singleInput('array', 'List Buttons', {\n\t\tdefault: [],\n\t\tarrayInput: singleInput('object', 'List Button', {\n\t\t\tstaticKeys: {\n\t\t\t\tcolumnTitle: singleInput('string', 'Column Title'),\n\t\t\t\tonClick: singleInput('function', 'On Click Javascript'),\n\t\t\t\ttitle: singleInput('string', 'Button Text (Optional)', {default: undefined}),\n\t\t\t\ticon: singleInput('string', 'Button Icon (Optional)', {default: undefined}),\n\t\t\t}\n\t\t})\n\t});\n\t\n\tlet endpoint = singleInput('object', 'API Endpoint', {\n\t\tstaticKeys: {\n\t\t\tmethod: singleInput('string', 'HTTP Method (GET, POST, etc)'),\n\t\t\tendpoint: new Input({\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: new Value('object', {\n\t\t\t\t\t\t\tstaticKeys: {\n\t\t\t\t\t\t\t\ttemplate: singleInput('string', 'Template String'),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tdropdownLabel: 'Endpoint Template'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: new Value('object', {\n\t\t\t\t\t\t\tstaticKeys: {\n\t\t\t\t\t\t\t\tgetEndpointURL: singleInput('function', 'Function to get endpoint'),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tdropdownLabel: 'Endpoint Function'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tlabel: 'Endpoint',\n\t\t\t\tcomments: 'The endpoint can be a string template or a function accepting list filters and returning a string URL',\n\t\t\t\tvalidate: () => true,\n\t\t\t}),\n\t\t\tbody: singleInput('object', 'Body (Optional)', {\n\t\t\t\tstaticKeys: {},\n\t\t\t\tdynamicKeys: singleInput('string', 'Value'),\n\t\t\t}),\n\t\t\theaders: singleInput('object', 'Headers (Optional)', {\n\t\t\t\tstaticKeys: {},\n\t\t\t\tdynamicKeys: singleInput('string', 'Value'),\n\t\t\t}),\n\t\t\tcallback: singleInput('function', 'On Complete Callback (Optional)', {default: undefined}),\n\t\t},\n\t});\n\t\n\tdebugger;\n\tlet mappings = new Input({\n\t\tvalues: singleValue(new Value('array', {\n\t\t\tdefault: [],\n\t\t\tarrayInput: singleInput('object', 'Column Settings', {\n\t\t\t\tstaticKeys: {\n\t\t\t\t\tcolumnName: singleInput('string', 'Column Name'),\n\t\t\t\t\tdisplayName: singleInput('string', 'Column Name to Display (Optional)', {default: undefined}),\n\t\t\t\t\tinList: singleInput('boolean', 'Show in List? (Optional)', {default: true}),\n\t\t\t\t\tinDetailView: singleInput('boolean', 'Show in Detail View? (Optional)', {default: true}),\n\t\t\t\t\teditType: singleInput('dropdown', 'Data Type (Optional)', {\n\t\t\t\t\t\tdefault: 'text',\n\t\t\t\t\t\tdropdownItems: ['text', 'dropdown', 'time', 'datetime', 'bool', 'number'].map(x => { return { value: x, text: x }}),\n\t\t\t\t\t}),\n\t\t\t\t\twidth: singleInput('string', 'Column Width (Optional)', {default: undefined}),\n\t\t\t\t\ttemplate: singleInput('string', 'Column Template (Optional)', {default: undefined}),\n\t\t\t\t\tdropdownConfig: singleInput('object', 'Dropdown Config (Optional)', {\n\t\t\t\t\t\tdefault: undefined,\n\t\t\t\t\t\tstaticKeys: {\n\t\t\t\t\t\t\tchoices: new Input({\n\t\t\t\t\t\t\t\tvalues: singleValue(new Value('array', {\n\t\t\t\t\t\t\t\t\tarrayInput: singleInput('string', 'Dropdown Item'),\n\t\t\t\t\t\t\t\t\tdefault: [],\n\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\tlabel: 'Dropdown Choices',\n\t\t\t\t\t\t\t\tcomments: '',\n\t\t\t\t\t\t\t\tvalidate: () => true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tfromColumn: singleInput('string', 'Derive From Column', {default: undefined}),\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t}, {\n\t\t\t\tonPopulate: (input, d) => {\n\t\t\t\t\tlet name = d.displayName ? d.displayName : d.columnName;\n\t\t\t\t\tinput.label = name + \" options\";\n\t\t\t\t},\n\t\t\t}),\n\t\t})),\n\t\tlabel: \"List Mappings\",\n\t\tcomments: \"Add or remove columns for the list\",\n\t\tvalidate: () => true,\n\t});\n\t\n\treturn singleInput('object', 'List Configuration', {\n\t\tstaticKeys: {\n\t\t\tname: singleInput('string', 'List Name'),\n\t\t\tonInitialize: singleInput('function', 'On Initialize Callback (Optional)', {default: undefined}),\n\t\t\tdataSource: new Input({\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: new Value('object', {\n\t\t\t\t\t\t\tstaticKeys: {\n\t\t\t\t\t\t\t\ttype: singleInput('dropdown', 'Input Type', {dropdownItems: [{value: 'json', text: 'json'}]}),\n\t\t\t\t\t\t\t\tendpoints: singleInput('object', 'Endpoints', {dynamicKeys: endpoint, staticKeys: {}, default: {}}, {\n\t\t\t\t\t\t\t\t\tcomments: 'Key can be fetch, search, add, update, or delete'\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tpreprocess: singleInput('function', 'Preprocess Function (Optional)', {default: undefined}),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tdropdownLabel: 'Fetch from API',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: new Value('object', {\n\t\t\t\t\t\t\tstaticKeys: {\n\t\t\t\t\t\t\t\ttype: singleInput('dropdown', 'Input Type', {dropdownItems: [{value: 'json', text: 'json'}]}),\n\t\t\t\t\t\t\t\ttable: singleInput('string', 'Table Name'),\n\t\t\t\t\t\t\t\tpreprocess: singleInput('function', 'Preprocess Function (Optional)', {default: undefined}),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tdropdownLabel: 'Fetch from SQL',\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tlabel: \"Data Source\",\n\t\t\t\tcomments: \"\",\n\t\t\t\tvalidate: () => true\n\t\t\t}),\n\t\t\tmappings: mappings,\n\t\t\tsearchOptions: singleInput('object', 'Search Options', {\n\t\t\t\tstaticKeys: {\n\t\t\t\t\tpaginate: singleInput('object', 'Pagination', {\n\t\t\t\t\t\tdefault: undefined,\n\t\t\t\t\t\tstaticKeys: {pageSize: singleInput('number', 'Page Size') }\n\t\t\t\t\t}),\n\t\t\t\t\tadvancedSearch: singleInput('boolean', 'Do Advanced Search?', {default: false}),\n\t\t\t\t\tserverSearch: singleInput('boolean', 'Do Server-Side Search?', {default: false}),\n\t\t\t\t\tonlyInclude: singleInput('array', 'Only include these search columns:', {\n\t\t\t\t\t\tarrayInput: singleInput('string', 'Column Name'),\n\t\t\t\t\t\tdefault: []\n\t\t\t\t\t}),\n\t\t\t\t\tonlyExclude: singleInput('array', 'Only exclude these search columns:', {\n\t\t\t\t\t\tarrayInput: singleInput('string', 'Column Name'),\n\t\t\t\t\t\tdefault: []\n\t\t\t\t\t}),\n\t\t\t\t}\n\t\t\t}),\n\t\t\tbuttons: btns,\n\t\t}\n\t});\n}\n\t\t},\n\t\tonOrientationChange: function(e) {\nvar pObj = {dialog.object}.getPanelObject();\nif(pObj && pObj.resize && typeof pObj.resize == 'function') pObj.resize();\n\t\t},\n\t\t_onWindowResize: function(e) {\nvar arr = {dialog.object}._listControls;\nif(arr) {\n\tvar obj;\n\tfor(var i = 0; i < arr.length; i++) { \n\t\t\n\t\tobj = {dialog.object}.getControl(arr[i]);\n\t\tif(obj && obj.resize && typeof obj.resize == 'function') obj.resize()\n\t}\n}\n\t\t},\n_onInitializeBegin: function(e) { /*systemOnInitializeBegin*/ ;\n   },\n\n\n\t});\n\n",
        "xbasiccode": {
            "blankInitialValueIfVarNotFound": "",
            "setValueProperties": "value.BUILDER=\"\"",
            "setValueProperties2": "value.BUILDER=\"\"",
            "setValueUnformattedProperties": "value.BUILDER=convert_type(\"\",\"C\")\n"
        },
        "componentType": "Dialog2",
        "version": 1,
        "recNav": {
            "slider": {
                "showSlider": false
            }
        },
        "_flagStaticHTMLMode": false,
        "__flagUseFakeRequestVariables": false,
        "__specialMode": false,
        "alias": "{UXPRERENDEREDALIAS}",
        "systemXbasicFunctionDeclarations": "",
        "localPreviewFlag": false,
        "flagStaticHTMLMode": false,
        "flagInitialLoadIsAjax": false,
        "_forceInitialLoadIsAjax": false,
        "override_settings": "",
        "flagForcerecalc": false,
        "flagSaveDialogCache": true,
        "__argumentsFromGrid": "",
        "flagExecuteOnDialogInitializeEvent": true,
        "flagExecuteOnDialogExecuteEvent": true,
        "__livePreviewMode": false,
        "iconMapOverrides": "",
        "resolveAbstractIconNamesAtDesignTime": true,
        "customizationString": {
            "javascriptDialogs": "",
            "DetailView": {
                "toolbar": ""
            }
        },
        "linkedResources": "",
        "flagReloadComponent": false,
        "__flagstatichtmlorphonegap": false,
        "temp": {
            "_onRenderComplete": ""
        },
        "disableAbstractEvents": false,
        "jsRunAtBeginning": "",
        "flagLoadDetailViewImageCaptureJS": false,
        "forceLoadPhoneGapFileSystemFunctions": false,
        "_flagUsesAudioLibrary": false,
        "_flagUsesInk": false,
        "_flagUsesControlBar": true,
        "__staticHTML_setStaticHTMLFlag": false,
        "sassProcessor": true,
        "debugMode": false,
        "__jsLibraries": "<script type=\"text/javascript\" src=\"javascript/a5.js\"></script>\n<script type=\"text/javascript\" src=\"javascript/a5_url.js\"></script>\n",
        "A5SaveTimeStamp": "20240726163136015",
        "a_actionJavascript": [
            {
                "actionGuid": "a62a58a3-f469-44b1-a85a-a7bf472df8b9     ",
                "scriptMetaData": "<a_ajs<[1]<display=\"{I:'a5_new_xbasic_script'}{F=Tahoma,10}{C=Dark Blue,White}{B=Blue White,Dark Blue}Inline-Javascript     {T=4}{I:'a5_vertical_line'}Load configuration from file and create form\">\n<action=\"Inline-Javascript     \">\n<icon=\"a5_new_xbasic_script\">\n<isCommentedOut=.F.>\n<comment=\"Load configuration from file and create form\">\n<builder=\"a5ajs_Inline(v,dlg_mode,wf)\">\n<metaData=<<%str1%\n<inlineJavascript=<<%str%\n{dialog.object}.stateInfo.errorMessages = '';\n\nlet input = document.createElement('input');\ninput.type = 'file';\ninput.accept = 'application/text';\ninput.multiple = false;\ninput.onchange = _ => {\n\tlet files = Array.from(input.files);\n\tif (files.length > 0) {\n\t\tlet reader = new FileReader();\n\t\treader.readAsText(files[0]);\n\t\t\n\t\treader.onloadend = (res) => {\n\t\t\tlet text = reader.result;\n\t\t\tbuildFromConfig({dialog.object}, \"BUILDER\", eval(text), \"{dialog.Style}\");\n\t\t}\n\t}\n}\ninput.click();%str%>\n%str1%>\n<javascriptAttribute=<<%str%\n{dialog.object}.stateInfo.errorMessages = '';\n\nlet input = document.createElement('input');\ninput.type = 'file';\ninput.accept = 'application/text';\ninput.multiple = false;\ninput.onchange = _ => {\n\tlet files = Array.from(input.files);\n\tif (files.length > 0) {\n\t\tlet reader = new FileReader();\n\t\treader.readAsText(files[0]);\n\t\t\n\t\treader.onloadend = (res) => {\n\t\t\tlet text = reader.result;\n\t\t\tbuildFromConfig({dialog.object}, \"BUILDER\", eval(text), \"{dialog.Style}\");\n\t\t}\n\t}\n}\ninput.click();%str%>\n<Javascriptdeclarations_row=\"\">\n<Javascriptdeclarations_global=\"\">\n<xbasicFunctions=\"\">\n>\n>\n<flagRunSynchronously=.F.>\n<flagWrapInTryCatch=.F.>\n<tryCatchJavascript=\"\">\n"
            }
        ],
        "forceChromeControl": true,
        "flagOptimizedUXTree": true,
        "flagReanalyzeContainers": false,
        "minimumBuildNumber": "",
        "_display": "",
        "serversidelanguage": "Xbasic",
        "style_color_palette": "",
        "customTabOrder": "",
        "showPulseEffect": true,
        "flagShowDeleteConfirmation": true,
        "floatingLabelSettingsJSON": "",
        "onConnectionLostBehavior": "Stop",
        "onConnectionLostExecutionDuration": "0",
        "AllowSelectionOfText": false,
        "debugOnTemplateError": false,
        "_conversiontoOptimizeUXTreeHasRun": true,
        "componentImagesJSON": "",
        "friendlydatesCustomizationJSON": "",
        "simulatedculture": "",
        "allowusertoswitchstylesatruntime": false,
        "listofstyles": "",
        "styleselectorplaceholder": "",
        "baseURLForStyles": "",
        "templateforstyleselector": "",
        "captureJSErrorStackTrace": false,
        "optionalSystemLibraries": "",
        "watcheventsjson": "",
        "svgiconsdefaultsize": "15,15",
        "PreRenderUXInSections": false,
        "refreshPanelObject": true,
        "compressUX": false,
        "optimizedPreRender": false,
        "useIphoneXStyling": false,
        "iPhoneXStylingJSON": "",
        "wrapPasswordFieldsInForms": true,
        "useCSSFlexForContainerAlignment": true,
        "pusherConfigJSON": "",
        "pusherApp": false,
        "lockEventHandlers": true,
        "lockEventHandlersDuration": 300,
        "capturesqltracelog": false,
        "addCorsHeaders": false,
        "corsAllowOrigins": "*",
        "corsAllowPrivateNetwork": false,
        "convertImagesToBase64": false,
        "htmlencodejavascript": true,
        "__LPhostName": "Chrome",
        "_style_isInherited": false,
        "_analyzecontainersjs": true,
        "_repeatingSectionPendingRecalc": "\n",
        "cachecomponent": false,
        "_crcXbEvents": 4294903431,
        "_crcJSFunctions": 4294904268,
        "_crcJSEvents": 4294956486,
        "_treeErrors": "",
        "__flagHasMacro": false,
        "__staticMode": "",
        "__componentnotfound": false,
        "_fakeServersideCanAjaxCallback": true,
        "_style_name_beforeResolve": "Alpha",
        "__changeAJAXURL": "",
        "_afterLogin": {
            "panelName": ""
        },
        "__phoneGapInstantUpdate": false,
        "suppressLoadingHTML5JSLibrary": false,
        "loadJavascript": {
            "detailViewImageCapture": true,
            "controlbars": true,
            "charts": true,
            "formbox": true,
            "pickers": true
        },
        "includeIndexedDB": false,
        "_flagUsesCharts": false,
        "_passwordReset": false,
        "_isPartial": false,
        "__flagCreateAppCache": false,
        "__embedLinkedFiles": false,
        "__embedLinkedJSFiles": false,
        "__idinternalCurrentControl": "bb9ffb39-e228-41c8-8fbe-d36c49f528ae",
        "__nameCurrentControl": "BUILDER",
        "showJavascriptActions": false,
        "showResponsiveLayoutHelp": false,
        "suppressJavascriptCodeWarning": true,
        "restorePanelSizes": true,
        "populateArgumentsFromQueryString": false,
        "livePreview_permissions_friendly": "",
        "__allowCascadingRecalc": true,
        "a_UnboundActionJavascript": [
            {
                "idInternal": "",
                "name": ""
            }
        ],
        "simulatedcultureNumber": "",
        "_alphasoftwareBucketName": "",
        "staticHTMLFileJSON": "",
        "__flagRecursive": false,
        "_flagForceRecalcChildren": true,
        "_flagDoTreeview": true,
        "_move": {
            "index": 2,
            "targetIndex": 1,
            "count": 1
        },
        "_choices": "base\nconfirm\ndeny\nleft\nright\nprimary\nsecondary\nraised\nsubtle\nicon\niconText\niconRaised\ncapsule\ncapsuleRaised\ncapsuleSubtle\ncapsuleSubtleRaised\ncircle\ncircleRaised\ncircleSubtle\ncircleSubtleRaised\n",
        "versionNumber": 1,
        "prerendered": {
            "_styledataVersion": 4,
            "output": {
                "Head": {
                    "JavaScript": "*gzip:H4sIAAAAAAAAC5WMsQ6CQBAFexP/Aa/Hq+gOOjsqf2Cznq84PPGyuyD8vSQUFlaWM5NM0CipWGVrQesMi/mBZ96tq1Ri677Cc3Me1HXB79wdD+HfAU2Sfyanun/x/bIYZOTcp5uwJGi9NSJByRzBdp1GS08QRVW1NcPe4IcSfQAk7ywxxgAAAA==",
                    "CSS_Link": "*gzip:H4sIAAAAAAAAC81ZW0/jRhTuK5X2P0zDooVqTZxQV+AsVCx7Q2LVCmh5qKrVxB4nszgeazwhsBH/vWcutseO7YSlDxXaxXN87nPOd2bMm0w8xASJh5Qc9wS5F/0gy3onL36cilmMlshZkPEtFY7AqTOlk2kM/4QTsJhxH/HJGO+6r9XP3qjgnWeEOxmJSSB8lLCEwKtZ5gg2D6YODgRliaE/vviRRhzPCFo2CkuHJNP+qRewRGCaEI6WUcyw8GMSiVGKw5AmE99N7w3f2c0FfmBzgZb5O/QLvERaCCkpNGb3Tka/qbdjxkMwCSTpJvvmtL/M2t8Z71vea9c+chp+oiF5zznjZyxGhlaslyHN0hg/+DpppdQlWyimc8hCjctSjbOcD3XK0SSGRDrjmAW3o4qRvyhZfGYhKXkbmN6HVFSZao4Az3lScHVp31Bw1WKDW+8oFw9dqs9igleyULOeaS2tWjcTqlkqXCFyL66hptFSdxAn4SiCwpY1Q/zDVFTZPuUNBzUvuRZELvwxi9vFaGorH+PgdsLZPAn97SiKcITRnMe7r+gMT0jWfwnF2X8ptfQP7w/7LyMax/0/0x3vwzuKJyzBsX8zpYLsHJzuDA+GnrczPBseHOn/99Nkso89perV3kiXuz9I71HGYhqi7ejwcDTDfEIT6P3UH0Ib5j0pn1siOE/SeSVBK4olUeuVxJqklbMVFcMmFSV0XCnUIeHbuRCyX1iKAyoe/H1vBIkRoADH6RTvGvqxB6CnJc+TO5rRcUwuoCzR0sp6HSM1vwIjWSWAZiiQvyVciCnAVJEUJB1DCxqKqXme6u3XC3ZHOKhZ+GhKw5AkI1TgnXpvotMLE7+GFeUqjWVkuaj26oJm4iO4nX4iGNgztPzm0CQk97432kpZRhVycxJjQe9UResfibo5Op9C7pMzkggJ1FUENqUgEdjHc8Hy2uAqKkWReO9gqcJHgVLSitWPDXYvQHWL1RYjnePgETXYuNS1tSY024Yy3RVHewZPkDXRXqPmgNcxaY/XcdkWi1nbabKLy7JZDu4SEVFlBOWz2YLsdzTD0E5h2YRo33ssyu2DFIBMXuAxiaVltCwLFBUVumWhDxqWjV4RP08ymMkdSrplqAQdlYE2Dn2Y6WSR5YI5wdIDXVilz+gnOksZFzgRRbFU9LRphiJlVG6qQ+5gczPd/laIeAxgOBdAs5I82lKWPXdntKXqGQ1k4kZbuoPMCgmOkyxifObrR0gW2YVXrx1vsLMHSiTR2Cl40YHrzrLXCCzkjwXeaULTBqnFSoyQKgsrlVfac/VUBDQwrjS6OnDdnb3NTeZpfbbhX9P7vWIv/8AJiS+JysESlaPDHLKt+bE/8PQEsYD3NAgASyDN11TE5PdEFUONGEUN1LLDiqbU3WhmBbIG+dHRUTG5kRzdCt5CAvqwdZoP5jyT1wJTdjm+w2ATbKYFka3msRqBTATMzmbzBjFVopWxBuV2tzvDotuv8fiapSY1ZmFSoletqbDvDN1+5W7YrpmGsY89T0he1Xe0rMXrDEq1BfHAjvmtIpZhm3UZuSY8J/j/NtDc4bwGrM2ugGIlSjmOyhjVqoxQLp9a5w119ZygtH/F9plUVXbP0GRYJnBDseYhaFIjtQxVL8tY1fqpwRp7Gufb2uo54Runi/i1pUr4mnRQa1cJBtVCtSkyq/ZamenEjwrwjMqThFSPk3ADObfSXCADv6zuMgSrvTSl3JKGs8WTdmkNxlTOOt+3bQt513MyGGFEciw4ThtC/h4sAtkrkmKwzniZa+WE3ey1wPMLz4EdjmuujvJJIMwpjquGZHFcBZzF8SY5r6Rp08Ca07lxkzVtaCUEVc//wxhsYFobhFX8DcO2CaMbsax5XHWeaOzjLDJXd1S5u8sD7p729gauuGyBlubbn44Th3Se6TxZ3/ZW3tka5NW/CUVc17U/w6Dt4XA4Kj0cFh8X6h4OvfKQWD/m+VN5/28+7FnvKsBUpetTUJVmxmeVmA+amtr8NKHJy5VqglgJzz+WqRg+k2R+LsgMrTBXLn44ZpPLqxW0KAEiBNOwy9tBEIyQukYanPCsq7i+xBRblKv9wJj6MmFzDdy0vIafJnR2yQSc1I9cnV6LcHZ2U6MNDutcQAG2tqtux7XIeGrb+xt7TjAlwS0Jj1nyDySuvFFwxbN75IZkstcgC05sIO60yEMUG0gDV5v0huZXNVwtcFoLBZ2gn/0YZwLU0TjcLI4GPXJf1qtarwmc3sSlDWIzxbJeWbOu7tnwHYWnlII3xgXDbxCplbvie8PnheJ2rEegfCpAzq3pqxeNVB9RXup/kqTtmHUzt67Qb/rqD2An6hnydQsHvpgAwBz3ejKnxz31PpsSInr1P5OhKSfRcQ8e+6cSu7WufVj/Np6D0QAQX3wZDLyh/IvamyzgFI4snMwAMmlEkwXjtzCWU07uKFnY2r/iO6zZeyjjwaqNrw0mIBYlcpKH8gT/v2RTzEl4pZi745A/P/wLrhA31jgcAAA=",
                    "title": "*gzip:H4sIAAAAAAAAC7MpySzJSbULjbDRh7AAiMez8hEAAAA="
                },
                "body": {
                    "body_tag": "*gzip:H4sIAAAAAAAAC7NJyk+pVEjOSSwutlUqSExPVVAoKM0pTlWyAwC29a3YGgAAAA==",
                    "dialog2_html": "*gzip:"
                },
                "ajaxResponse": "*gzip:"
            },
            "iconMap": "{images.RowExpander.Open}=\"svgIcon=#alpha-icon-chevronRight:icon iconButton\"\n{images.RowExpander.Close}=\"svgIcon=#alpha-icon-chevronDown:icon iconButton\"\n{images.EmbeddedSearch.Search}=\"svgIcon=#alpha-icon-magGlass:icon iconButton\"\n{images.EmbeddedSearch.ClearSearch}=\"svgIcon=#alpha-icon-magGlassX:icon iconButton\"\n{images.EmbeddedSearch.ShowHideEmbeddedSearch}=\"svgIcon=#alpha-icon-magGlass:icon iconButton\"\n{images.GridRow.NewRecordRow.NoFocus}=\"svgIcon=#alpha-icon-doc:icon iconButton\"\n{images.GridRow.NewRecordRow.HasFocus}=\"svgIcon=#alpha-icon-chevronRight:icon iconButton\"\n{images.GridRow.SaveRecord}=\"svgIcon=#alpha-icon-save:icon iconButton\"\n{images.GridRow.SaveRecord.Disabled}=\"svgIcon=#alpha-icon-save:icon iconDisabled iconButton\"\n{images.GridRow.UndoChanges}=\"svgIcon=#alpha-icon-undo:icon iconButton\"\n{images.GridRow.UndoChanges.Disabled}=\"svgIcon=#alpha-icon-undo:icon iconDisabled iconButton\"\n{images.GridRow.EditRecord}=\"svgIcon=#alpha-icon-edit:icon iconButton\"\n{images.GridRow.EditRecord.Disabled}=\"svgIcon=#alpha-icon-edit:icon iconDisabled iconButton\"\n{images.GridRow.DeleteRecord}=\"svgIcon=#alpha-icon-removeCircle:icon iconButton\"\n{images.GridRow.DeleteRecord.Disabled}=\"svgIcon=#alpha-icon-removeCircle:icon iconDisabled iconButton\"\n{images.GridRow.CancelEditRecord}=\"svgIcon=#alpha-icon-editCancel:icon iconButton\"\n{images.GridRow.CancelEditRecord.Disabled}=\"svgIcon=#alpha-icon-editCancel:icon iconDisabled iconButton\"\n{images.GridRow.HasError}=\"svgIcon=#alpha-icon-exclamationCircle:icon iconButton\"\n{images.QBE.OperatorIsSelected}=\"svgIcon=#alpha-icon-check:icon iconButton\"\n{images.QBE.OpenQBEMenu}=\"svgIcon=#alpha-icon-filter:icon iconButton\"\n{images.QBE.ShowHideQBERow}=\"svgIcon=#alpha-icon-filter:icon iconButton\"\n{images.PopUpWindow.Lookup.Close}=\"svgIcon=#alpha-icon-x:icon iconButton\"\n{images.PopUpWindow.DetailView.Close}=\"svgIcon=#alpha-icon-x:icon iconButton\"\n{images.CollapseContainer.Open}=\"svgIcon=#alpha-icon-chevronRight:icon iconButton\"\n{images.CollapseContainer.Close}=\"svgIcon=#alpha-icon-chevronDown:icon iconButton\"\n{images.FieldHelpIcon}=\"svgIcon=#alpha-icon-questionCircle:icon\"\n{images.SearchPart.SaveSearchCriteria}=\"svgIcon=#alpha-icon-save:icon iconButton\"\n{images.SearchPart.LoadSearchCriteria}=\"svgIcon=#alpha-icon-load:icon iconButton\"\n{images.SearchPart.RunSearch}=\"svgIcon=#alpha-icon-magGlass:icon iconButton\"\n{images.SearchPart.ClearSearch}=\"svgIcon=#alpha-icon-magGlassX:icon iconButton\"\n{images.GridRow.SelectionPointer}=\"svgIcon=#alpha-icon-chevronRight:icon iconButton\"\n{images.Grid.SortAsc}=\"svgIcon=#alpha-icon-chevronUp:icon iconButton\"\n{images.Grid.SortAscDisabled}=\"svgIcon=#alpha-icon-chevronUp:icon iconDisabled iconButton\"\n{images.Grid.sortDesc}=\"svgIcon=#alpha-icon-chevronDown:icon iconButton\"\n{images.grid.sortDescDisabled}=\"svgIcon=#alpha-icon-chevronDown:icon iconDisabled iconButton\"\n{images.grid.firstPage}=\"svgIcon=#alpha-icon-chevronDblLeft:icon iconButton\"\n{images.grid.firstPageDisabled}=\"svgIcon=#alpha-icon-chevronDblLeft:icon iconDisabled iconButton\"\n{images.grid.prevPage}=\"svgIcon=#alpha-icon-chevronLeft:icon iconButton\"\n{images.grid.prevPageDisabled}=\"svgIcon=#alpha-icon-chevronLeft:icon iconDisabled iconButton\"\n{images.grid.nextPage}=\"svgIcon=#alpha-icon-chevronRight:icon iconButton\"\n{images.grid.nextPageDisabled}=\"svgIcon=#alpha-icon-chevronRight:icon iconDisabled iconButton\"\n{images.grid.lastPage}=\"svgIcon=#alpha-icon-chevronDblRight:icon iconButton\"\n{images.grid.lastPageDisabled}=\"svgIcon=#alpha-icon-chevronDblRight:icon iconDisabled iconButton\"\n{images.edit.dropdownArrow}=\"svgIcon=#alpha-icon-chevronDown:icon\"\n{images.edit.datePicker}=\"svgIcon=#alpha-icon-chevronDown:icon\"\n{images.edit.dateTimePicker}=\"svgIcon=#alpha-icon-chevronDown:icon\"\n{images.edit.timePicker}=\"svgIcon=#alpha-icon-chevronDown:icon\"\n{images.edit.calculator}=\n{images.edit.lookup}=\"svgIcon=#alpha-icon-chevronDown:icon\"\n{images.javascript.deleteRowConfirmation}=\"svgIcon=#alpha-icon-questionCircle:icon\"\n{images.javascript.cancelEditRowConfirmation}=\"svgIcon=#alpha-icon-questionCircle:icon\"\n{images.javascript.UndoEditsConfirmation}=\"svgIcon=#alpha-icon-infoCircle:icon\"\n{images.javascript.UndoAllEditsConfirmation}=\"svgIcon=#alpha-icon-infoCircle:icon\"\n{images.javascript.dirtyRecordWarning}=\"svgIcon=#alpha-icon-infoCircle:icon\"\n{images.dv.close}=\"svgIcon=#alpha-icon-xCircle:icon iconButton\"\n{images.dv.firstRecord}=\"svgIcon=#alpha-icon-chevronDblLeft:icon iconButton\"\n{images.dv.prevRecord}=\"svgIcon=#alpha-icon-chevronLeft:icon iconButton\"\n{images.dv.nextRecord}=\"svgIcon=#alpha-icon-chevronRight:icon iconButton\"\n{images.dv.lastRecord}=\"svgIcon=#alpha-icon-chevronDblRight:icon iconButton\"\n{images.dv.newRecord}=\"svgIcon=#alpha-icon-docAdd:icon iconButton\"\n{images.dv.cancelEdits}=\"svgIcon=#alpha-icon-editCancel:icon iconButton\"\n{images.dv.deleteRecord}=\"svgIcon=#alpha-icon-docX:icon iconButton\"\n{images.dv.saveRecord}=\"svgIcon=#alpha-icon-save:icon iconButton\"\n{images.dv.saveAndEnter}=\"svgIcon=#alpha-icon-saveAndEnter:icon iconButton\"\n{images.dv.switchToEdit}=\"svgIcon=#alpha-icon-edit:icon iconButton\"\n{images.dv.switchToView}=\"svgIcon=#alpha-icon-x:icon iconButton\"\n{images.disabled.dv.newRecord}=\"svgIcon=#alpha-icon-docAdd:icon iconButton\"\n{images.disabled.dv.cancelEdits}=\"svgIcon=#alpha-icon-editCancel:icon iconButton\"\n{images.disabled.dv.deleteRecord}=\"svgIcon=#alpha-icon-docX:icon iconButton\"\n{images.disabled.dv.saveRecord}=\"svgIcon=#alpha-icon-save:icon iconButton\"\n{images.disabled.dv.saveAndEnter}=\"svgIcon=#alpha-icon-saveAndEnter:icon iconButton\"\n{images.dv.cancelNewRecord}=\"svgIcon=#alpha-icon-editCancel:icon iconButton\"\n{images.grid.editError}=\"svgIcon=#alpha-icon-exclamationCircle:icon\"\n{images.dialog.editError}=\"svgIcon=#alpha-icon-exclamationCircle:icon\"\n{images.tabbedUI.menuExpandLeft}=\"svgIcon=#alpha-icon-chevronDblRight:icon\"\n{images.tabbedUI.menuCollapseLeft}=\"svgIcon=#alpha-icon-chevronDblLeft:icon\"\n{images.tabbedUI.menuExpandRight}=\"svgIcon=#alpha-icon-chevronDblLeft:icon\"\n{images.tabbedUI.menuCollapseRight}=\"svgIcon=#alpha-icon-chevronDblRight:icon\"\n{images.dialog.repeatingSectionActiveRowIcon}=\"svgIcon=#alpha-icon-chevronRight:icon\"\n{images.dialog.repeatingSectionAddRowIcon}=\"svgIcon=#alpha-icon-add:icon iconButton\"\n{images.dialog.repeatingSectionDeleteRowIcon}=\"svgIcon=#alpha-icon-remove:icon iconButton\"\n{images.dialog.repeatingSectionErrorRowIcon}=\"svgIcon=#alpha-icon-exclamationCircle:icon\"\n{images.dialog.deleteRowMessage.icon}=\"svgIcon=#alpha-icon-questionCircle:icon\"\n{images.dialog.resetForm.icon}=\"svgIcon=#alpha-icon-questionCircle:icon\"\n{images.dialog.dirtyForm.icon}=\"svgIcon=#alpha-icon-infoCircle:icon\"\n{images.dialog.editError}=\"svgIcon=#alpha-icon-exclamationCircle:icon\"\n{images.dialog.listNav}=\"svgIcon=#alpha-icon-chevronRight:icon\"\n{images.dialog.listNavSubtle}=\"svgIcon=#alpha-icon-chevronRight:icon\"\n{images.dialog.menu}=\"svgIcon=#alpha-icon-bars:icon\"\n{images.dialog.refresh}=\"svgIcon=#alpha-icon-refresh:icon\"\n{images.dialog.refreshDisabled}=\"svgIcon=#alpha-icon-refresh:icon iconDisabled\""
        }
    }
}