define class DynamicLists::FileInteraction 
    dim private config as extension::json
    dim private cn as sql::connection

    function [static] create as DynamicLists::Result (configName as c)
        dim configInterface as p 
        dim config as DynamicLists::Result 
        dim configJson as extension::json 
        dim configRequestArgs as p 

        configRequestArgs.configName = configName
        configInterface = require("listConfigInterface")
        config = configInterface.requestConfig(configRequestArgs)


        if .not. config.isSuccessful() then 
            create = config 
            end 
        end if 

        configJson = config.getInner()

        dim cn as sql::connection 
        if configJson.getProperty("dataSource").hasProperty("connectionString") then 
            cn.open("::Name::" + configJson.getProperty("dataSource").getProperty("connectionString"))
        else 
            cn.open("::Name::" + (new DynamicLists::Environment()).DEFAULT_CONNECTION_STRING)
        end if

        create = DynamicLists::Result.success(new DynamicLists::FileInteraction(configJson, cn))
    end function

    function FileInteraction (config as extension::json, cn as sql::connection)
        self.config = config 
        self.cn = cn
    end function

    function createExcelFile as DynamicLists::Result (e as p, filters as c) 
        dim ds as extension::json = self.config.getProperty("dataSource")

        dim sheet as Office::Spreadsheet
        dim doc as Office::ExcelDocument
        dim fmt as Office::Format

        dim numFmt as Office::Format 
        numFmt = doc.addFormat()
        numFmt.numericFormat = Office::NumericFormat::General

        dim dataJsonStr as c = context.session.DYNAMIC_LIST_CURRENT_DATA
        dim columnNamesStr as c = context.session.DYNAMIC_LIST_COLUMN_NAMES
        dim columnDisplayNamesStr as c = context.session.DYNAMIC_LIST_COLUMN_DISPLAY_NAMES

        dim dataJson as extension::json
        dim mappingNames as extension::json
        dim displayNames as extension::json
        dataJson.setJson(dataJsonStr)
        mappingNames.setJson(columnNamesStr)
        displayNames.setJson(columnDisplayNamesStr)

        sheet = doc.addSheet(self.config.getProperty("name"))

        ' Write headers
        for i = 0 to mappingNames.getLength() - 1
            sheet.write(1, i + 1, mappingNames.getIndexed(i), fmt)
        next
        for i = 0 to displayNames.getLength() - 1
            sheet.Write(2, i + 1, displayNames.getIndexed(i), fmt)
        next

        ' Write values
        for column = 1 to mappingNames.getLength()
            dim mappingName as c = mappingNames.getIndexed(column - 1)
            for row = 1 to dataJson.getLength()
                dim rowJson as extension::json = dataJson.getIndexed(row - 1)
                if rowJson.hasProperty(mappingName) then 
                    dim currFmt as Office::Format = fmt
                    sheet.write(row + 2, column, rowJson.getProperty(mappingName), currFmt)
                end if
            next
        next

        dim filename as c = context.request.GetRequestTempFileName(".xlsx")
        if doc.save(filename) then 
            createExcelFile = DynamicLists::Result.success(filename)
        else 
            createExcelFile = DynamicLists::Result.fail("Could not generate Excel file.")
        end if
    end function

    function readFileToJsonString as DynamicLists::Result (file as p)
		if file.file.contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" then 
			readFileToJsonString = getExcel2007Data(file)
		else if file.file.contentType = "text/csv" then 
			readFileToJsonString = getCSVData(file)
		end if
    end function
    
    function private getExcel2007Data as DynamicLists::Result (file as p)
        dim obj as Office::ExcelDocument
        dim flag as l
        flag = obj.load(file.tempFileUploadedData)
        
        if .not. flag then
            getExcel2007Data = DynamicLists::Result.fail("Could not load file " + file.fileName)
            end
        end if
        
        dim json as extension::JSON
        json.setJson(obj.toJson())
        
        if json.getLength() = 0 then 
            getExcel2007Data = DynamicLists::Result.fail("No sheets exist in file " + file.fileName)
            end 
        end if 

        ' The toJSON function associates the first row as column names. But we have another 
        ' row for display names. This needs to be skipped. However, we have no way 
        ' to pop from an array in xbasic. So we just need to copy the array.

        json = json.getIndexed(0)

        dim jsonOut as extension::json 
        jsonOut.setJson("[]")

        for i = 0 to json.getLength() - 1 
            if i = 0 then 
                continue
            else 
                jsonOut.push(json.getIndexed(i))
            end if
        next
        
        getExcel2007Data = DynamicLists::Result.success(jsonOut)
    end function

    function private getCSVData as DynamicLists::Result (file as p)
        dim text as c 
        text = get_from_file(file.tempFileUploadedData)

        dim json as extension::json 
        json.setJson(extension::json::JsonFromCSV(text))
        
        getCSVData = DynamicLists::Result.success(json)
    end function

    function createExcelTemplate as DynamicLists::Result ()
        if self.config.getProperty("dataSource").hasProperty("sql") then 
            createExcelTemplate = DynamicLists::Result.fail("Cannot create a template for a custom SQL list.")
            end 
        end if 

        dim columnNamesStr as c = context.session.DYNAMIC_LIST_COLUMN_NAMES
        dim displayNamesStr as c = context.session.DYNAMIC_LIST_COLUMN_DISPLAY_NAMES

        dim mappingNames as extension::json
        mappingNames.setJson(columnNamesStr)

        dim displayNames as extension::json
        displayNames.setJson(displayNamesStr)

        dim colIsAuto as u
        if self.config.getProperty("dataSource").hasProperty("table") then 
            dim tblName as c = self.config.getProperty("dataSource").getProperty("table")
            dim tblInfo as sql::tableInfo 
            if self.cn.getTableInfo(tblInfo, tblName) = .f. then 
                createExcelTemplate = DynamicLists::Result.fail("Couldn't get table info for " + tblName)
                end 
            end if 

            for i = 1 to tblInfo.column.count 
                dim colInfo as sql::indexColumnInfo = tblInfo.column[i]
                if colInfo.autoGenerate .or. colInfo.autoIncrement then 
                    colIsAuto.set(colInfo.name, .t.)
                else 
                    colIsAuto.set(colInfo.name, .f.)
                end if 
            next
        end if

        dim sheet as Office::Spreadsheet 
        dim doc as Office::ExcelDocument 
        sheet = doc.addSheet(self.config.getProperty("name"))

        dim increment as n = 1
        for i = 0 to mappingNames.getLength() - 1
            dim name as c = mappingNames.getIndexed(i)
            dim displayName as c = displayNames.getIndexed(i)
            if colIsAuto.exist(name) .and. colIsAuto.get(name) = .t. then 
                continue 
            end if 
            sheet.write(1, increment, name)
            sheet.write(2, increment, displayName)
            increment = increment + 1
        next 

        dim fileName as c = context.request.GetRequestTempFileName(".xlsx")
        if doc.save(filename) then 
            createExcelTemplate = DynamicLists::Result.success(filename)
        else 
            createExcelTemplate = DynamicLists::Result.fail("Could not generate Excel template")
        end if
    end function
end class