define class DynamicLists::FileInteraction 
    dim private config as extension::json
    dim private cn as sql::connection

    function [static] create as DynamicLists::Result (configName as c)
        dim configInterface as p 
        dim config as DynamicLists::Result 
        dim configJson as extension::json 
        dim configRequestArgs as p 

        configRequestArgs.configName = configName
        configInterface = require("listConfigInterface")
        config = configInterface.requestConfig(configRequestArgs)


        if .not. config.isSuccessful() then 
            create = config 
            end 
        end if 

        configJson = config.getInner()

        dim cn as sql::connection 
        if configJson.getProperty("dataSource").hasProperty("connectionString") then 
            cn.open("::Name::" + configJson.getProperty("dataSource").getProperty("connectionString"))
        else 
            cn.open("::Name::" + (new DynamicLists::Environment()).DEFAULT_CONNECTION_STRING)
        end if

        create = DynamicLists::Result.success(new DynamicLists::FileInteraction(configJson, cn))
    end function

    function FileInteraction (config as extension::json, cn as sql::connection)
        self.config = config 
        self.cn = cn
    end function

    function createExcelFile as DynamicLists::Result (filters as c) 
        dim ds as extension::json = self.config.getProperty("dataSource")

        dim sheet as Office::Spreadsheet
        dim doc as Office::ExcelDocument
        dim fmt as Office::Format

        dim numFmt as Office::Format 
        numFmt = doc.addFormat()
        numFmt.numericFormat = Office::NumericFormat::General

        if ds.getProperty("type") = "sql" then 
            dim dataResult as DynamicLists::Result 
            dim fetchArgs as p 
            fetchArgs.configName = self.config.getProperty("name")
            fetchArgs.filters = filters 

            dim standardQueries as p = require("standardQueries")
            dataResult = standardQueries.querySqlWithFilters(fetchArgs, .t.)

            if dataResult.isSuccessful() = .f. then 
                createExcelFile = dataResult
                end 
            end if 

            dim rs as sql::ResultSet = dataResult.getInner()
            sheet = doc.AddSheetFromResultSet(rs, self.config.getProperty("name"), .t.)
        else
            dim dataJsonStr as c = context.session.DYNAMIC_LIST_CURRENT_DATA
            dim dataJson as extension::json 
            dataJson.setJson(dataJsonStr)

            dim editTypeLookup as u

            dim mappingNames[0] as c 
            for i = 0 to self.config.getProperty("mappings").getLength() - 1 
                dim mapping as extension::json = self.config.getProperty("mappings").getIndexed(i)
                mappingNames[] = DynamicLists::FileInteraction.mappingName(mapping)

                if mapping.hasProperty("editType") then 
                    editTypeLookup.set(mappingNames[i + 1], mapping.getProperty("editType"))
                end if
            next

            sheet = doc.addSheet(self.config.getProperty("name"))
            ' Write headers
            for i = 1 to mappingNames.size()
                sheet.write(1, i, mappingNames[i], fmt)
            next

            ' Write values
            for column = 1 to mappingNames.size()
                for row = 1 to dataJson.getLength()
                    dim rowJson as extension::json = dataJson.getIndexed(row - 1)
                    if rowJson.hasProperty(mappingNames[column]) then 
                        dim currFmt as Office::Format = fmt

                        if editTypeLookup.exist(mappingNames[column]) then 
                            dim ty as c = editTypeLookup.get(mappingNames[column])
                            if ty = "time" .or. ty = "datetime" .or. ty = "number" then 
                                currFmt = numFmt
                            end if
                        end if

                        sheet.write(row + 1, column, rowJson.getProperty(mappingNames[column]), currFmt)
                    end if
                next
            next
        end if

        dim filename as c = context.request.GetRequestTempFileName(".xlsx")
        if doc.save(filename) then 
            createExcelFile = DynamicLists::Result.success(filename)
        else 
            createExcelFile = DynamicLists::Result.fail("Could not generate Excel file.")
        end if
    end function

    function readFileToJsonString as DynamicLists::Result (file as p)
		if file.file.contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" then 
			readFileToJsonString = getExcel2007Data(file)
		else if file.file.contentType = "text/csv" then 
			readFileToJsonString = getCSVData(file)
		end if
    end function
    
    function private getExcel2007Data as DynamicLists::Result (file as p)
        dim obj as Office::ExcelDocument
        dim flag as l
        flag = obj.load(file.tempFileUploadedData)
        
        if .not. flag then
            getExcel2007Data = DynamicLists::Result.fail("Could not load file " + file.fileName)
            end
        end if
        
        dim json as extension::JSON
        json.setJson(obj.toJson())
        
        if json.getLength() = 0 then 
            getExcel2007Data = DynamicLists::Result.fail("No sheets exist in file " + file.fileName)
            end 
        end if 
        
        getExcel2007Data = DynamicLists::Result.success(json.getIndexed(0))
    end function

    function private getCSVData as DynamicLists::Result (file as p)
        dim text as c 
        text = get_from_file(file.tempFileUploadedData)

        dim json as extension::json 
        json.setJson(extension::json::JsonFromCSV(text))
        
        getCSVData = DynamicLists::Result.success(json)
    end function

    function createExcelTemplate as DynamicLists::Result ()
        if self.config.getProperty("dataSource").hasProperty("sql") then 
            createExcelTemplate = DynamicLists::Result.fail("Cannot create a template for a custom SQL list.")
            end 
        end if 

        dim allColNames[0] as c 
        dim colIsAuto as u

        if self.config.getProperty("dataSource").hasProperty("table") then 
            dim tblName as c = self.config.getProperty("dataSource").getProperty("table")
            dim tblInfo as sql::tableInfo 
            if self.cn.getTableInfo(tblInfo, tblName) = .f. then 
                createExcelTemplate = DynamicLists::Result.fail("Couldn't get table info for " + tblName)
                end 
            end if 

            for i = 1 to tblInfo.column.count 
                dim colInfo as sql::indexColumnInfo = tblInfo.column[i]
                if colInfo.autoGenerate .or. colInfo.autoIncrement then 
                    colIsAuto.set(colInfo.name, .t.)
                else 
                    colIsAuto.set(colInfo.name, .f.)
                end if 
            next
        end if

        for i = 0 to self.config.getProperty("mappings").getLength() - 1 
            dim mapping as extension::json = self.config.getProperty("mappings").getIndexed(i)
            dim name as c = mappingName(mapping)

            if colIsAuto.exist(name) .and. colIsAuto.get(name) = .t. then 
                continue
            end if

            allColNames[] = name 
        next

        dim sheet as Office::Spreadsheet 
        dim doc as Office::ExcelDocument 
        sheet = doc.addSheet(self.config.getProperty("name"))

        for i = 1 to allColNames.size()
            sheet.write(1, i, allColNames[i])
        next 

        dim fileName as c = context.request.GetRequestTempFileName(".xlsx")
        if doc.save(filename) then 
            createExcelTemplate = DynamicLists::Result.success(filename)
        else 
            createExcelTemplate = DynamicLists::Result.fail("Could not generate Excel template")
        end if
    end function


    function [static] mappingName as c (mapping as extension::json)
        dim tag as c = mapping.getProperty("tag")

        if tag = "data" then 
            mappingName = mapping.getProperty("flattenedName")
        else if tag = "nested" then
            mappingName = DynamicLists::FileInteraction.mappingName(mapping.getProperty("mapping"))
        else if tag = "object" .or. tag = "array" then 
            mappingName = DynamicLists::FileInteraction.mappingName(mapping.getProperty("item"))
        end if
    end function



end class